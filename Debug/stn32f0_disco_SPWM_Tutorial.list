
stn32f0_disco_SPWM_Tutorial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ad4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000250  08005b98  08005b98  00015b98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005de8  08005de8  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08005de8  08005de8  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005de8  08005de8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005de8  08005de8  00015de8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005dec  08005dec  00015dec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005df0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000410  20000010  08005e00  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000420  08005e00  00020420  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d4dd  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001b6c  00000000  00000000  0002d515  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b70  00000000  00000000  0002f088  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000aa8  00000000  00000000  0002fbf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001260e  00000000  00000000  000306a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000af05  00000000  00000000  00042cae  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00070656  00000000  00000000  0004dbb3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000be209  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c0c  00000000  00000000  000be284  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005b7c 	.word	0x08005b7c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08005b7c 	.word	0x08005b7c

08000108 <__gnu_thumb1_case_uhi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5a09      	ldrh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	; 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	; 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <__aeabi_cdrcmple>:
 8000408:	4684      	mov	ip, r0
 800040a:	1c10      	adds	r0, r2, #0
 800040c:	4662      	mov	r2, ip
 800040e:	468c      	mov	ip, r1
 8000410:	1c19      	adds	r1, r3, #0
 8000412:	4663      	mov	r3, ip
 8000414:	e000      	b.n	8000418 <__aeabi_cdcmpeq>
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <__aeabi_cdcmpeq>:
 8000418:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800041a:	f000 fc0d 	bl	8000c38 <__ledf2>
 800041e:	2800      	cmp	r0, #0
 8000420:	d401      	bmi.n	8000426 <__aeabi_cdcmpeq+0xe>
 8000422:	2100      	movs	r1, #0
 8000424:	42c8      	cmn	r0, r1
 8000426:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000428 <__aeabi_dcmpeq>:
 8000428:	b510      	push	{r4, lr}
 800042a:	f000 fb65 	bl	8000af8 <__eqdf2>
 800042e:	4240      	negs	r0, r0
 8000430:	3001      	adds	r0, #1
 8000432:	bd10      	pop	{r4, pc}

08000434 <__aeabi_dcmplt>:
 8000434:	b510      	push	{r4, lr}
 8000436:	f000 fbff 	bl	8000c38 <__ledf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	db01      	blt.n	8000442 <__aeabi_dcmplt+0xe>
 800043e:	2000      	movs	r0, #0
 8000440:	bd10      	pop	{r4, pc}
 8000442:	2001      	movs	r0, #1
 8000444:	bd10      	pop	{r4, pc}
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__aeabi_dcmple>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f000 fbf5 	bl	8000c38 <__ledf2>
 800044e:	2800      	cmp	r0, #0
 8000450:	dd01      	ble.n	8000456 <__aeabi_dcmple+0xe>
 8000452:	2000      	movs	r0, #0
 8000454:	bd10      	pop	{r4, pc}
 8000456:	2001      	movs	r0, #1
 8000458:	bd10      	pop	{r4, pc}
 800045a:	46c0      	nop			; (mov r8, r8)

0800045c <__aeabi_dcmpgt>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f000 fb87 	bl	8000b70 <__gedf2>
 8000462:	2800      	cmp	r0, #0
 8000464:	dc01      	bgt.n	800046a <__aeabi_dcmpgt+0xe>
 8000466:	2000      	movs	r0, #0
 8000468:	bd10      	pop	{r4, pc}
 800046a:	2001      	movs	r0, #1
 800046c:	bd10      	pop	{r4, pc}
 800046e:	46c0      	nop			; (mov r8, r8)

08000470 <__aeabi_dcmpge>:
 8000470:	b510      	push	{r4, lr}
 8000472:	f000 fb7d 	bl	8000b70 <__gedf2>
 8000476:	2800      	cmp	r0, #0
 8000478:	da01      	bge.n	800047e <__aeabi_dcmpge+0xe>
 800047a:	2000      	movs	r0, #0
 800047c:	bd10      	pop	{r4, pc}
 800047e:	2001      	movs	r0, #1
 8000480:	bd10      	pop	{r4, pc}
 8000482:	46c0      	nop			; (mov r8, r8)

08000484 <__aeabi_d2uiz>:
 8000484:	b570      	push	{r4, r5, r6, lr}
 8000486:	2200      	movs	r2, #0
 8000488:	4b0c      	ldr	r3, [pc, #48]	; (80004bc <__aeabi_d2uiz+0x38>)
 800048a:	0004      	movs	r4, r0
 800048c:	000d      	movs	r5, r1
 800048e:	f7ff ffef 	bl	8000470 <__aeabi_dcmpge>
 8000492:	2800      	cmp	r0, #0
 8000494:	d104      	bne.n	80004a0 <__aeabi_d2uiz+0x1c>
 8000496:	0020      	movs	r0, r4
 8000498:	0029      	movs	r1, r5
 800049a:	f001 f9ef 	bl	800187c <__aeabi_d2iz>
 800049e:	bd70      	pop	{r4, r5, r6, pc}
 80004a0:	4b06      	ldr	r3, [pc, #24]	; (80004bc <__aeabi_d2uiz+0x38>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	0020      	movs	r0, r4
 80004a6:	0029      	movs	r1, r5
 80004a8:	f000 fea0 	bl	80011ec <__aeabi_dsub>
 80004ac:	f001 f9e6 	bl	800187c <__aeabi_d2iz>
 80004b0:	2380      	movs	r3, #128	; 0x80
 80004b2:	061b      	lsls	r3, r3, #24
 80004b4:	469c      	mov	ip, r3
 80004b6:	4460      	add	r0, ip
 80004b8:	e7f1      	b.n	800049e <__aeabi_d2uiz+0x1a>
 80004ba:	46c0      	nop			; (mov r8, r8)
 80004bc:	41e00000 	.word	0x41e00000

080004c0 <__aeabi_dadd>:
 80004c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004c2:	464f      	mov	r7, r9
 80004c4:	4646      	mov	r6, r8
 80004c6:	46d6      	mov	lr, sl
 80004c8:	000c      	movs	r4, r1
 80004ca:	0309      	lsls	r1, r1, #12
 80004cc:	b5c0      	push	{r6, r7, lr}
 80004ce:	0a49      	lsrs	r1, r1, #9
 80004d0:	0f47      	lsrs	r7, r0, #29
 80004d2:	005e      	lsls	r6, r3, #1
 80004d4:	4339      	orrs	r1, r7
 80004d6:	031f      	lsls	r7, r3, #12
 80004d8:	0fdb      	lsrs	r3, r3, #31
 80004da:	469c      	mov	ip, r3
 80004dc:	0065      	lsls	r5, r4, #1
 80004de:	0a7b      	lsrs	r3, r7, #9
 80004e0:	0f57      	lsrs	r7, r2, #29
 80004e2:	431f      	orrs	r7, r3
 80004e4:	0d6d      	lsrs	r5, r5, #21
 80004e6:	0fe4      	lsrs	r4, r4, #31
 80004e8:	0d76      	lsrs	r6, r6, #21
 80004ea:	46a1      	mov	r9, r4
 80004ec:	00c0      	lsls	r0, r0, #3
 80004ee:	46b8      	mov	r8, r7
 80004f0:	00d2      	lsls	r2, r2, #3
 80004f2:	1bab      	subs	r3, r5, r6
 80004f4:	4564      	cmp	r4, ip
 80004f6:	d07b      	beq.n	80005f0 <__aeabi_dadd+0x130>
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	dd5f      	ble.n	80005bc <__aeabi_dadd+0xfc>
 80004fc:	2e00      	cmp	r6, #0
 80004fe:	d000      	beq.n	8000502 <__aeabi_dadd+0x42>
 8000500:	e0a4      	b.n	800064c <__aeabi_dadd+0x18c>
 8000502:	003e      	movs	r6, r7
 8000504:	4316      	orrs	r6, r2
 8000506:	d100      	bne.n	800050a <__aeabi_dadd+0x4a>
 8000508:	e112      	b.n	8000730 <__aeabi_dadd+0x270>
 800050a:	1e5e      	subs	r6, r3, #1
 800050c:	2e00      	cmp	r6, #0
 800050e:	d000      	beq.n	8000512 <__aeabi_dadd+0x52>
 8000510:	e19e      	b.n	8000850 <__aeabi_dadd+0x390>
 8000512:	1a87      	subs	r7, r0, r2
 8000514:	4643      	mov	r3, r8
 8000516:	42b8      	cmp	r0, r7
 8000518:	4180      	sbcs	r0, r0
 800051a:	2501      	movs	r5, #1
 800051c:	1ac9      	subs	r1, r1, r3
 800051e:	4240      	negs	r0, r0
 8000520:	1a09      	subs	r1, r1, r0
 8000522:	020b      	lsls	r3, r1, #8
 8000524:	d400      	bmi.n	8000528 <__aeabi_dadd+0x68>
 8000526:	e131      	b.n	800078c <__aeabi_dadd+0x2cc>
 8000528:	0249      	lsls	r1, r1, #9
 800052a:	0a4e      	lsrs	r6, r1, #9
 800052c:	2e00      	cmp	r6, #0
 800052e:	d100      	bne.n	8000532 <__aeabi_dadd+0x72>
 8000530:	e16e      	b.n	8000810 <__aeabi_dadd+0x350>
 8000532:	0030      	movs	r0, r6
 8000534:	f001 fa64 	bl	8001a00 <__clzsi2>
 8000538:	0003      	movs	r3, r0
 800053a:	3b08      	subs	r3, #8
 800053c:	2b1f      	cmp	r3, #31
 800053e:	dd00      	ble.n	8000542 <__aeabi_dadd+0x82>
 8000540:	e161      	b.n	8000806 <__aeabi_dadd+0x346>
 8000542:	2220      	movs	r2, #32
 8000544:	0039      	movs	r1, r7
 8000546:	1ad2      	subs	r2, r2, r3
 8000548:	409e      	lsls	r6, r3
 800054a:	40d1      	lsrs	r1, r2
 800054c:	409f      	lsls	r7, r3
 800054e:	430e      	orrs	r6, r1
 8000550:	429d      	cmp	r5, r3
 8000552:	dd00      	ble.n	8000556 <__aeabi_dadd+0x96>
 8000554:	e151      	b.n	80007fa <__aeabi_dadd+0x33a>
 8000556:	1b5d      	subs	r5, r3, r5
 8000558:	1c6b      	adds	r3, r5, #1
 800055a:	2b1f      	cmp	r3, #31
 800055c:	dd00      	ble.n	8000560 <__aeabi_dadd+0xa0>
 800055e:	e17c      	b.n	800085a <__aeabi_dadd+0x39a>
 8000560:	2120      	movs	r1, #32
 8000562:	1ac9      	subs	r1, r1, r3
 8000564:	003d      	movs	r5, r7
 8000566:	0030      	movs	r0, r6
 8000568:	408f      	lsls	r7, r1
 800056a:	4088      	lsls	r0, r1
 800056c:	40dd      	lsrs	r5, r3
 800056e:	1e79      	subs	r1, r7, #1
 8000570:	418f      	sbcs	r7, r1
 8000572:	0031      	movs	r1, r6
 8000574:	2207      	movs	r2, #7
 8000576:	4328      	orrs	r0, r5
 8000578:	40d9      	lsrs	r1, r3
 800057a:	2500      	movs	r5, #0
 800057c:	4307      	orrs	r7, r0
 800057e:	403a      	ands	r2, r7
 8000580:	2a00      	cmp	r2, #0
 8000582:	d009      	beq.n	8000598 <__aeabi_dadd+0xd8>
 8000584:	230f      	movs	r3, #15
 8000586:	403b      	ands	r3, r7
 8000588:	2b04      	cmp	r3, #4
 800058a:	d005      	beq.n	8000598 <__aeabi_dadd+0xd8>
 800058c:	1d3b      	adds	r3, r7, #4
 800058e:	42bb      	cmp	r3, r7
 8000590:	41bf      	sbcs	r7, r7
 8000592:	427f      	negs	r7, r7
 8000594:	19c9      	adds	r1, r1, r7
 8000596:	001f      	movs	r7, r3
 8000598:	020b      	lsls	r3, r1, #8
 800059a:	d400      	bmi.n	800059e <__aeabi_dadd+0xde>
 800059c:	e226      	b.n	80009ec <__aeabi_dadd+0x52c>
 800059e:	1c6a      	adds	r2, r5, #1
 80005a0:	4bc6      	ldr	r3, [pc, #792]	; (80008bc <__aeabi_dadd+0x3fc>)
 80005a2:	0555      	lsls	r5, r2, #21
 80005a4:	0d6d      	lsrs	r5, r5, #21
 80005a6:	429a      	cmp	r2, r3
 80005a8:	d100      	bne.n	80005ac <__aeabi_dadd+0xec>
 80005aa:	e106      	b.n	80007ba <__aeabi_dadd+0x2fa>
 80005ac:	4ac4      	ldr	r2, [pc, #784]	; (80008c0 <__aeabi_dadd+0x400>)
 80005ae:	08ff      	lsrs	r7, r7, #3
 80005b0:	400a      	ands	r2, r1
 80005b2:	0753      	lsls	r3, r2, #29
 80005b4:	0252      	lsls	r2, r2, #9
 80005b6:	433b      	orrs	r3, r7
 80005b8:	0b12      	lsrs	r2, r2, #12
 80005ba:	e08e      	b.n	80006da <__aeabi_dadd+0x21a>
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d000      	beq.n	80005c2 <__aeabi_dadd+0x102>
 80005c0:	e0b8      	b.n	8000734 <__aeabi_dadd+0x274>
 80005c2:	1c6b      	adds	r3, r5, #1
 80005c4:	055b      	lsls	r3, r3, #21
 80005c6:	0d5b      	lsrs	r3, r3, #21
 80005c8:	2b01      	cmp	r3, #1
 80005ca:	dc00      	bgt.n	80005ce <__aeabi_dadd+0x10e>
 80005cc:	e130      	b.n	8000830 <__aeabi_dadd+0x370>
 80005ce:	1a87      	subs	r7, r0, r2
 80005d0:	4643      	mov	r3, r8
 80005d2:	42b8      	cmp	r0, r7
 80005d4:	41b6      	sbcs	r6, r6
 80005d6:	1acb      	subs	r3, r1, r3
 80005d8:	4276      	negs	r6, r6
 80005da:	1b9e      	subs	r6, r3, r6
 80005dc:	0233      	lsls	r3, r6, #8
 80005de:	d500      	bpl.n	80005e2 <__aeabi_dadd+0x122>
 80005e0:	e14c      	b.n	800087c <__aeabi_dadd+0x3bc>
 80005e2:	003b      	movs	r3, r7
 80005e4:	4333      	orrs	r3, r6
 80005e6:	d1a1      	bne.n	800052c <__aeabi_dadd+0x6c>
 80005e8:	2200      	movs	r2, #0
 80005ea:	2400      	movs	r4, #0
 80005ec:	2500      	movs	r5, #0
 80005ee:	e070      	b.n	80006d2 <__aeabi_dadd+0x212>
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	dc00      	bgt.n	80005f6 <__aeabi_dadd+0x136>
 80005f4:	e0e5      	b.n	80007c2 <__aeabi_dadd+0x302>
 80005f6:	2e00      	cmp	r6, #0
 80005f8:	d100      	bne.n	80005fc <__aeabi_dadd+0x13c>
 80005fa:	e083      	b.n	8000704 <__aeabi_dadd+0x244>
 80005fc:	4eaf      	ldr	r6, [pc, #700]	; (80008bc <__aeabi_dadd+0x3fc>)
 80005fe:	42b5      	cmp	r5, r6
 8000600:	d060      	beq.n	80006c4 <__aeabi_dadd+0x204>
 8000602:	2680      	movs	r6, #128	; 0x80
 8000604:	0436      	lsls	r6, r6, #16
 8000606:	4337      	orrs	r7, r6
 8000608:	46b8      	mov	r8, r7
 800060a:	2b38      	cmp	r3, #56	; 0x38
 800060c:	dc00      	bgt.n	8000610 <__aeabi_dadd+0x150>
 800060e:	e13e      	b.n	800088e <__aeabi_dadd+0x3ce>
 8000610:	4643      	mov	r3, r8
 8000612:	4313      	orrs	r3, r2
 8000614:	001f      	movs	r7, r3
 8000616:	1e7a      	subs	r2, r7, #1
 8000618:	4197      	sbcs	r7, r2
 800061a:	183f      	adds	r7, r7, r0
 800061c:	4287      	cmp	r7, r0
 800061e:	4180      	sbcs	r0, r0
 8000620:	4240      	negs	r0, r0
 8000622:	1809      	adds	r1, r1, r0
 8000624:	020b      	lsls	r3, r1, #8
 8000626:	d400      	bmi.n	800062a <__aeabi_dadd+0x16a>
 8000628:	e0b0      	b.n	800078c <__aeabi_dadd+0x2cc>
 800062a:	4ba4      	ldr	r3, [pc, #656]	; (80008bc <__aeabi_dadd+0x3fc>)
 800062c:	3501      	adds	r5, #1
 800062e:	429d      	cmp	r5, r3
 8000630:	d100      	bne.n	8000634 <__aeabi_dadd+0x174>
 8000632:	e0c3      	b.n	80007bc <__aeabi_dadd+0x2fc>
 8000634:	4aa2      	ldr	r2, [pc, #648]	; (80008c0 <__aeabi_dadd+0x400>)
 8000636:	087b      	lsrs	r3, r7, #1
 8000638:	400a      	ands	r2, r1
 800063a:	2101      	movs	r1, #1
 800063c:	400f      	ands	r7, r1
 800063e:	431f      	orrs	r7, r3
 8000640:	0851      	lsrs	r1, r2, #1
 8000642:	07d3      	lsls	r3, r2, #31
 8000644:	2207      	movs	r2, #7
 8000646:	431f      	orrs	r7, r3
 8000648:	403a      	ands	r2, r7
 800064a:	e799      	b.n	8000580 <__aeabi_dadd+0xc0>
 800064c:	4e9b      	ldr	r6, [pc, #620]	; (80008bc <__aeabi_dadd+0x3fc>)
 800064e:	42b5      	cmp	r5, r6
 8000650:	d038      	beq.n	80006c4 <__aeabi_dadd+0x204>
 8000652:	2680      	movs	r6, #128	; 0x80
 8000654:	0436      	lsls	r6, r6, #16
 8000656:	4337      	orrs	r7, r6
 8000658:	46b8      	mov	r8, r7
 800065a:	2b38      	cmp	r3, #56	; 0x38
 800065c:	dd00      	ble.n	8000660 <__aeabi_dadd+0x1a0>
 800065e:	e0dc      	b.n	800081a <__aeabi_dadd+0x35a>
 8000660:	2b1f      	cmp	r3, #31
 8000662:	dc00      	bgt.n	8000666 <__aeabi_dadd+0x1a6>
 8000664:	e130      	b.n	80008c8 <__aeabi_dadd+0x408>
 8000666:	001e      	movs	r6, r3
 8000668:	4647      	mov	r7, r8
 800066a:	3e20      	subs	r6, #32
 800066c:	40f7      	lsrs	r7, r6
 800066e:	46bc      	mov	ip, r7
 8000670:	2b20      	cmp	r3, #32
 8000672:	d004      	beq.n	800067e <__aeabi_dadd+0x1be>
 8000674:	2640      	movs	r6, #64	; 0x40
 8000676:	1af3      	subs	r3, r6, r3
 8000678:	4646      	mov	r6, r8
 800067a:	409e      	lsls	r6, r3
 800067c:	4332      	orrs	r2, r6
 800067e:	0017      	movs	r7, r2
 8000680:	4663      	mov	r3, ip
 8000682:	1e7a      	subs	r2, r7, #1
 8000684:	4197      	sbcs	r7, r2
 8000686:	431f      	orrs	r7, r3
 8000688:	e0cc      	b.n	8000824 <__aeabi_dadd+0x364>
 800068a:	2b00      	cmp	r3, #0
 800068c:	d100      	bne.n	8000690 <__aeabi_dadd+0x1d0>
 800068e:	e204      	b.n	8000a9a <__aeabi_dadd+0x5da>
 8000690:	4643      	mov	r3, r8
 8000692:	4313      	orrs	r3, r2
 8000694:	d100      	bne.n	8000698 <__aeabi_dadd+0x1d8>
 8000696:	e159      	b.n	800094c <__aeabi_dadd+0x48c>
 8000698:	074b      	lsls	r3, r1, #29
 800069a:	08c0      	lsrs	r0, r0, #3
 800069c:	4318      	orrs	r0, r3
 800069e:	2380      	movs	r3, #128	; 0x80
 80006a0:	08c9      	lsrs	r1, r1, #3
 80006a2:	031b      	lsls	r3, r3, #12
 80006a4:	4219      	tst	r1, r3
 80006a6:	d008      	beq.n	80006ba <__aeabi_dadd+0x1fa>
 80006a8:	4645      	mov	r5, r8
 80006aa:	08ed      	lsrs	r5, r5, #3
 80006ac:	421d      	tst	r5, r3
 80006ae:	d104      	bne.n	80006ba <__aeabi_dadd+0x1fa>
 80006b0:	4643      	mov	r3, r8
 80006b2:	08d0      	lsrs	r0, r2, #3
 80006b4:	0759      	lsls	r1, r3, #29
 80006b6:	4308      	orrs	r0, r1
 80006b8:	0029      	movs	r1, r5
 80006ba:	0f42      	lsrs	r2, r0, #29
 80006bc:	00c9      	lsls	r1, r1, #3
 80006be:	4d7f      	ldr	r5, [pc, #508]	; (80008bc <__aeabi_dadd+0x3fc>)
 80006c0:	4311      	orrs	r1, r2
 80006c2:	00c0      	lsls	r0, r0, #3
 80006c4:	074b      	lsls	r3, r1, #29
 80006c6:	08ca      	lsrs	r2, r1, #3
 80006c8:	497c      	ldr	r1, [pc, #496]	; (80008bc <__aeabi_dadd+0x3fc>)
 80006ca:	08c0      	lsrs	r0, r0, #3
 80006cc:	4303      	orrs	r3, r0
 80006ce:	428d      	cmp	r5, r1
 80006d0:	d068      	beq.n	80007a4 <__aeabi_dadd+0x2e4>
 80006d2:	0312      	lsls	r2, r2, #12
 80006d4:	056d      	lsls	r5, r5, #21
 80006d6:	0b12      	lsrs	r2, r2, #12
 80006d8:	0d6d      	lsrs	r5, r5, #21
 80006da:	2100      	movs	r1, #0
 80006dc:	0312      	lsls	r2, r2, #12
 80006de:	0018      	movs	r0, r3
 80006e0:	0b13      	lsrs	r3, r2, #12
 80006e2:	0d0a      	lsrs	r2, r1, #20
 80006e4:	0512      	lsls	r2, r2, #20
 80006e6:	431a      	orrs	r2, r3
 80006e8:	4b76      	ldr	r3, [pc, #472]	; (80008c4 <__aeabi_dadd+0x404>)
 80006ea:	052d      	lsls	r5, r5, #20
 80006ec:	4013      	ands	r3, r2
 80006ee:	432b      	orrs	r3, r5
 80006f0:	005b      	lsls	r3, r3, #1
 80006f2:	07e4      	lsls	r4, r4, #31
 80006f4:	085b      	lsrs	r3, r3, #1
 80006f6:	4323      	orrs	r3, r4
 80006f8:	0019      	movs	r1, r3
 80006fa:	bc1c      	pop	{r2, r3, r4}
 80006fc:	4690      	mov	r8, r2
 80006fe:	4699      	mov	r9, r3
 8000700:	46a2      	mov	sl, r4
 8000702:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000704:	003e      	movs	r6, r7
 8000706:	4316      	orrs	r6, r2
 8000708:	d012      	beq.n	8000730 <__aeabi_dadd+0x270>
 800070a:	1e5e      	subs	r6, r3, #1
 800070c:	2e00      	cmp	r6, #0
 800070e:	d000      	beq.n	8000712 <__aeabi_dadd+0x252>
 8000710:	e100      	b.n	8000914 <__aeabi_dadd+0x454>
 8000712:	1887      	adds	r7, r0, r2
 8000714:	4287      	cmp	r7, r0
 8000716:	4180      	sbcs	r0, r0
 8000718:	4441      	add	r1, r8
 800071a:	4240      	negs	r0, r0
 800071c:	1809      	adds	r1, r1, r0
 800071e:	2501      	movs	r5, #1
 8000720:	020b      	lsls	r3, r1, #8
 8000722:	d533      	bpl.n	800078c <__aeabi_dadd+0x2cc>
 8000724:	2502      	movs	r5, #2
 8000726:	e785      	b.n	8000634 <__aeabi_dadd+0x174>
 8000728:	4664      	mov	r4, ip
 800072a:	0033      	movs	r3, r6
 800072c:	4641      	mov	r1, r8
 800072e:	0010      	movs	r0, r2
 8000730:	001d      	movs	r5, r3
 8000732:	e7c7      	b.n	80006c4 <__aeabi_dadd+0x204>
 8000734:	2d00      	cmp	r5, #0
 8000736:	d000      	beq.n	800073a <__aeabi_dadd+0x27a>
 8000738:	e0da      	b.n	80008f0 <__aeabi_dadd+0x430>
 800073a:	000c      	movs	r4, r1
 800073c:	4304      	orrs	r4, r0
 800073e:	d0f3      	beq.n	8000728 <__aeabi_dadd+0x268>
 8000740:	1c5c      	adds	r4, r3, #1
 8000742:	d100      	bne.n	8000746 <__aeabi_dadd+0x286>
 8000744:	e19f      	b.n	8000a86 <__aeabi_dadd+0x5c6>
 8000746:	4c5d      	ldr	r4, [pc, #372]	; (80008bc <__aeabi_dadd+0x3fc>)
 8000748:	42a6      	cmp	r6, r4
 800074a:	d100      	bne.n	800074e <__aeabi_dadd+0x28e>
 800074c:	e12f      	b.n	80009ae <__aeabi_dadd+0x4ee>
 800074e:	43db      	mvns	r3, r3
 8000750:	2b38      	cmp	r3, #56	; 0x38
 8000752:	dd00      	ble.n	8000756 <__aeabi_dadd+0x296>
 8000754:	e166      	b.n	8000a24 <__aeabi_dadd+0x564>
 8000756:	2b1f      	cmp	r3, #31
 8000758:	dd00      	ble.n	800075c <__aeabi_dadd+0x29c>
 800075a:	e183      	b.n	8000a64 <__aeabi_dadd+0x5a4>
 800075c:	2420      	movs	r4, #32
 800075e:	0005      	movs	r5, r0
 8000760:	1ae4      	subs	r4, r4, r3
 8000762:	000f      	movs	r7, r1
 8000764:	40dd      	lsrs	r5, r3
 8000766:	40d9      	lsrs	r1, r3
 8000768:	40a0      	lsls	r0, r4
 800076a:	4643      	mov	r3, r8
 800076c:	40a7      	lsls	r7, r4
 800076e:	1a5b      	subs	r3, r3, r1
 8000770:	1e44      	subs	r4, r0, #1
 8000772:	41a0      	sbcs	r0, r4
 8000774:	4698      	mov	r8, r3
 8000776:	432f      	orrs	r7, r5
 8000778:	4338      	orrs	r0, r7
 800077a:	1a17      	subs	r7, r2, r0
 800077c:	42ba      	cmp	r2, r7
 800077e:	4192      	sbcs	r2, r2
 8000780:	4643      	mov	r3, r8
 8000782:	4252      	negs	r2, r2
 8000784:	1a99      	subs	r1, r3, r2
 8000786:	4664      	mov	r4, ip
 8000788:	0035      	movs	r5, r6
 800078a:	e6ca      	b.n	8000522 <__aeabi_dadd+0x62>
 800078c:	2207      	movs	r2, #7
 800078e:	403a      	ands	r2, r7
 8000790:	2a00      	cmp	r2, #0
 8000792:	d000      	beq.n	8000796 <__aeabi_dadd+0x2d6>
 8000794:	e6f6      	b.n	8000584 <__aeabi_dadd+0xc4>
 8000796:	074b      	lsls	r3, r1, #29
 8000798:	08ca      	lsrs	r2, r1, #3
 800079a:	4948      	ldr	r1, [pc, #288]	; (80008bc <__aeabi_dadd+0x3fc>)
 800079c:	08ff      	lsrs	r7, r7, #3
 800079e:	433b      	orrs	r3, r7
 80007a0:	428d      	cmp	r5, r1
 80007a2:	d196      	bne.n	80006d2 <__aeabi_dadd+0x212>
 80007a4:	0019      	movs	r1, r3
 80007a6:	4311      	orrs	r1, r2
 80007a8:	d100      	bne.n	80007ac <__aeabi_dadd+0x2ec>
 80007aa:	e19e      	b.n	8000aea <__aeabi_dadd+0x62a>
 80007ac:	2180      	movs	r1, #128	; 0x80
 80007ae:	0309      	lsls	r1, r1, #12
 80007b0:	430a      	orrs	r2, r1
 80007b2:	0312      	lsls	r2, r2, #12
 80007b4:	0b12      	lsrs	r2, r2, #12
 80007b6:	4d41      	ldr	r5, [pc, #260]	; (80008bc <__aeabi_dadd+0x3fc>)
 80007b8:	e78f      	b.n	80006da <__aeabi_dadd+0x21a>
 80007ba:	0015      	movs	r5, r2
 80007bc:	2200      	movs	r2, #0
 80007be:	2300      	movs	r3, #0
 80007c0:	e78b      	b.n	80006da <__aeabi_dadd+0x21a>
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d000      	beq.n	80007c8 <__aeabi_dadd+0x308>
 80007c6:	e0c7      	b.n	8000958 <__aeabi_dadd+0x498>
 80007c8:	1c6b      	adds	r3, r5, #1
 80007ca:	055f      	lsls	r7, r3, #21
 80007cc:	0d7f      	lsrs	r7, r7, #21
 80007ce:	2f01      	cmp	r7, #1
 80007d0:	dc00      	bgt.n	80007d4 <__aeabi_dadd+0x314>
 80007d2:	e0f1      	b.n	80009b8 <__aeabi_dadd+0x4f8>
 80007d4:	4d39      	ldr	r5, [pc, #228]	; (80008bc <__aeabi_dadd+0x3fc>)
 80007d6:	42ab      	cmp	r3, r5
 80007d8:	d100      	bne.n	80007dc <__aeabi_dadd+0x31c>
 80007da:	e0b9      	b.n	8000950 <__aeabi_dadd+0x490>
 80007dc:	1885      	adds	r5, r0, r2
 80007de:	000a      	movs	r2, r1
 80007e0:	4285      	cmp	r5, r0
 80007e2:	4189      	sbcs	r1, r1
 80007e4:	4442      	add	r2, r8
 80007e6:	4249      	negs	r1, r1
 80007e8:	1851      	adds	r1, r2, r1
 80007ea:	2207      	movs	r2, #7
 80007ec:	07cf      	lsls	r7, r1, #31
 80007ee:	086d      	lsrs	r5, r5, #1
 80007f0:	432f      	orrs	r7, r5
 80007f2:	0849      	lsrs	r1, r1, #1
 80007f4:	403a      	ands	r2, r7
 80007f6:	001d      	movs	r5, r3
 80007f8:	e6c2      	b.n	8000580 <__aeabi_dadd+0xc0>
 80007fa:	2207      	movs	r2, #7
 80007fc:	4930      	ldr	r1, [pc, #192]	; (80008c0 <__aeabi_dadd+0x400>)
 80007fe:	1aed      	subs	r5, r5, r3
 8000800:	4031      	ands	r1, r6
 8000802:	403a      	ands	r2, r7
 8000804:	e6bc      	b.n	8000580 <__aeabi_dadd+0xc0>
 8000806:	003e      	movs	r6, r7
 8000808:	3828      	subs	r0, #40	; 0x28
 800080a:	4086      	lsls	r6, r0
 800080c:	2700      	movs	r7, #0
 800080e:	e69f      	b.n	8000550 <__aeabi_dadd+0x90>
 8000810:	0038      	movs	r0, r7
 8000812:	f001 f8f5 	bl	8001a00 <__clzsi2>
 8000816:	3020      	adds	r0, #32
 8000818:	e68e      	b.n	8000538 <__aeabi_dadd+0x78>
 800081a:	4643      	mov	r3, r8
 800081c:	4313      	orrs	r3, r2
 800081e:	001f      	movs	r7, r3
 8000820:	1e7a      	subs	r2, r7, #1
 8000822:	4197      	sbcs	r7, r2
 8000824:	1bc7      	subs	r7, r0, r7
 8000826:	42b8      	cmp	r0, r7
 8000828:	4180      	sbcs	r0, r0
 800082a:	4240      	negs	r0, r0
 800082c:	1a09      	subs	r1, r1, r0
 800082e:	e678      	b.n	8000522 <__aeabi_dadd+0x62>
 8000830:	000e      	movs	r6, r1
 8000832:	003b      	movs	r3, r7
 8000834:	4306      	orrs	r6, r0
 8000836:	4313      	orrs	r3, r2
 8000838:	2d00      	cmp	r5, #0
 800083a:	d161      	bne.n	8000900 <__aeabi_dadd+0x440>
 800083c:	2e00      	cmp	r6, #0
 800083e:	d000      	beq.n	8000842 <__aeabi_dadd+0x382>
 8000840:	e0f4      	b.n	8000a2c <__aeabi_dadd+0x56c>
 8000842:	2b00      	cmp	r3, #0
 8000844:	d100      	bne.n	8000848 <__aeabi_dadd+0x388>
 8000846:	e11b      	b.n	8000a80 <__aeabi_dadd+0x5c0>
 8000848:	4664      	mov	r4, ip
 800084a:	0039      	movs	r1, r7
 800084c:	0010      	movs	r0, r2
 800084e:	e739      	b.n	80006c4 <__aeabi_dadd+0x204>
 8000850:	4f1a      	ldr	r7, [pc, #104]	; (80008bc <__aeabi_dadd+0x3fc>)
 8000852:	42bb      	cmp	r3, r7
 8000854:	d07a      	beq.n	800094c <__aeabi_dadd+0x48c>
 8000856:	0033      	movs	r3, r6
 8000858:	e6ff      	b.n	800065a <__aeabi_dadd+0x19a>
 800085a:	0030      	movs	r0, r6
 800085c:	3d1f      	subs	r5, #31
 800085e:	40e8      	lsrs	r0, r5
 8000860:	2b20      	cmp	r3, #32
 8000862:	d003      	beq.n	800086c <__aeabi_dadd+0x3ac>
 8000864:	2140      	movs	r1, #64	; 0x40
 8000866:	1acb      	subs	r3, r1, r3
 8000868:	409e      	lsls	r6, r3
 800086a:	4337      	orrs	r7, r6
 800086c:	1e7b      	subs	r3, r7, #1
 800086e:	419f      	sbcs	r7, r3
 8000870:	2207      	movs	r2, #7
 8000872:	4307      	orrs	r7, r0
 8000874:	403a      	ands	r2, r7
 8000876:	2100      	movs	r1, #0
 8000878:	2500      	movs	r5, #0
 800087a:	e789      	b.n	8000790 <__aeabi_dadd+0x2d0>
 800087c:	1a17      	subs	r7, r2, r0
 800087e:	4643      	mov	r3, r8
 8000880:	42ba      	cmp	r2, r7
 8000882:	41b6      	sbcs	r6, r6
 8000884:	1a59      	subs	r1, r3, r1
 8000886:	4276      	negs	r6, r6
 8000888:	1b8e      	subs	r6, r1, r6
 800088a:	4664      	mov	r4, ip
 800088c:	e64e      	b.n	800052c <__aeabi_dadd+0x6c>
 800088e:	2b1f      	cmp	r3, #31
 8000890:	dd00      	ble.n	8000894 <__aeabi_dadd+0x3d4>
 8000892:	e0ad      	b.n	80009f0 <__aeabi_dadd+0x530>
 8000894:	2620      	movs	r6, #32
 8000896:	4647      	mov	r7, r8
 8000898:	1af6      	subs	r6, r6, r3
 800089a:	40b7      	lsls	r7, r6
 800089c:	46b9      	mov	r9, r7
 800089e:	0017      	movs	r7, r2
 80008a0:	46b2      	mov	sl, r6
 80008a2:	40df      	lsrs	r7, r3
 80008a4:	464e      	mov	r6, r9
 80008a6:	433e      	orrs	r6, r7
 80008a8:	0037      	movs	r7, r6
 80008aa:	4656      	mov	r6, sl
 80008ac:	40b2      	lsls	r2, r6
 80008ae:	1e56      	subs	r6, r2, #1
 80008b0:	41b2      	sbcs	r2, r6
 80008b2:	4317      	orrs	r7, r2
 80008b4:	4642      	mov	r2, r8
 80008b6:	40da      	lsrs	r2, r3
 80008b8:	1889      	adds	r1, r1, r2
 80008ba:	e6ae      	b.n	800061a <__aeabi_dadd+0x15a>
 80008bc:	000007ff 	.word	0x000007ff
 80008c0:	ff7fffff 	.word	0xff7fffff
 80008c4:	800fffff 	.word	0x800fffff
 80008c8:	2620      	movs	r6, #32
 80008ca:	4647      	mov	r7, r8
 80008cc:	1af6      	subs	r6, r6, r3
 80008ce:	40b7      	lsls	r7, r6
 80008d0:	46b9      	mov	r9, r7
 80008d2:	0017      	movs	r7, r2
 80008d4:	46b2      	mov	sl, r6
 80008d6:	40df      	lsrs	r7, r3
 80008d8:	464e      	mov	r6, r9
 80008da:	433e      	orrs	r6, r7
 80008dc:	0037      	movs	r7, r6
 80008de:	4656      	mov	r6, sl
 80008e0:	40b2      	lsls	r2, r6
 80008e2:	1e56      	subs	r6, r2, #1
 80008e4:	41b2      	sbcs	r2, r6
 80008e6:	4317      	orrs	r7, r2
 80008e8:	4642      	mov	r2, r8
 80008ea:	40da      	lsrs	r2, r3
 80008ec:	1a89      	subs	r1, r1, r2
 80008ee:	e799      	b.n	8000824 <__aeabi_dadd+0x364>
 80008f0:	4c7f      	ldr	r4, [pc, #508]	; (8000af0 <__aeabi_dadd+0x630>)
 80008f2:	42a6      	cmp	r6, r4
 80008f4:	d05b      	beq.n	80009ae <__aeabi_dadd+0x4ee>
 80008f6:	2480      	movs	r4, #128	; 0x80
 80008f8:	0424      	lsls	r4, r4, #16
 80008fa:	425b      	negs	r3, r3
 80008fc:	4321      	orrs	r1, r4
 80008fe:	e727      	b.n	8000750 <__aeabi_dadd+0x290>
 8000900:	2e00      	cmp	r6, #0
 8000902:	d10c      	bne.n	800091e <__aeabi_dadd+0x45e>
 8000904:	2b00      	cmp	r3, #0
 8000906:	d100      	bne.n	800090a <__aeabi_dadd+0x44a>
 8000908:	e0cb      	b.n	8000aa2 <__aeabi_dadd+0x5e2>
 800090a:	4664      	mov	r4, ip
 800090c:	0039      	movs	r1, r7
 800090e:	0010      	movs	r0, r2
 8000910:	4d77      	ldr	r5, [pc, #476]	; (8000af0 <__aeabi_dadd+0x630>)
 8000912:	e6d7      	b.n	80006c4 <__aeabi_dadd+0x204>
 8000914:	4f76      	ldr	r7, [pc, #472]	; (8000af0 <__aeabi_dadd+0x630>)
 8000916:	42bb      	cmp	r3, r7
 8000918:	d018      	beq.n	800094c <__aeabi_dadd+0x48c>
 800091a:	0033      	movs	r3, r6
 800091c:	e675      	b.n	800060a <__aeabi_dadd+0x14a>
 800091e:	2b00      	cmp	r3, #0
 8000920:	d014      	beq.n	800094c <__aeabi_dadd+0x48c>
 8000922:	074b      	lsls	r3, r1, #29
 8000924:	08c0      	lsrs	r0, r0, #3
 8000926:	4318      	orrs	r0, r3
 8000928:	2380      	movs	r3, #128	; 0x80
 800092a:	08c9      	lsrs	r1, r1, #3
 800092c:	031b      	lsls	r3, r3, #12
 800092e:	4219      	tst	r1, r3
 8000930:	d007      	beq.n	8000942 <__aeabi_dadd+0x482>
 8000932:	08fc      	lsrs	r4, r7, #3
 8000934:	421c      	tst	r4, r3
 8000936:	d104      	bne.n	8000942 <__aeabi_dadd+0x482>
 8000938:	0779      	lsls	r1, r7, #29
 800093a:	08d0      	lsrs	r0, r2, #3
 800093c:	4308      	orrs	r0, r1
 800093e:	46e1      	mov	r9, ip
 8000940:	0021      	movs	r1, r4
 8000942:	464c      	mov	r4, r9
 8000944:	0f42      	lsrs	r2, r0, #29
 8000946:	00c9      	lsls	r1, r1, #3
 8000948:	4311      	orrs	r1, r2
 800094a:	00c0      	lsls	r0, r0, #3
 800094c:	4d68      	ldr	r5, [pc, #416]	; (8000af0 <__aeabi_dadd+0x630>)
 800094e:	e6b9      	b.n	80006c4 <__aeabi_dadd+0x204>
 8000950:	001d      	movs	r5, r3
 8000952:	2200      	movs	r2, #0
 8000954:	2300      	movs	r3, #0
 8000956:	e6c0      	b.n	80006da <__aeabi_dadd+0x21a>
 8000958:	2d00      	cmp	r5, #0
 800095a:	d15b      	bne.n	8000a14 <__aeabi_dadd+0x554>
 800095c:	000d      	movs	r5, r1
 800095e:	4305      	orrs	r5, r0
 8000960:	d100      	bne.n	8000964 <__aeabi_dadd+0x4a4>
 8000962:	e6e2      	b.n	800072a <__aeabi_dadd+0x26a>
 8000964:	1c5d      	adds	r5, r3, #1
 8000966:	d100      	bne.n	800096a <__aeabi_dadd+0x4aa>
 8000968:	e0b0      	b.n	8000acc <__aeabi_dadd+0x60c>
 800096a:	4d61      	ldr	r5, [pc, #388]	; (8000af0 <__aeabi_dadd+0x630>)
 800096c:	42ae      	cmp	r6, r5
 800096e:	d01f      	beq.n	80009b0 <__aeabi_dadd+0x4f0>
 8000970:	43db      	mvns	r3, r3
 8000972:	2b38      	cmp	r3, #56	; 0x38
 8000974:	dc71      	bgt.n	8000a5a <__aeabi_dadd+0x59a>
 8000976:	2b1f      	cmp	r3, #31
 8000978:	dd00      	ble.n	800097c <__aeabi_dadd+0x4bc>
 800097a:	e096      	b.n	8000aaa <__aeabi_dadd+0x5ea>
 800097c:	2520      	movs	r5, #32
 800097e:	000f      	movs	r7, r1
 8000980:	1aed      	subs	r5, r5, r3
 8000982:	40af      	lsls	r7, r5
 8000984:	46b9      	mov	r9, r7
 8000986:	0007      	movs	r7, r0
 8000988:	46aa      	mov	sl, r5
 800098a:	40df      	lsrs	r7, r3
 800098c:	464d      	mov	r5, r9
 800098e:	433d      	orrs	r5, r7
 8000990:	002f      	movs	r7, r5
 8000992:	4655      	mov	r5, sl
 8000994:	40a8      	lsls	r0, r5
 8000996:	40d9      	lsrs	r1, r3
 8000998:	1e45      	subs	r5, r0, #1
 800099a:	41a8      	sbcs	r0, r5
 800099c:	4488      	add	r8, r1
 800099e:	4307      	orrs	r7, r0
 80009a0:	18bf      	adds	r7, r7, r2
 80009a2:	4297      	cmp	r7, r2
 80009a4:	4192      	sbcs	r2, r2
 80009a6:	4251      	negs	r1, r2
 80009a8:	4441      	add	r1, r8
 80009aa:	0035      	movs	r5, r6
 80009ac:	e63a      	b.n	8000624 <__aeabi_dadd+0x164>
 80009ae:	4664      	mov	r4, ip
 80009b0:	0035      	movs	r5, r6
 80009b2:	4641      	mov	r1, r8
 80009b4:	0010      	movs	r0, r2
 80009b6:	e685      	b.n	80006c4 <__aeabi_dadd+0x204>
 80009b8:	000b      	movs	r3, r1
 80009ba:	4303      	orrs	r3, r0
 80009bc:	2d00      	cmp	r5, #0
 80009be:	d000      	beq.n	80009c2 <__aeabi_dadd+0x502>
 80009c0:	e663      	b.n	800068a <__aeabi_dadd+0x1ca>
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d0f5      	beq.n	80009b2 <__aeabi_dadd+0x4f2>
 80009c6:	4643      	mov	r3, r8
 80009c8:	4313      	orrs	r3, r2
 80009ca:	d100      	bne.n	80009ce <__aeabi_dadd+0x50e>
 80009cc:	e67a      	b.n	80006c4 <__aeabi_dadd+0x204>
 80009ce:	1887      	adds	r7, r0, r2
 80009d0:	4287      	cmp	r7, r0
 80009d2:	4180      	sbcs	r0, r0
 80009d4:	2207      	movs	r2, #7
 80009d6:	4441      	add	r1, r8
 80009d8:	4240      	negs	r0, r0
 80009da:	1809      	adds	r1, r1, r0
 80009dc:	403a      	ands	r2, r7
 80009de:	020b      	lsls	r3, r1, #8
 80009e0:	d400      	bmi.n	80009e4 <__aeabi_dadd+0x524>
 80009e2:	e6d5      	b.n	8000790 <__aeabi_dadd+0x2d0>
 80009e4:	4b43      	ldr	r3, [pc, #268]	; (8000af4 <__aeabi_dadd+0x634>)
 80009e6:	3501      	adds	r5, #1
 80009e8:	4019      	ands	r1, r3
 80009ea:	e5c9      	b.n	8000580 <__aeabi_dadd+0xc0>
 80009ec:	0038      	movs	r0, r7
 80009ee:	e669      	b.n	80006c4 <__aeabi_dadd+0x204>
 80009f0:	001e      	movs	r6, r3
 80009f2:	4647      	mov	r7, r8
 80009f4:	3e20      	subs	r6, #32
 80009f6:	40f7      	lsrs	r7, r6
 80009f8:	46bc      	mov	ip, r7
 80009fa:	2b20      	cmp	r3, #32
 80009fc:	d004      	beq.n	8000a08 <__aeabi_dadd+0x548>
 80009fe:	2640      	movs	r6, #64	; 0x40
 8000a00:	1af3      	subs	r3, r6, r3
 8000a02:	4646      	mov	r6, r8
 8000a04:	409e      	lsls	r6, r3
 8000a06:	4332      	orrs	r2, r6
 8000a08:	0017      	movs	r7, r2
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	1e7a      	subs	r2, r7, #1
 8000a0e:	4197      	sbcs	r7, r2
 8000a10:	431f      	orrs	r7, r3
 8000a12:	e602      	b.n	800061a <__aeabi_dadd+0x15a>
 8000a14:	4d36      	ldr	r5, [pc, #216]	; (8000af0 <__aeabi_dadd+0x630>)
 8000a16:	42ae      	cmp	r6, r5
 8000a18:	d0ca      	beq.n	80009b0 <__aeabi_dadd+0x4f0>
 8000a1a:	2580      	movs	r5, #128	; 0x80
 8000a1c:	042d      	lsls	r5, r5, #16
 8000a1e:	425b      	negs	r3, r3
 8000a20:	4329      	orrs	r1, r5
 8000a22:	e7a6      	b.n	8000972 <__aeabi_dadd+0x4b2>
 8000a24:	4308      	orrs	r0, r1
 8000a26:	1e41      	subs	r1, r0, #1
 8000a28:	4188      	sbcs	r0, r1
 8000a2a:	e6a6      	b.n	800077a <__aeabi_dadd+0x2ba>
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d100      	bne.n	8000a32 <__aeabi_dadd+0x572>
 8000a30:	e648      	b.n	80006c4 <__aeabi_dadd+0x204>
 8000a32:	1a87      	subs	r7, r0, r2
 8000a34:	4643      	mov	r3, r8
 8000a36:	42b8      	cmp	r0, r7
 8000a38:	41b6      	sbcs	r6, r6
 8000a3a:	1acb      	subs	r3, r1, r3
 8000a3c:	4276      	negs	r6, r6
 8000a3e:	1b9e      	subs	r6, r3, r6
 8000a40:	0233      	lsls	r3, r6, #8
 8000a42:	d54b      	bpl.n	8000adc <__aeabi_dadd+0x61c>
 8000a44:	1a17      	subs	r7, r2, r0
 8000a46:	4643      	mov	r3, r8
 8000a48:	42ba      	cmp	r2, r7
 8000a4a:	4192      	sbcs	r2, r2
 8000a4c:	1a59      	subs	r1, r3, r1
 8000a4e:	4252      	negs	r2, r2
 8000a50:	1a89      	subs	r1, r1, r2
 8000a52:	2207      	movs	r2, #7
 8000a54:	4664      	mov	r4, ip
 8000a56:	403a      	ands	r2, r7
 8000a58:	e592      	b.n	8000580 <__aeabi_dadd+0xc0>
 8000a5a:	4301      	orrs	r1, r0
 8000a5c:	000f      	movs	r7, r1
 8000a5e:	1e79      	subs	r1, r7, #1
 8000a60:	418f      	sbcs	r7, r1
 8000a62:	e79d      	b.n	80009a0 <__aeabi_dadd+0x4e0>
 8000a64:	001c      	movs	r4, r3
 8000a66:	000f      	movs	r7, r1
 8000a68:	3c20      	subs	r4, #32
 8000a6a:	40e7      	lsrs	r7, r4
 8000a6c:	2b20      	cmp	r3, #32
 8000a6e:	d003      	beq.n	8000a78 <__aeabi_dadd+0x5b8>
 8000a70:	2440      	movs	r4, #64	; 0x40
 8000a72:	1ae3      	subs	r3, r4, r3
 8000a74:	4099      	lsls	r1, r3
 8000a76:	4308      	orrs	r0, r1
 8000a78:	1e41      	subs	r1, r0, #1
 8000a7a:	4188      	sbcs	r0, r1
 8000a7c:	4338      	orrs	r0, r7
 8000a7e:	e67c      	b.n	800077a <__aeabi_dadd+0x2ba>
 8000a80:	2200      	movs	r2, #0
 8000a82:	2400      	movs	r4, #0
 8000a84:	e625      	b.n	80006d2 <__aeabi_dadd+0x212>
 8000a86:	1a17      	subs	r7, r2, r0
 8000a88:	4643      	mov	r3, r8
 8000a8a:	42ba      	cmp	r2, r7
 8000a8c:	4192      	sbcs	r2, r2
 8000a8e:	1a59      	subs	r1, r3, r1
 8000a90:	4252      	negs	r2, r2
 8000a92:	1a89      	subs	r1, r1, r2
 8000a94:	4664      	mov	r4, ip
 8000a96:	0035      	movs	r5, r6
 8000a98:	e543      	b.n	8000522 <__aeabi_dadd+0x62>
 8000a9a:	4641      	mov	r1, r8
 8000a9c:	0010      	movs	r0, r2
 8000a9e:	4d14      	ldr	r5, [pc, #80]	; (8000af0 <__aeabi_dadd+0x630>)
 8000aa0:	e610      	b.n	80006c4 <__aeabi_dadd+0x204>
 8000aa2:	2280      	movs	r2, #128	; 0x80
 8000aa4:	2400      	movs	r4, #0
 8000aa6:	0312      	lsls	r2, r2, #12
 8000aa8:	e680      	b.n	80007ac <__aeabi_dadd+0x2ec>
 8000aaa:	001d      	movs	r5, r3
 8000aac:	000f      	movs	r7, r1
 8000aae:	3d20      	subs	r5, #32
 8000ab0:	40ef      	lsrs	r7, r5
 8000ab2:	46bc      	mov	ip, r7
 8000ab4:	2b20      	cmp	r3, #32
 8000ab6:	d003      	beq.n	8000ac0 <__aeabi_dadd+0x600>
 8000ab8:	2540      	movs	r5, #64	; 0x40
 8000aba:	1aeb      	subs	r3, r5, r3
 8000abc:	4099      	lsls	r1, r3
 8000abe:	4308      	orrs	r0, r1
 8000ac0:	0007      	movs	r7, r0
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	1e78      	subs	r0, r7, #1
 8000ac6:	4187      	sbcs	r7, r0
 8000ac8:	431f      	orrs	r7, r3
 8000aca:	e769      	b.n	80009a0 <__aeabi_dadd+0x4e0>
 8000acc:	1887      	adds	r7, r0, r2
 8000ace:	4297      	cmp	r7, r2
 8000ad0:	419b      	sbcs	r3, r3
 8000ad2:	4441      	add	r1, r8
 8000ad4:	425b      	negs	r3, r3
 8000ad6:	18c9      	adds	r1, r1, r3
 8000ad8:	0035      	movs	r5, r6
 8000ada:	e5a3      	b.n	8000624 <__aeabi_dadd+0x164>
 8000adc:	003b      	movs	r3, r7
 8000ade:	4333      	orrs	r3, r6
 8000ae0:	d0ce      	beq.n	8000a80 <__aeabi_dadd+0x5c0>
 8000ae2:	2207      	movs	r2, #7
 8000ae4:	0031      	movs	r1, r6
 8000ae6:	403a      	ands	r2, r7
 8000ae8:	e652      	b.n	8000790 <__aeabi_dadd+0x2d0>
 8000aea:	2300      	movs	r3, #0
 8000aec:	001a      	movs	r2, r3
 8000aee:	e5f4      	b.n	80006da <__aeabi_dadd+0x21a>
 8000af0:	000007ff 	.word	0x000007ff
 8000af4:	ff7fffff 	.word	0xff7fffff

08000af8 <__eqdf2>:
 8000af8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000afa:	464f      	mov	r7, r9
 8000afc:	4646      	mov	r6, r8
 8000afe:	46d6      	mov	lr, sl
 8000b00:	4684      	mov	ip, r0
 8000b02:	b5c0      	push	{r6, r7, lr}
 8000b04:	4680      	mov	r8, r0
 8000b06:	4e19      	ldr	r6, [pc, #100]	; (8000b6c <__eqdf2+0x74>)
 8000b08:	0318      	lsls	r0, r3, #12
 8000b0a:	030f      	lsls	r7, r1, #12
 8000b0c:	004d      	lsls	r5, r1, #1
 8000b0e:	0b00      	lsrs	r0, r0, #12
 8000b10:	005c      	lsls	r4, r3, #1
 8000b12:	4682      	mov	sl, r0
 8000b14:	0b3f      	lsrs	r7, r7, #12
 8000b16:	0d6d      	lsrs	r5, r5, #21
 8000b18:	0fc9      	lsrs	r1, r1, #31
 8000b1a:	4691      	mov	r9, r2
 8000b1c:	0d64      	lsrs	r4, r4, #21
 8000b1e:	0fdb      	lsrs	r3, r3, #31
 8000b20:	2001      	movs	r0, #1
 8000b22:	42b5      	cmp	r5, r6
 8000b24:	d00a      	beq.n	8000b3c <__eqdf2+0x44>
 8000b26:	42b4      	cmp	r4, r6
 8000b28:	d003      	beq.n	8000b32 <__eqdf2+0x3a>
 8000b2a:	42a5      	cmp	r5, r4
 8000b2c:	d101      	bne.n	8000b32 <__eqdf2+0x3a>
 8000b2e:	4557      	cmp	r7, sl
 8000b30:	d00c      	beq.n	8000b4c <__eqdf2+0x54>
 8000b32:	bc1c      	pop	{r2, r3, r4}
 8000b34:	4690      	mov	r8, r2
 8000b36:	4699      	mov	r9, r3
 8000b38:	46a2      	mov	sl, r4
 8000b3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b3c:	4666      	mov	r6, ip
 8000b3e:	433e      	orrs	r6, r7
 8000b40:	d1f7      	bne.n	8000b32 <__eqdf2+0x3a>
 8000b42:	42ac      	cmp	r4, r5
 8000b44:	d1f5      	bne.n	8000b32 <__eqdf2+0x3a>
 8000b46:	4654      	mov	r4, sl
 8000b48:	4314      	orrs	r4, r2
 8000b4a:	d1f2      	bne.n	8000b32 <__eqdf2+0x3a>
 8000b4c:	2001      	movs	r0, #1
 8000b4e:	45c8      	cmp	r8, r9
 8000b50:	d1ef      	bne.n	8000b32 <__eqdf2+0x3a>
 8000b52:	4299      	cmp	r1, r3
 8000b54:	d007      	beq.n	8000b66 <__eqdf2+0x6e>
 8000b56:	2d00      	cmp	r5, #0
 8000b58:	d1eb      	bne.n	8000b32 <__eqdf2+0x3a>
 8000b5a:	4663      	mov	r3, ip
 8000b5c:	431f      	orrs	r7, r3
 8000b5e:	0038      	movs	r0, r7
 8000b60:	1e47      	subs	r7, r0, #1
 8000b62:	41b8      	sbcs	r0, r7
 8000b64:	e7e5      	b.n	8000b32 <__eqdf2+0x3a>
 8000b66:	2000      	movs	r0, #0
 8000b68:	e7e3      	b.n	8000b32 <__eqdf2+0x3a>
 8000b6a:	46c0      	nop			; (mov r8, r8)
 8000b6c:	000007ff 	.word	0x000007ff

08000b70 <__gedf2>:
 8000b70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b72:	464f      	mov	r7, r9
 8000b74:	4646      	mov	r6, r8
 8000b76:	46d6      	mov	lr, sl
 8000b78:	004d      	lsls	r5, r1, #1
 8000b7a:	b5c0      	push	{r6, r7, lr}
 8000b7c:	030e      	lsls	r6, r1, #12
 8000b7e:	0fc9      	lsrs	r1, r1, #31
 8000b80:	468a      	mov	sl, r1
 8000b82:	492c      	ldr	r1, [pc, #176]	; (8000c34 <__gedf2+0xc4>)
 8000b84:	031f      	lsls	r7, r3, #12
 8000b86:	005c      	lsls	r4, r3, #1
 8000b88:	4680      	mov	r8, r0
 8000b8a:	0b36      	lsrs	r6, r6, #12
 8000b8c:	0d6d      	lsrs	r5, r5, #21
 8000b8e:	4691      	mov	r9, r2
 8000b90:	0b3f      	lsrs	r7, r7, #12
 8000b92:	0d64      	lsrs	r4, r4, #21
 8000b94:	0fdb      	lsrs	r3, r3, #31
 8000b96:	428d      	cmp	r5, r1
 8000b98:	d01e      	beq.n	8000bd8 <__gedf2+0x68>
 8000b9a:	428c      	cmp	r4, r1
 8000b9c:	d016      	beq.n	8000bcc <__gedf2+0x5c>
 8000b9e:	2d00      	cmp	r5, #0
 8000ba0:	d11e      	bne.n	8000be0 <__gedf2+0x70>
 8000ba2:	4330      	orrs	r0, r6
 8000ba4:	4684      	mov	ip, r0
 8000ba6:	2c00      	cmp	r4, #0
 8000ba8:	d101      	bne.n	8000bae <__gedf2+0x3e>
 8000baa:	433a      	orrs	r2, r7
 8000bac:	d023      	beq.n	8000bf6 <__gedf2+0x86>
 8000bae:	4662      	mov	r2, ip
 8000bb0:	2a00      	cmp	r2, #0
 8000bb2:	d01a      	beq.n	8000bea <__gedf2+0x7a>
 8000bb4:	459a      	cmp	sl, r3
 8000bb6:	d029      	beq.n	8000c0c <__gedf2+0x9c>
 8000bb8:	4651      	mov	r1, sl
 8000bba:	2002      	movs	r0, #2
 8000bbc:	3901      	subs	r1, #1
 8000bbe:	4008      	ands	r0, r1
 8000bc0:	3801      	subs	r0, #1
 8000bc2:	bc1c      	pop	{r2, r3, r4}
 8000bc4:	4690      	mov	r8, r2
 8000bc6:	4699      	mov	r9, r3
 8000bc8:	46a2      	mov	sl, r4
 8000bca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bcc:	0039      	movs	r1, r7
 8000bce:	4311      	orrs	r1, r2
 8000bd0:	d0e5      	beq.n	8000b9e <__gedf2+0x2e>
 8000bd2:	2002      	movs	r0, #2
 8000bd4:	4240      	negs	r0, r0
 8000bd6:	e7f4      	b.n	8000bc2 <__gedf2+0x52>
 8000bd8:	4330      	orrs	r0, r6
 8000bda:	d1fa      	bne.n	8000bd2 <__gedf2+0x62>
 8000bdc:	42ac      	cmp	r4, r5
 8000bde:	d00f      	beq.n	8000c00 <__gedf2+0x90>
 8000be0:	2c00      	cmp	r4, #0
 8000be2:	d10f      	bne.n	8000c04 <__gedf2+0x94>
 8000be4:	433a      	orrs	r2, r7
 8000be6:	d0e7      	beq.n	8000bb8 <__gedf2+0x48>
 8000be8:	e00c      	b.n	8000c04 <__gedf2+0x94>
 8000bea:	2201      	movs	r2, #1
 8000bec:	3b01      	subs	r3, #1
 8000bee:	4393      	bics	r3, r2
 8000bf0:	0018      	movs	r0, r3
 8000bf2:	3001      	adds	r0, #1
 8000bf4:	e7e5      	b.n	8000bc2 <__gedf2+0x52>
 8000bf6:	4663      	mov	r3, ip
 8000bf8:	2000      	movs	r0, #0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d0e1      	beq.n	8000bc2 <__gedf2+0x52>
 8000bfe:	e7db      	b.n	8000bb8 <__gedf2+0x48>
 8000c00:	433a      	orrs	r2, r7
 8000c02:	d1e6      	bne.n	8000bd2 <__gedf2+0x62>
 8000c04:	459a      	cmp	sl, r3
 8000c06:	d1d7      	bne.n	8000bb8 <__gedf2+0x48>
 8000c08:	42a5      	cmp	r5, r4
 8000c0a:	dcd5      	bgt.n	8000bb8 <__gedf2+0x48>
 8000c0c:	42a5      	cmp	r5, r4
 8000c0e:	db05      	blt.n	8000c1c <__gedf2+0xac>
 8000c10:	42be      	cmp	r6, r7
 8000c12:	d8d1      	bhi.n	8000bb8 <__gedf2+0x48>
 8000c14:	d008      	beq.n	8000c28 <__gedf2+0xb8>
 8000c16:	2000      	movs	r0, #0
 8000c18:	42be      	cmp	r6, r7
 8000c1a:	d2d2      	bcs.n	8000bc2 <__gedf2+0x52>
 8000c1c:	4650      	mov	r0, sl
 8000c1e:	2301      	movs	r3, #1
 8000c20:	3801      	subs	r0, #1
 8000c22:	4398      	bics	r0, r3
 8000c24:	3001      	adds	r0, #1
 8000c26:	e7cc      	b.n	8000bc2 <__gedf2+0x52>
 8000c28:	45c8      	cmp	r8, r9
 8000c2a:	d8c5      	bhi.n	8000bb8 <__gedf2+0x48>
 8000c2c:	2000      	movs	r0, #0
 8000c2e:	45c8      	cmp	r8, r9
 8000c30:	d3f4      	bcc.n	8000c1c <__gedf2+0xac>
 8000c32:	e7c6      	b.n	8000bc2 <__gedf2+0x52>
 8000c34:	000007ff 	.word	0x000007ff

08000c38 <__ledf2>:
 8000c38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c3a:	464f      	mov	r7, r9
 8000c3c:	4646      	mov	r6, r8
 8000c3e:	46d6      	mov	lr, sl
 8000c40:	004d      	lsls	r5, r1, #1
 8000c42:	b5c0      	push	{r6, r7, lr}
 8000c44:	030e      	lsls	r6, r1, #12
 8000c46:	0fc9      	lsrs	r1, r1, #31
 8000c48:	468a      	mov	sl, r1
 8000c4a:	492e      	ldr	r1, [pc, #184]	; (8000d04 <__ledf2+0xcc>)
 8000c4c:	031f      	lsls	r7, r3, #12
 8000c4e:	005c      	lsls	r4, r3, #1
 8000c50:	4680      	mov	r8, r0
 8000c52:	0b36      	lsrs	r6, r6, #12
 8000c54:	0d6d      	lsrs	r5, r5, #21
 8000c56:	4691      	mov	r9, r2
 8000c58:	0b3f      	lsrs	r7, r7, #12
 8000c5a:	0d64      	lsrs	r4, r4, #21
 8000c5c:	0fdb      	lsrs	r3, r3, #31
 8000c5e:	428d      	cmp	r5, r1
 8000c60:	d018      	beq.n	8000c94 <__ledf2+0x5c>
 8000c62:	428c      	cmp	r4, r1
 8000c64:	d011      	beq.n	8000c8a <__ledf2+0x52>
 8000c66:	2d00      	cmp	r5, #0
 8000c68:	d118      	bne.n	8000c9c <__ledf2+0x64>
 8000c6a:	4330      	orrs	r0, r6
 8000c6c:	4684      	mov	ip, r0
 8000c6e:	2c00      	cmp	r4, #0
 8000c70:	d11e      	bne.n	8000cb0 <__ledf2+0x78>
 8000c72:	433a      	orrs	r2, r7
 8000c74:	d11c      	bne.n	8000cb0 <__ledf2+0x78>
 8000c76:	4663      	mov	r3, ip
 8000c78:	2000      	movs	r0, #0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d030      	beq.n	8000ce0 <__ledf2+0xa8>
 8000c7e:	4651      	mov	r1, sl
 8000c80:	2002      	movs	r0, #2
 8000c82:	3901      	subs	r1, #1
 8000c84:	4008      	ands	r0, r1
 8000c86:	3801      	subs	r0, #1
 8000c88:	e02a      	b.n	8000ce0 <__ledf2+0xa8>
 8000c8a:	0039      	movs	r1, r7
 8000c8c:	4311      	orrs	r1, r2
 8000c8e:	d0ea      	beq.n	8000c66 <__ledf2+0x2e>
 8000c90:	2002      	movs	r0, #2
 8000c92:	e025      	b.n	8000ce0 <__ledf2+0xa8>
 8000c94:	4330      	orrs	r0, r6
 8000c96:	d1fb      	bne.n	8000c90 <__ledf2+0x58>
 8000c98:	42ac      	cmp	r4, r5
 8000c9a:	d026      	beq.n	8000cea <__ledf2+0xb2>
 8000c9c:	2c00      	cmp	r4, #0
 8000c9e:	d126      	bne.n	8000cee <__ledf2+0xb6>
 8000ca0:	433a      	orrs	r2, r7
 8000ca2:	d124      	bne.n	8000cee <__ledf2+0xb6>
 8000ca4:	4651      	mov	r1, sl
 8000ca6:	2002      	movs	r0, #2
 8000ca8:	3901      	subs	r1, #1
 8000caa:	4008      	ands	r0, r1
 8000cac:	3801      	subs	r0, #1
 8000cae:	e017      	b.n	8000ce0 <__ledf2+0xa8>
 8000cb0:	4662      	mov	r2, ip
 8000cb2:	2a00      	cmp	r2, #0
 8000cb4:	d00f      	beq.n	8000cd6 <__ledf2+0x9e>
 8000cb6:	459a      	cmp	sl, r3
 8000cb8:	d1e1      	bne.n	8000c7e <__ledf2+0x46>
 8000cba:	42a5      	cmp	r5, r4
 8000cbc:	db05      	blt.n	8000cca <__ledf2+0x92>
 8000cbe:	42be      	cmp	r6, r7
 8000cc0:	d8dd      	bhi.n	8000c7e <__ledf2+0x46>
 8000cc2:	d019      	beq.n	8000cf8 <__ledf2+0xc0>
 8000cc4:	2000      	movs	r0, #0
 8000cc6:	42be      	cmp	r6, r7
 8000cc8:	d20a      	bcs.n	8000ce0 <__ledf2+0xa8>
 8000cca:	4650      	mov	r0, sl
 8000ccc:	2301      	movs	r3, #1
 8000cce:	3801      	subs	r0, #1
 8000cd0:	4398      	bics	r0, r3
 8000cd2:	3001      	adds	r0, #1
 8000cd4:	e004      	b.n	8000ce0 <__ledf2+0xa8>
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	3b01      	subs	r3, #1
 8000cda:	4393      	bics	r3, r2
 8000cdc:	0018      	movs	r0, r3
 8000cde:	3001      	adds	r0, #1
 8000ce0:	bc1c      	pop	{r2, r3, r4}
 8000ce2:	4690      	mov	r8, r2
 8000ce4:	4699      	mov	r9, r3
 8000ce6:	46a2      	mov	sl, r4
 8000ce8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cea:	433a      	orrs	r2, r7
 8000cec:	d1d0      	bne.n	8000c90 <__ledf2+0x58>
 8000cee:	459a      	cmp	sl, r3
 8000cf0:	d1c5      	bne.n	8000c7e <__ledf2+0x46>
 8000cf2:	42a5      	cmp	r5, r4
 8000cf4:	dcc3      	bgt.n	8000c7e <__ledf2+0x46>
 8000cf6:	e7e0      	b.n	8000cba <__ledf2+0x82>
 8000cf8:	45c8      	cmp	r8, r9
 8000cfa:	d8c0      	bhi.n	8000c7e <__ledf2+0x46>
 8000cfc:	2000      	movs	r0, #0
 8000cfe:	45c8      	cmp	r8, r9
 8000d00:	d3e3      	bcc.n	8000cca <__ledf2+0x92>
 8000d02:	e7ed      	b.n	8000ce0 <__ledf2+0xa8>
 8000d04:	000007ff 	.word	0x000007ff

08000d08 <__aeabi_dmul>:
 8000d08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d0a:	4657      	mov	r7, sl
 8000d0c:	46de      	mov	lr, fp
 8000d0e:	464e      	mov	r6, r9
 8000d10:	4645      	mov	r5, r8
 8000d12:	b5e0      	push	{r5, r6, r7, lr}
 8000d14:	4683      	mov	fp, r0
 8000d16:	0006      	movs	r6, r0
 8000d18:	030f      	lsls	r7, r1, #12
 8000d1a:	0048      	lsls	r0, r1, #1
 8000d1c:	b087      	sub	sp, #28
 8000d1e:	4692      	mov	sl, r2
 8000d20:	001d      	movs	r5, r3
 8000d22:	0b3f      	lsrs	r7, r7, #12
 8000d24:	0d40      	lsrs	r0, r0, #21
 8000d26:	0fcc      	lsrs	r4, r1, #31
 8000d28:	2800      	cmp	r0, #0
 8000d2a:	d100      	bne.n	8000d2e <__aeabi_dmul+0x26>
 8000d2c:	e06f      	b.n	8000e0e <__aeabi_dmul+0x106>
 8000d2e:	4bde      	ldr	r3, [pc, #888]	; (80010a8 <__aeabi_dmul+0x3a0>)
 8000d30:	4298      	cmp	r0, r3
 8000d32:	d038      	beq.n	8000da6 <__aeabi_dmul+0x9e>
 8000d34:	2380      	movs	r3, #128	; 0x80
 8000d36:	00ff      	lsls	r7, r7, #3
 8000d38:	041b      	lsls	r3, r3, #16
 8000d3a:	431f      	orrs	r7, r3
 8000d3c:	0f73      	lsrs	r3, r6, #29
 8000d3e:	433b      	orrs	r3, r7
 8000d40:	9301      	str	r3, [sp, #4]
 8000d42:	4bda      	ldr	r3, [pc, #872]	; (80010ac <__aeabi_dmul+0x3a4>)
 8000d44:	2700      	movs	r7, #0
 8000d46:	4699      	mov	r9, r3
 8000d48:	2300      	movs	r3, #0
 8000d4a:	469b      	mov	fp, r3
 8000d4c:	00f6      	lsls	r6, r6, #3
 8000d4e:	4481      	add	r9, r0
 8000d50:	032b      	lsls	r3, r5, #12
 8000d52:	0069      	lsls	r1, r5, #1
 8000d54:	0b1b      	lsrs	r3, r3, #12
 8000d56:	4652      	mov	r2, sl
 8000d58:	4698      	mov	r8, r3
 8000d5a:	0d49      	lsrs	r1, r1, #21
 8000d5c:	0fed      	lsrs	r5, r5, #31
 8000d5e:	2900      	cmp	r1, #0
 8000d60:	d100      	bne.n	8000d64 <__aeabi_dmul+0x5c>
 8000d62:	e085      	b.n	8000e70 <__aeabi_dmul+0x168>
 8000d64:	4bd0      	ldr	r3, [pc, #832]	; (80010a8 <__aeabi_dmul+0x3a0>)
 8000d66:	4299      	cmp	r1, r3
 8000d68:	d100      	bne.n	8000d6c <__aeabi_dmul+0x64>
 8000d6a:	e073      	b.n	8000e54 <__aeabi_dmul+0x14c>
 8000d6c:	4643      	mov	r3, r8
 8000d6e:	00da      	lsls	r2, r3, #3
 8000d70:	2380      	movs	r3, #128	; 0x80
 8000d72:	041b      	lsls	r3, r3, #16
 8000d74:	4313      	orrs	r3, r2
 8000d76:	4652      	mov	r2, sl
 8000d78:	48cc      	ldr	r0, [pc, #816]	; (80010ac <__aeabi_dmul+0x3a4>)
 8000d7a:	0f52      	lsrs	r2, r2, #29
 8000d7c:	4684      	mov	ip, r0
 8000d7e:	4313      	orrs	r3, r2
 8000d80:	4652      	mov	r2, sl
 8000d82:	2000      	movs	r0, #0
 8000d84:	4461      	add	r1, ip
 8000d86:	00d2      	lsls	r2, r2, #3
 8000d88:	4489      	add	r9, r1
 8000d8a:	0021      	movs	r1, r4
 8000d8c:	4069      	eors	r1, r5
 8000d8e:	9100      	str	r1, [sp, #0]
 8000d90:	468c      	mov	ip, r1
 8000d92:	2101      	movs	r1, #1
 8000d94:	4449      	add	r1, r9
 8000d96:	468a      	mov	sl, r1
 8000d98:	2f0f      	cmp	r7, #15
 8000d9a:	d900      	bls.n	8000d9e <__aeabi_dmul+0x96>
 8000d9c:	e090      	b.n	8000ec0 <__aeabi_dmul+0x1b8>
 8000d9e:	49c4      	ldr	r1, [pc, #784]	; (80010b0 <__aeabi_dmul+0x3a8>)
 8000da0:	00bf      	lsls	r7, r7, #2
 8000da2:	59cf      	ldr	r7, [r1, r7]
 8000da4:	46bf      	mov	pc, r7
 8000da6:	465b      	mov	r3, fp
 8000da8:	433b      	orrs	r3, r7
 8000daa:	9301      	str	r3, [sp, #4]
 8000dac:	d000      	beq.n	8000db0 <__aeabi_dmul+0xa8>
 8000dae:	e16a      	b.n	8001086 <__aeabi_dmul+0x37e>
 8000db0:	2302      	movs	r3, #2
 8000db2:	2708      	movs	r7, #8
 8000db4:	2600      	movs	r6, #0
 8000db6:	4681      	mov	r9, r0
 8000db8:	469b      	mov	fp, r3
 8000dba:	e7c9      	b.n	8000d50 <__aeabi_dmul+0x48>
 8000dbc:	0032      	movs	r2, r6
 8000dbe:	4658      	mov	r0, fp
 8000dc0:	9b01      	ldr	r3, [sp, #4]
 8000dc2:	4661      	mov	r1, ip
 8000dc4:	9100      	str	r1, [sp, #0]
 8000dc6:	2802      	cmp	r0, #2
 8000dc8:	d100      	bne.n	8000dcc <__aeabi_dmul+0xc4>
 8000dca:	e075      	b.n	8000eb8 <__aeabi_dmul+0x1b0>
 8000dcc:	2803      	cmp	r0, #3
 8000dce:	d100      	bne.n	8000dd2 <__aeabi_dmul+0xca>
 8000dd0:	e1fe      	b.n	80011d0 <__aeabi_dmul+0x4c8>
 8000dd2:	2801      	cmp	r0, #1
 8000dd4:	d000      	beq.n	8000dd8 <__aeabi_dmul+0xd0>
 8000dd6:	e12c      	b.n	8001032 <__aeabi_dmul+0x32a>
 8000dd8:	2300      	movs	r3, #0
 8000dda:	2700      	movs	r7, #0
 8000ddc:	2600      	movs	r6, #0
 8000dde:	2500      	movs	r5, #0
 8000de0:	033f      	lsls	r7, r7, #12
 8000de2:	0d2a      	lsrs	r2, r5, #20
 8000de4:	0b3f      	lsrs	r7, r7, #12
 8000de6:	48b3      	ldr	r0, [pc, #716]	; (80010b4 <__aeabi_dmul+0x3ac>)
 8000de8:	0512      	lsls	r2, r2, #20
 8000dea:	433a      	orrs	r2, r7
 8000dec:	4002      	ands	r2, r0
 8000dee:	051b      	lsls	r3, r3, #20
 8000df0:	4313      	orrs	r3, r2
 8000df2:	9a00      	ldr	r2, [sp, #0]
 8000df4:	005b      	lsls	r3, r3, #1
 8000df6:	07d1      	lsls	r1, r2, #31
 8000df8:	085b      	lsrs	r3, r3, #1
 8000dfa:	430b      	orrs	r3, r1
 8000dfc:	0030      	movs	r0, r6
 8000dfe:	0019      	movs	r1, r3
 8000e00:	b007      	add	sp, #28
 8000e02:	bc3c      	pop	{r2, r3, r4, r5}
 8000e04:	4690      	mov	r8, r2
 8000e06:	4699      	mov	r9, r3
 8000e08:	46a2      	mov	sl, r4
 8000e0a:	46ab      	mov	fp, r5
 8000e0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e0e:	465b      	mov	r3, fp
 8000e10:	433b      	orrs	r3, r7
 8000e12:	9301      	str	r3, [sp, #4]
 8000e14:	d100      	bne.n	8000e18 <__aeabi_dmul+0x110>
 8000e16:	e12f      	b.n	8001078 <__aeabi_dmul+0x370>
 8000e18:	2f00      	cmp	r7, #0
 8000e1a:	d100      	bne.n	8000e1e <__aeabi_dmul+0x116>
 8000e1c:	e1a5      	b.n	800116a <__aeabi_dmul+0x462>
 8000e1e:	0038      	movs	r0, r7
 8000e20:	f000 fdee 	bl	8001a00 <__clzsi2>
 8000e24:	0003      	movs	r3, r0
 8000e26:	3b0b      	subs	r3, #11
 8000e28:	2b1c      	cmp	r3, #28
 8000e2a:	dd00      	ble.n	8000e2e <__aeabi_dmul+0x126>
 8000e2c:	e196      	b.n	800115c <__aeabi_dmul+0x454>
 8000e2e:	221d      	movs	r2, #29
 8000e30:	1ad3      	subs	r3, r2, r3
 8000e32:	465a      	mov	r2, fp
 8000e34:	0001      	movs	r1, r0
 8000e36:	40da      	lsrs	r2, r3
 8000e38:	465e      	mov	r6, fp
 8000e3a:	3908      	subs	r1, #8
 8000e3c:	408f      	lsls	r7, r1
 8000e3e:	0013      	movs	r3, r2
 8000e40:	408e      	lsls	r6, r1
 8000e42:	433b      	orrs	r3, r7
 8000e44:	9301      	str	r3, [sp, #4]
 8000e46:	4b9c      	ldr	r3, [pc, #624]	; (80010b8 <__aeabi_dmul+0x3b0>)
 8000e48:	2700      	movs	r7, #0
 8000e4a:	1a1b      	subs	r3, r3, r0
 8000e4c:	4699      	mov	r9, r3
 8000e4e:	2300      	movs	r3, #0
 8000e50:	469b      	mov	fp, r3
 8000e52:	e77d      	b.n	8000d50 <__aeabi_dmul+0x48>
 8000e54:	4641      	mov	r1, r8
 8000e56:	4653      	mov	r3, sl
 8000e58:	430b      	orrs	r3, r1
 8000e5a:	4993      	ldr	r1, [pc, #588]	; (80010a8 <__aeabi_dmul+0x3a0>)
 8000e5c:	468c      	mov	ip, r1
 8000e5e:	44e1      	add	r9, ip
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d000      	beq.n	8000e66 <__aeabi_dmul+0x15e>
 8000e64:	e11a      	b.n	800109c <__aeabi_dmul+0x394>
 8000e66:	2202      	movs	r2, #2
 8000e68:	2002      	movs	r0, #2
 8000e6a:	4317      	orrs	r7, r2
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	e78c      	b.n	8000d8a <__aeabi_dmul+0x82>
 8000e70:	4313      	orrs	r3, r2
 8000e72:	d100      	bne.n	8000e76 <__aeabi_dmul+0x16e>
 8000e74:	e10d      	b.n	8001092 <__aeabi_dmul+0x38a>
 8000e76:	4643      	mov	r3, r8
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d100      	bne.n	8000e7e <__aeabi_dmul+0x176>
 8000e7c:	e181      	b.n	8001182 <__aeabi_dmul+0x47a>
 8000e7e:	4640      	mov	r0, r8
 8000e80:	f000 fdbe 	bl	8001a00 <__clzsi2>
 8000e84:	0002      	movs	r2, r0
 8000e86:	3a0b      	subs	r2, #11
 8000e88:	2a1c      	cmp	r2, #28
 8000e8a:	dd00      	ble.n	8000e8e <__aeabi_dmul+0x186>
 8000e8c:	e172      	b.n	8001174 <__aeabi_dmul+0x46c>
 8000e8e:	0001      	movs	r1, r0
 8000e90:	4643      	mov	r3, r8
 8000e92:	3908      	subs	r1, #8
 8000e94:	408b      	lsls	r3, r1
 8000e96:	4698      	mov	r8, r3
 8000e98:	231d      	movs	r3, #29
 8000e9a:	1a9a      	subs	r2, r3, r2
 8000e9c:	4653      	mov	r3, sl
 8000e9e:	40d3      	lsrs	r3, r2
 8000ea0:	001a      	movs	r2, r3
 8000ea2:	4643      	mov	r3, r8
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	4652      	mov	r2, sl
 8000ea8:	408a      	lsls	r2, r1
 8000eaa:	4649      	mov	r1, r9
 8000eac:	1a08      	subs	r0, r1, r0
 8000eae:	4982      	ldr	r1, [pc, #520]	; (80010b8 <__aeabi_dmul+0x3b0>)
 8000eb0:	4689      	mov	r9, r1
 8000eb2:	4481      	add	r9, r0
 8000eb4:	2000      	movs	r0, #0
 8000eb6:	e768      	b.n	8000d8a <__aeabi_dmul+0x82>
 8000eb8:	4b7b      	ldr	r3, [pc, #492]	; (80010a8 <__aeabi_dmul+0x3a0>)
 8000eba:	2700      	movs	r7, #0
 8000ebc:	2600      	movs	r6, #0
 8000ebe:	e78e      	b.n	8000dde <__aeabi_dmul+0xd6>
 8000ec0:	0c14      	lsrs	r4, r2, #16
 8000ec2:	0412      	lsls	r2, r2, #16
 8000ec4:	0c12      	lsrs	r2, r2, #16
 8000ec6:	0011      	movs	r1, r2
 8000ec8:	0c37      	lsrs	r7, r6, #16
 8000eca:	0436      	lsls	r6, r6, #16
 8000ecc:	0c35      	lsrs	r5, r6, #16
 8000ece:	4379      	muls	r1, r7
 8000ed0:	0028      	movs	r0, r5
 8000ed2:	468c      	mov	ip, r1
 8000ed4:	002e      	movs	r6, r5
 8000ed6:	4360      	muls	r0, r4
 8000ed8:	4460      	add	r0, ip
 8000eda:	4683      	mov	fp, r0
 8000edc:	4356      	muls	r6, r2
 8000ede:	0021      	movs	r1, r4
 8000ee0:	0c30      	lsrs	r0, r6, #16
 8000ee2:	4680      	mov	r8, r0
 8000ee4:	4658      	mov	r0, fp
 8000ee6:	4379      	muls	r1, r7
 8000ee8:	4440      	add	r0, r8
 8000eea:	9102      	str	r1, [sp, #8]
 8000eec:	4584      	cmp	ip, r0
 8000eee:	d906      	bls.n	8000efe <__aeabi_dmul+0x1f6>
 8000ef0:	4688      	mov	r8, r1
 8000ef2:	2180      	movs	r1, #128	; 0x80
 8000ef4:	0249      	lsls	r1, r1, #9
 8000ef6:	468c      	mov	ip, r1
 8000ef8:	44e0      	add	r8, ip
 8000efa:	4641      	mov	r1, r8
 8000efc:	9102      	str	r1, [sp, #8]
 8000efe:	0436      	lsls	r6, r6, #16
 8000f00:	0c01      	lsrs	r1, r0, #16
 8000f02:	0c36      	lsrs	r6, r6, #16
 8000f04:	0400      	lsls	r0, r0, #16
 8000f06:	468b      	mov	fp, r1
 8000f08:	1981      	adds	r1, r0, r6
 8000f0a:	0c1e      	lsrs	r6, r3, #16
 8000f0c:	041b      	lsls	r3, r3, #16
 8000f0e:	0c1b      	lsrs	r3, r3, #16
 8000f10:	9103      	str	r1, [sp, #12]
 8000f12:	0019      	movs	r1, r3
 8000f14:	4379      	muls	r1, r7
 8000f16:	468c      	mov	ip, r1
 8000f18:	0028      	movs	r0, r5
 8000f1a:	4375      	muls	r5, r6
 8000f1c:	4465      	add	r5, ip
 8000f1e:	46a8      	mov	r8, r5
 8000f20:	4358      	muls	r0, r3
 8000f22:	0c05      	lsrs	r5, r0, #16
 8000f24:	4445      	add	r5, r8
 8000f26:	4377      	muls	r7, r6
 8000f28:	42a9      	cmp	r1, r5
 8000f2a:	d903      	bls.n	8000f34 <__aeabi_dmul+0x22c>
 8000f2c:	2180      	movs	r1, #128	; 0x80
 8000f2e:	0249      	lsls	r1, r1, #9
 8000f30:	468c      	mov	ip, r1
 8000f32:	4467      	add	r7, ip
 8000f34:	0c29      	lsrs	r1, r5, #16
 8000f36:	468c      	mov	ip, r1
 8000f38:	0039      	movs	r1, r7
 8000f3a:	0400      	lsls	r0, r0, #16
 8000f3c:	0c00      	lsrs	r0, r0, #16
 8000f3e:	042d      	lsls	r5, r5, #16
 8000f40:	182d      	adds	r5, r5, r0
 8000f42:	4461      	add	r1, ip
 8000f44:	44ab      	add	fp, r5
 8000f46:	9105      	str	r1, [sp, #20]
 8000f48:	4659      	mov	r1, fp
 8000f4a:	9104      	str	r1, [sp, #16]
 8000f4c:	9901      	ldr	r1, [sp, #4]
 8000f4e:	040f      	lsls	r7, r1, #16
 8000f50:	0c3f      	lsrs	r7, r7, #16
 8000f52:	0c08      	lsrs	r0, r1, #16
 8000f54:	0039      	movs	r1, r7
 8000f56:	4351      	muls	r1, r2
 8000f58:	4342      	muls	r2, r0
 8000f5a:	4690      	mov	r8, r2
 8000f5c:	0002      	movs	r2, r0
 8000f5e:	468c      	mov	ip, r1
 8000f60:	0c09      	lsrs	r1, r1, #16
 8000f62:	468b      	mov	fp, r1
 8000f64:	4362      	muls	r2, r4
 8000f66:	437c      	muls	r4, r7
 8000f68:	4444      	add	r4, r8
 8000f6a:	445c      	add	r4, fp
 8000f6c:	45a0      	cmp	r8, r4
 8000f6e:	d903      	bls.n	8000f78 <__aeabi_dmul+0x270>
 8000f70:	2180      	movs	r1, #128	; 0x80
 8000f72:	0249      	lsls	r1, r1, #9
 8000f74:	4688      	mov	r8, r1
 8000f76:	4442      	add	r2, r8
 8000f78:	0c21      	lsrs	r1, r4, #16
 8000f7a:	4688      	mov	r8, r1
 8000f7c:	4661      	mov	r1, ip
 8000f7e:	0409      	lsls	r1, r1, #16
 8000f80:	0c09      	lsrs	r1, r1, #16
 8000f82:	468c      	mov	ip, r1
 8000f84:	0039      	movs	r1, r7
 8000f86:	4359      	muls	r1, r3
 8000f88:	4343      	muls	r3, r0
 8000f8a:	4370      	muls	r0, r6
 8000f8c:	437e      	muls	r6, r7
 8000f8e:	0c0f      	lsrs	r7, r1, #16
 8000f90:	18f6      	adds	r6, r6, r3
 8000f92:	0424      	lsls	r4, r4, #16
 8000f94:	19be      	adds	r6, r7, r6
 8000f96:	4464      	add	r4, ip
 8000f98:	4442      	add	r2, r8
 8000f9a:	468c      	mov	ip, r1
 8000f9c:	42b3      	cmp	r3, r6
 8000f9e:	d903      	bls.n	8000fa8 <__aeabi_dmul+0x2a0>
 8000fa0:	2380      	movs	r3, #128	; 0x80
 8000fa2:	025b      	lsls	r3, r3, #9
 8000fa4:	4698      	mov	r8, r3
 8000fa6:	4440      	add	r0, r8
 8000fa8:	9b02      	ldr	r3, [sp, #8]
 8000faa:	4661      	mov	r1, ip
 8000fac:	4698      	mov	r8, r3
 8000fae:	9b04      	ldr	r3, [sp, #16]
 8000fb0:	0437      	lsls	r7, r6, #16
 8000fb2:	4443      	add	r3, r8
 8000fb4:	469b      	mov	fp, r3
 8000fb6:	45ab      	cmp	fp, r5
 8000fb8:	41ad      	sbcs	r5, r5
 8000fba:	426b      	negs	r3, r5
 8000fbc:	040d      	lsls	r5, r1, #16
 8000fbe:	9905      	ldr	r1, [sp, #20]
 8000fc0:	0c2d      	lsrs	r5, r5, #16
 8000fc2:	468c      	mov	ip, r1
 8000fc4:	197f      	adds	r7, r7, r5
 8000fc6:	4467      	add	r7, ip
 8000fc8:	18fd      	adds	r5, r7, r3
 8000fca:	46a8      	mov	r8, r5
 8000fcc:	465d      	mov	r5, fp
 8000fce:	192d      	adds	r5, r5, r4
 8000fd0:	42a5      	cmp	r5, r4
 8000fd2:	41a4      	sbcs	r4, r4
 8000fd4:	4693      	mov	fp, r2
 8000fd6:	4264      	negs	r4, r4
 8000fd8:	46a4      	mov	ip, r4
 8000fda:	44c3      	add	fp, r8
 8000fdc:	44dc      	add	ip, fp
 8000fde:	428f      	cmp	r7, r1
 8000fe0:	41bf      	sbcs	r7, r7
 8000fe2:	4598      	cmp	r8, r3
 8000fe4:	419b      	sbcs	r3, r3
 8000fe6:	4593      	cmp	fp, r2
 8000fe8:	4192      	sbcs	r2, r2
 8000fea:	45a4      	cmp	ip, r4
 8000fec:	41a4      	sbcs	r4, r4
 8000fee:	425b      	negs	r3, r3
 8000ff0:	427f      	negs	r7, r7
 8000ff2:	431f      	orrs	r7, r3
 8000ff4:	0c36      	lsrs	r6, r6, #16
 8000ff6:	4252      	negs	r2, r2
 8000ff8:	4264      	negs	r4, r4
 8000ffa:	19bf      	adds	r7, r7, r6
 8000ffc:	4322      	orrs	r2, r4
 8000ffe:	18bf      	adds	r7, r7, r2
 8001000:	4662      	mov	r2, ip
 8001002:	1838      	adds	r0, r7, r0
 8001004:	0243      	lsls	r3, r0, #9
 8001006:	0dd2      	lsrs	r2, r2, #23
 8001008:	9903      	ldr	r1, [sp, #12]
 800100a:	4313      	orrs	r3, r2
 800100c:	026a      	lsls	r2, r5, #9
 800100e:	430a      	orrs	r2, r1
 8001010:	1e50      	subs	r0, r2, #1
 8001012:	4182      	sbcs	r2, r0
 8001014:	4661      	mov	r1, ip
 8001016:	0ded      	lsrs	r5, r5, #23
 8001018:	432a      	orrs	r2, r5
 800101a:	024e      	lsls	r6, r1, #9
 800101c:	4332      	orrs	r2, r6
 800101e:	01d9      	lsls	r1, r3, #7
 8001020:	d400      	bmi.n	8001024 <__aeabi_dmul+0x31c>
 8001022:	e0b3      	b.n	800118c <__aeabi_dmul+0x484>
 8001024:	2601      	movs	r6, #1
 8001026:	0850      	lsrs	r0, r2, #1
 8001028:	4032      	ands	r2, r6
 800102a:	4302      	orrs	r2, r0
 800102c:	07de      	lsls	r6, r3, #31
 800102e:	4332      	orrs	r2, r6
 8001030:	085b      	lsrs	r3, r3, #1
 8001032:	4c22      	ldr	r4, [pc, #136]	; (80010bc <__aeabi_dmul+0x3b4>)
 8001034:	4454      	add	r4, sl
 8001036:	2c00      	cmp	r4, #0
 8001038:	dd62      	ble.n	8001100 <__aeabi_dmul+0x3f8>
 800103a:	0751      	lsls	r1, r2, #29
 800103c:	d009      	beq.n	8001052 <__aeabi_dmul+0x34a>
 800103e:	200f      	movs	r0, #15
 8001040:	4010      	ands	r0, r2
 8001042:	2804      	cmp	r0, #4
 8001044:	d005      	beq.n	8001052 <__aeabi_dmul+0x34a>
 8001046:	1d10      	adds	r0, r2, #4
 8001048:	4290      	cmp	r0, r2
 800104a:	4192      	sbcs	r2, r2
 800104c:	4252      	negs	r2, r2
 800104e:	189b      	adds	r3, r3, r2
 8001050:	0002      	movs	r2, r0
 8001052:	01d9      	lsls	r1, r3, #7
 8001054:	d504      	bpl.n	8001060 <__aeabi_dmul+0x358>
 8001056:	2480      	movs	r4, #128	; 0x80
 8001058:	4819      	ldr	r0, [pc, #100]	; (80010c0 <__aeabi_dmul+0x3b8>)
 800105a:	00e4      	lsls	r4, r4, #3
 800105c:	4003      	ands	r3, r0
 800105e:	4454      	add	r4, sl
 8001060:	4818      	ldr	r0, [pc, #96]	; (80010c4 <__aeabi_dmul+0x3bc>)
 8001062:	4284      	cmp	r4, r0
 8001064:	dd00      	ble.n	8001068 <__aeabi_dmul+0x360>
 8001066:	e727      	b.n	8000eb8 <__aeabi_dmul+0x1b0>
 8001068:	075e      	lsls	r6, r3, #29
 800106a:	025b      	lsls	r3, r3, #9
 800106c:	08d2      	lsrs	r2, r2, #3
 800106e:	0b1f      	lsrs	r7, r3, #12
 8001070:	0563      	lsls	r3, r4, #21
 8001072:	4316      	orrs	r6, r2
 8001074:	0d5b      	lsrs	r3, r3, #21
 8001076:	e6b2      	b.n	8000dde <__aeabi_dmul+0xd6>
 8001078:	2300      	movs	r3, #0
 800107a:	4699      	mov	r9, r3
 800107c:	3301      	adds	r3, #1
 800107e:	2704      	movs	r7, #4
 8001080:	2600      	movs	r6, #0
 8001082:	469b      	mov	fp, r3
 8001084:	e664      	b.n	8000d50 <__aeabi_dmul+0x48>
 8001086:	2303      	movs	r3, #3
 8001088:	9701      	str	r7, [sp, #4]
 800108a:	4681      	mov	r9, r0
 800108c:	270c      	movs	r7, #12
 800108e:	469b      	mov	fp, r3
 8001090:	e65e      	b.n	8000d50 <__aeabi_dmul+0x48>
 8001092:	2201      	movs	r2, #1
 8001094:	2001      	movs	r0, #1
 8001096:	4317      	orrs	r7, r2
 8001098:	2200      	movs	r2, #0
 800109a:	e676      	b.n	8000d8a <__aeabi_dmul+0x82>
 800109c:	2303      	movs	r3, #3
 800109e:	2003      	movs	r0, #3
 80010a0:	431f      	orrs	r7, r3
 80010a2:	4643      	mov	r3, r8
 80010a4:	e671      	b.n	8000d8a <__aeabi_dmul+0x82>
 80010a6:	46c0      	nop			; (mov r8, r8)
 80010a8:	000007ff 	.word	0x000007ff
 80010ac:	fffffc01 	.word	0xfffffc01
 80010b0:	08005bb8 	.word	0x08005bb8
 80010b4:	800fffff 	.word	0x800fffff
 80010b8:	fffffc0d 	.word	0xfffffc0d
 80010bc:	000003ff 	.word	0x000003ff
 80010c0:	feffffff 	.word	0xfeffffff
 80010c4:	000007fe 	.word	0x000007fe
 80010c8:	2300      	movs	r3, #0
 80010ca:	2780      	movs	r7, #128	; 0x80
 80010cc:	9300      	str	r3, [sp, #0]
 80010ce:	033f      	lsls	r7, r7, #12
 80010d0:	2600      	movs	r6, #0
 80010d2:	4b43      	ldr	r3, [pc, #268]	; (80011e0 <__aeabi_dmul+0x4d8>)
 80010d4:	e683      	b.n	8000dde <__aeabi_dmul+0xd6>
 80010d6:	9b01      	ldr	r3, [sp, #4]
 80010d8:	0032      	movs	r2, r6
 80010da:	46a4      	mov	ip, r4
 80010dc:	4658      	mov	r0, fp
 80010de:	e670      	b.n	8000dc2 <__aeabi_dmul+0xba>
 80010e0:	46ac      	mov	ip, r5
 80010e2:	e66e      	b.n	8000dc2 <__aeabi_dmul+0xba>
 80010e4:	2780      	movs	r7, #128	; 0x80
 80010e6:	9901      	ldr	r1, [sp, #4]
 80010e8:	033f      	lsls	r7, r7, #12
 80010ea:	4239      	tst	r1, r7
 80010ec:	d02d      	beq.n	800114a <__aeabi_dmul+0x442>
 80010ee:	423b      	tst	r3, r7
 80010f0:	d12b      	bne.n	800114a <__aeabi_dmul+0x442>
 80010f2:	431f      	orrs	r7, r3
 80010f4:	033f      	lsls	r7, r7, #12
 80010f6:	0b3f      	lsrs	r7, r7, #12
 80010f8:	9500      	str	r5, [sp, #0]
 80010fa:	0016      	movs	r6, r2
 80010fc:	4b38      	ldr	r3, [pc, #224]	; (80011e0 <__aeabi_dmul+0x4d8>)
 80010fe:	e66e      	b.n	8000dde <__aeabi_dmul+0xd6>
 8001100:	2501      	movs	r5, #1
 8001102:	1b2d      	subs	r5, r5, r4
 8001104:	2d38      	cmp	r5, #56	; 0x38
 8001106:	dd00      	ble.n	800110a <__aeabi_dmul+0x402>
 8001108:	e666      	b.n	8000dd8 <__aeabi_dmul+0xd0>
 800110a:	2d1f      	cmp	r5, #31
 800110c:	dc40      	bgt.n	8001190 <__aeabi_dmul+0x488>
 800110e:	4835      	ldr	r0, [pc, #212]	; (80011e4 <__aeabi_dmul+0x4dc>)
 8001110:	001c      	movs	r4, r3
 8001112:	4450      	add	r0, sl
 8001114:	0016      	movs	r6, r2
 8001116:	4082      	lsls	r2, r0
 8001118:	4084      	lsls	r4, r0
 800111a:	40ee      	lsrs	r6, r5
 800111c:	1e50      	subs	r0, r2, #1
 800111e:	4182      	sbcs	r2, r0
 8001120:	4334      	orrs	r4, r6
 8001122:	4314      	orrs	r4, r2
 8001124:	40eb      	lsrs	r3, r5
 8001126:	0762      	lsls	r2, r4, #29
 8001128:	d009      	beq.n	800113e <__aeabi_dmul+0x436>
 800112a:	220f      	movs	r2, #15
 800112c:	4022      	ands	r2, r4
 800112e:	2a04      	cmp	r2, #4
 8001130:	d005      	beq.n	800113e <__aeabi_dmul+0x436>
 8001132:	0022      	movs	r2, r4
 8001134:	1d14      	adds	r4, r2, #4
 8001136:	4294      	cmp	r4, r2
 8001138:	4180      	sbcs	r0, r0
 800113a:	4240      	negs	r0, r0
 800113c:	181b      	adds	r3, r3, r0
 800113e:	021a      	lsls	r2, r3, #8
 8001140:	d53e      	bpl.n	80011c0 <__aeabi_dmul+0x4b8>
 8001142:	2301      	movs	r3, #1
 8001144:	2700      	movs	r7, #0
 8001146:	2600      	movs	r6, #0
 8001148:	e649      	b.n	8000dde <__aeabi_dmul+0xd6>
 800114a:	2780      	movs	r7, #128	; 0x80
 800114c:	9b01      	ldr	r3, [sp, #4]
 800114e:	033f      	lsls	r7, r7, #12
 8001150:	431f      	orrs	r7, r3
 8001152:	033f      	lsls	r7, r7, #12
 8001154:	0b3f      	lsrs	r7, r7, #12
 8001156:	9400      	str	r4, [sp, #0]
 8001158:	4b21      	ldr	r3, [pc, #132]	; (80011e0 <__aeabi_dmul+0x4d8>)
 800115a:	e640      	b.n	8000dde <__aeabi_dmul+0xd6>
 800115c:	0003      	movs	r3, r0
 800115e:	465a      	mov	r2, fp
 8001160:	3b28      	subs	r3, #40	; 0x28
 8001162:	409a      	lsls	r2, r3
 8001164:	2600      	movs	r6, #0
 8001166:	9201      	str	r2, [sp, #4]
 8001168:	e66d      	b.n	8000e46 <__aeabi_dmul+0x13e>
 800116a:	4658      	mov	r0, fp
 800116c:	f000 fc48 	bl	8001a00 <__clzsi2>
 8001170:	3020      	adds	r0, #32
 8001172:	e657      	b.n	8000e24 <__aeabi_dmul+0x11c>
 8001174:	0003      	movs	r3, r0
 8001176:	4652      	mov	r2, sl
 8001178:	3b28      	subs	r3, #40	; 0x28
 800117a:	409a      	lsls	r2, r3
 800117c:	0013      	movs	r3, r2
 800117e:	2200      	movs	r2, #0
 8001180:	e693      	b.n	8000eaa <__aeabi_dmul+0x1a2>
 8001182:	4650      	mov	r0, sl
 8001184:	f000 fc3c 	bl	8001a00 <__clzsi2>
 8001188:	3020      	adds	r0, #32
 800118a:	e67b      	b.n	8000e84 <__aeabi_dmul+0x17c>
 800118c:	46ca      	mov	sl, r9
 800118e:	e750      	b.n	8001032 <__aeabi_dmul+0x32a>
 8001190:	201f      	movs	r0, #31
 8001192:	001e      	movs	r6, r3
 8001194:	4240      	negs	r0, r0
 8001196:	1b04      	subs	r4, r0, r4
 8001198:	40e6      	lsrs	r6, r4
 800119a:	2d20      	cmp	r5, #32
 800119c:	d003      	beq.n	80011a6 <__aeabi_dmul+0x49e>
 800119e:	4c12      	ldr	r4, [pc, #72]	; (80011e8 <__aeabi_dmul+0x4e0>)
 80011a0:	4454      	add	r4, sl
 80011a2:	40a3      	lsls	r3, r4
 80011a4:	431a      	orrs	r2, r3
 80011a6:	1e50      	subs	r0, r2, #1
 80011a8:	4182      	sbcs	r2, r0
 80011aa:	4332      	orrs	r2, r6
 80011ac:	2607      	movs	r6, #7
 80011ae:	2700      	movs	r7, #0
 80011b0:	4016      	ands	r6, r2
 80011b2:	d009      	beq.n	80011c8 <__aeabi_dmul+0x4c0>
 80011b4:	200f      	movs	r0, #15
 80011b6:	2300      	movs	r3, #0
 80011b8:	4010      	ands	r0, r2
 80011ba:	0014      	movs	r4, r2
 80011bc:	2804      	cmp	r0, #4
 80011be:	d1b9      	bne.n	8001134 <__aeabi_dmul+0x42c>
 80011c0:	0022      	movs	r2, r4
 80011c2:	075e      	lsls	r6, r3, #29
 80011c4:	025b      	lsls	r3, r3, #9
 80011c6:	0b1f      	lsrs	r7, r3, #12
 80011c8:	08d2      	lsrs	r2, r2, #3
 80011ca:	4316      	orrs	r6, r2
 80011cc:	2300      	movs	r3, #0
 80011ce:	e606      	b.n	8000dde <__aeabi_dmul+0xd6>
 80011d0:	2780      	movs	r7, #128	; 0x80
 80011d2:	033f      	lsls	r7, r7, #12
 80011d4:	431f      	orrs	r7, r3
 80011d6:	033f      	lsls	r7, r7, #12
 80011d8:	0b3f      	lsrs	r7, r7, #12
 80011da:	0016      	movs	r6, r2
 80011dc:	4b00      	ldr	r3, [pc, #0]	; (80011e0 <__aeabi_dmul+0x4d8>)
 80011de:	e5fe      	b.n	8000dde <__aeabi_dmul+0xd6>
 80011e0:	000007ff 	.word	0x000007ff
 80011e4:	0000041e 	.word	0x0000041e
 80011e8:	0000043e 	.word	0x0000043e

080011ec <__aeabi_dsub>:
 80011ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011ee:	4657      	mov	r7, sl
 80011f0:	464e      	mov	r6, r9
 80011f2:	4645      	mov	r5, r8
 80011f4:	46de      	mov	lr, fp
 80011f6:	000c      	movs	r4, r1
 80011f8:	0309      	lsls	r1, r1, #12
 80011fa:	b5e0      	push	{r5, r6, r7, lr}
 80011fc:	0a49      	lsrs	r1, r1, #9
 80011fe:	0f46      	lsrs	r6, r0, #29
 8001200:	005f      	lsls	r7, r3, #1
 8001202:	4331      	orrs	r1, r6
 8001204:	031e      	lsls	r6, r3, #12
 8001206:	0fdb      	lsrs	r3, r3, #31
 8001208:	0a76      	lsrs	r6, r6, #9
 800120a:	469b      	mov	fp, r3
 800120c:	0f53      	lsrs	r3, r2, #29
 800120e:	4333      	orrs	r3, r6
 8001210:	4ec8      	ldr	r6, [pc, #800]	; (8001534 <__aeabi_dsub+0x348>)
 8001212:	0065      	lsls	r5, r4, #1
 8001214:	00c0      	lsls	r0, r0, #3
 8001216:	0fe4      	lsrs	r4, r4, #31
 8001218:	00d2      	lsls	r2, r2, #3
 800121a:	0d6d      	lsrs	r5, r5, #21
 800121c:	46a2      	mov	sl, r4
 800121e:	4681      	mov	r9, r0
 8001220:	0d7f      	lsrs	r7, r7, #21
 8001222:	469c      	mov	ip, r3
 8001224:	4690      	mov	r8, r2
 8001226:	42b7      	cmp	r7, r6
 8001228:	d100      	bne.n	800122c <__aeabi_dsub+0x40>
 800122a:	e0b9      	b.n	80013a0 <__aeabi_dsub+0x1b4>
 800122c:	465b      	mov	r3, fp
 800122e:	2601      	movs	r6, #1
 8001230:	4073      	eors	r3, r6
 8001232:	469b      	mov	fp, r3
 8001234:	1bee      	subs	r6, r5, r7
 8001236:	45a3      	cmp	fp, r4
 8001238:	d100      	bne.n	800123c <__aeabi_dsub+0x50>
 800123a:	e083      	b.n	8001344 <__aeabi_dsub+0x158>
 800123c:	2e00      	cmp	r6, #0
 800123e:	dd63      	ble.n	8001308 <__aeabi_dsub+0x11c>
 8001240:	2f00      	cmp	r7, #0
 8001242:	d000      	beq.n	8001246 <__aeabi_dsub+0x5a>
 8001244:	e0b1      	b.n	80013aa <__aeabi_dsub+0x1be>
 8001246:	4663      	mov	r3, ip
 8001248:	4313      	orrs	r3, r2
 800124a:	d100      	bne.n	800124e <__aeabi_dsub+0x62>
 800124c:	e123      	b.n	8001496 <__aeabi_dsub+0x2aa>
 800124e:	1e73      	subs	r3, r6, #1
 8001250:	2b00      	cmp	r3, #0
 8001252:	d000      	beq.n	8001256 <__aeabi_dsub+0x6a>
 8001254:	e1ba      	b.n	80015cc <__aeabi_dsub+0x3e0>
 8001256:	1a86      	subs	r6, r0, r2
 8001258:	4663      	mov	r3, ip
 800125a:	42b0      	cmp	r0, r6
 800125c:	4180      	sbcs	r0, r0
 800125e:	2501      	movs	r5, #1
 8001260:	1ac9      	subs	r1, r1, r3
 8001262:	4240      	negs	r0, r0
 8001264:	1a09      	subs	r1, r1, r0
 8001266:	020b      	lsls	r3, r1, #8
 8001268:	d400      	bmi.n	800126c <__aeabi_dsub+0x80>
 800126a:	e147      	b.n	80014fc <__aeabi_dsub+0x310>
 800126c:	0249      	lsls	r1, r1, #9
 800126e:	0a4b      	lsrs	r3, r1, #9
 8001270:	4698      	mov	r8, r3
 8001272:	4643      	mov	r3, r8
 8001274:	2b00      	cmp	r3, #0
 8001276:	d100      	bne.n	800127a <__aeabi_dsub+0x8e>
 8001278:	e189      	b.n	800158e <__aeabi_dsub+0x3a2>
 800127a:	4640      	mov	r0, r8
 800127c:	f000 fbc0 	bl	8001a00 <__clzsi2>
 8001280:	0003      	movs	r3, r0
 8001282:	3b08      	subs	r3, #8
 8001284:	2b1f      	cmp	r3, #31
 8001286:	dd00      	ble.n	800128a <__aeabi_dsub+0x9e>
 8001288:	e17c      	b.n	8001584 <__aeabi_dsub+0x398>
 800128a:	2220      	movs	r2, #32
 800128c:	0030      	movs	r0, r6
 800128e:	1ad2      	subs	r2, r2, r3
 8001290:	4641      	mov	r1, r8
 8001292:	40d0      	lsrs	r0, r2
 8001294:	4099      	lsls	r1, r3
 8001296:	0002      	movs	r2, r0
 8001298:	409e      	lsls	r6, r3
 800129a:	430a      	orrs	r2, r1
 800129c:	429d      	cmp	r5, r3
 800129e:	dd00      	ble.n	80012a2 <__aeabi_dsub+0xb6>
 80012a0:	e16a      	b.n	8001578 <__aeabi_dsub+0x38c>
 80012a2:	1b5d      	subs	r5, r3, r5
 80012a4:	1c6b      	adds	r3, r5, #1
 80012a6:	2b1f      	cmp	r3, #31
 80012a8:	dd00      	ble.n	80012ac <__aeabi_dsub+0xc0>
 80012aa:	e194      	b.n	80015d6 <__aeabi_dsub+0x3ea>
 80012ac:	2120      	movs	r1, #32
 80012ae:	0010      	movs	r0, r2
 80012b0:	0035      	movs	r5, r6
 80012b2:	1ac9      	subs	r1, r1, r3
 80012b4:	408e      	lsls	r6, r1
 80012b6:	40da      	lsrs	r2, r3
 80012b8:	4088      	lsls	r0, r1
 80012ba:	40dd      	lsrs	r5, r3
 80012bc:	1e71      	subs	r1, r6, #1
 80012be:	418e      	sbcs	r6, r1
 80012c0:	0011      	movs	r1, r2
 80012c2:	2207      	movs	r2, #7
 80012c4:	4328      	orrs	r0, r5
 80012c6:	2500      	movs	r5, #0
 80012c8:	4306      	orrs	r6, r0
 80012ca:	4032      	ands	r2, r6
 80012cc:	2a00      	cmp	r2, #0
 80012ce:	d009      	beq.n	80012e4 <__aeabi_dsub+0xf8>
 80012d0:	230f      	movs	r3, #15
 80012d2:	4033      	ands	r3, r6
 80012d4:	2b04      	cmp	r3, #4
 80012d6:	d005      	beq.n	80012e4 <__aeabi_dsub+0xf8>
 80012d8:	1d33      	adds	r3, r6, #4
 80012da:	42b3      	cmp	r3, r6
 80012dc:	41b6      	sbcs	r6, r6
 80012de:	4276      	negs	r6, r6
 80012e0:	1989      	adds	r1, r1, r6
 80012e2:	001e      	movs	r6, r3
 80012e4:	020b      	lsls	r3, r1, #8
 80012e6:	d400      	bmi.n	80012ea <__aeabi_dsub+0xfe>
 80012e8:	e23d      	b.n	8001766 <__aeabi_dsub+0x57a>
 80012ea:	1c6a      	adds	r2, r5, #1
 80012ec:	4b91      	ldr	r3, [pc, #580]	; (8001534 <__aeabi_dsub+0x348>)
 80012ee:	0555      	lsls	r5, r2, #21
 80012f0:	0d6d      	lsrs	r5, r5, #21
 80012f2:	429a      	cmp	r2, r3
 80012f4:	d100      	bne.n	80012f8 <__aeabi_dsub+0x10c>
 80012f6:	e119      	b.n	800152c <__aeabi_dsub+0x340>
 80012f8:	4a8f      	ldr	r2, [pc, #572]	; (8001538 <__aeabi_dsub+0x34c>)
 80012fa:	08f6      	lsrs	r6, r6, #3
 80012fc:	400a      	ands	r2, r1
 80012fe:	0757      	lsls	r7, r2, #29
 8001300:	0252      	lsls	r2, r2, #9
 8001302:	4337      	orrs	r7, r6
 8001304:	0b12      	lsrs	r2, r2, #12
 8001306:	e09b      	b.n	8001440 <__aeabi_dsub+0x254>
 8001308:	2e00      	cmp	r6, #0
 800130a:	d000      	beq.n	800130e <__aeabi_dsub+0x122>
 800130c:	e0c5      	b.n	800149a <__aeabi_dsub+0x2ae>
 800130e:	1c6e      	adds	r6, r5, #1
 8001310:	0576      	lsls	r6, r6, #21
 8001312:	0d76      	lsrs	r6, r6, #21
 8001314:	2e01      	cmp	r6, #1
 8001316:	dc00      	bgt.n	800131a <__aeabi_dsub+0x12e>
 8001318:	e148      	b.n	80015ac <__aeabi_dsub+0x3c0>
 800131a:	4667      	mov	r7, ip
 800131c:	1a86      	subs	r6, r0, r2
 800131e:	1bcb      	subs	r3, r1, r7
 8001320:	42b0      	cmp	r0, r6
 8001322:	41bf      	sbcs	r7, r7
 8001324:	427f      	negs	r7, r7
 8001326:	46b8      	mov	r8, r7
 8001328:	001f      	movs	r7, r3
 800132a:	4643      	mov	r3, r8
 800132c:	1aff      	subs	r7, r7, r3
 800132e:	003b      	movs	r3, r7
 8001330:	46b8      	mov	r8, r7
 8001332:	021b      	lsls	r3, r3, #8
 8001334:	d500      	bpl.n	8001338 <__aeabi_dsub+0x14c>
 8001336:	e15f      	b.n	80015f8 <__aeabi_dsub+0x40c>
 8001338:	4337      	orrs	r7, r6
 800133a:	d19a      	bne.n	8001272 <__aeabi_dsub+0x86>
 800133c:	2200      	movs	r2, #0
 800133e:	2400      	movs	r4, #0
 8001340:	2500      	movs	r5, #0
 8001342:	e079      	b.n	8001438 <__aeabi_dsub+0x24c>
 8001344:	2e00      	cmp	r6, #0
 8001346:	dc00      	bgt.n	800134a <__aeabi_dsub+0x15e>
 8001348:	e0fa      	b.n	8001540 <__aeabi_dsub+0x354>
 800134a:	2f00      	cmp	r7, #0
 800134c:	d100      	bne.n	8001350 <__aeabi_dsub+0x164>
 800134e:	e08d      	b.n	800146c <__aeabi_dsub+0x280>
 8001350:	4b78      	ldr	r3, [pc, #480]	; (8001534 <__aeabi_dsub+0x348>)
 8001352:	429d      	cmp	r5, r3
 8001354:	d067      	beq.n	8001426 <__aeabi_dsub+0x23a>
 8001356:	2380      	movs	r3, #128	; 0x80
 8001358:	4667      	mov	r7, ip
 800135a:	041b      	lsls	r3, r3, #16
 800135c:	431f      	orrs	r7, r3
 800135e:	46bc      	mov	ip, r7
 8001360:	2e38      	cmp	r6, #56	; 0x38
 8001362:	dc00      	bgt.n	8001366 <__aeabi_dsub+0x17a>
 8001364:	e152      	b.n	800160c <__aeabi_dsub+0x420>
 8001366:	4663      	mov	r3, ip
 8001368:	4313      	orrs	r3, r2
 800136a:	1e5a      	subs	r2, r3, #1
 800136c:	4193      	sbcs	r3, r2
 800136e:	181e      	adds	r6, r3, r0
 8001370:	4286      	cmp	r6, r0
 8001372:	4180      	sbcs	r0, r0
 8001374:	4240      	negs	r0, r0
 8001376:	1809      	adds	r1, r1, r0
 8001378:	020b      	lsls	r3, r1, #8
 800137a:	d400      	bmi.n	800137e <__aeabi_dsub+0x192>
 800137c:	e0be      	b.n	80014fc <__aeabi_dsub+0x310>
 800137e:	4b6d      	ldr	r3, [pc, #436]	; (8001534 <__aeabi_dsub+0x348>)
 8001380:	3501      	adds	r5, #1
 8001382:	429d      	cmp	r5, r3
 8001384:	d100      	bne.n	8001388 <__aeabi_dsub+0x19c>
 8001386:	e0d2      	b.n	800152e <__aeabi_dsub+0x342>
 8001388:	4a6b      	ldr	r2, [pc, #428]	; (8001538 <__aeabi_dsub+0x34c>)
 800138a:	0873      	lsrs	r3, r6, #1
 800138c:	400a      	ands	r2, r1
 800138e:	2101      	movs	r1, #1
 8001390:	400e      	ands	r6, r1
 8001392:	431e      	orrs	r6, r3
 8001394:	0851      	lsrs	r1, r2, #1
 8001396:	07d3      	lsls	r3, r2, #31
 8001398:	2207      	movs	r2, #7
 800139a:	431e      	orrs	r6, r3
 800139c:	4032      	ands	r2, r6
 800139e:	e795      	b.n	80012cc <__aeabi_dsub+0xe0>
 80013a0:	001e      	movs	r6, r3
 80013a2:	4316      	orrs	r6, r2
 80013a4:	d000      	beq.n	80013a8 <__aeabi_dsub+0x1bc>
 80013a6:	e745      	b.n	8001234 <__aeabi_dsub+0x48>
 80013a8:	e740      	b.n	800122c <__aeabi_dsub+0x40>
 80013aa:	4b62      	ldr	r3, [pc, #392]	; (8001534 <__aeabi_dsub+0x348>)
 80013ac:	429d      	cmp	r5, r3
 80013ae:	d03a      	beq.n	8001426 <__aeabi_dsub+0x23a>
 80013b0:	2380      	movs	r3, #128	; 0x80
 80013b2:	4667      	mov	r7, ip
 80013b4:	041b      	lsls	r3, r3, #16
 80013b6:	431f      	orrs	r7, r3
 80013b8:	46bc      	mov	ip, r7
 80013ba:	2e38      	cmp	r6, #56	; 0x38
 80013bc:	dd00      	ble.n	80013c0 <__aeabi_dsub+0x1d4>
 80013be:	e0eb      	b.n	8001598 <__aeabi_dsub+0x3ac>
 80013c0:	2e1f      	cmp	r6, #31
 80013c2:	dc00      	bgt.n	80013c6 <__aeabi_dsub+0x1da>
 80013c4:	e13a      	b.n	800163c <__aeabi_dsub+0x450>
 80013c6:	0033      	movs	r3, r6
 80013c8:	4667      	mov	r7, ip
 80013ca:	3b20      	subs	r3, #32
 80013cc:	40df      	lsrs	r7, r3
 80013ce:	003b      	movs	r3, r7
 80013d0:	2e20      	cmp	r6, #32
 80013d2:	d005      	beq.n	80013e0 <__aeabi_dsub+0x1f4>
 80013d4:	2740      	movs	r7, #64	; 0x40
 80013d6:	1bbf      	subs	r7, r7, r6
 80013d8:	4666      	mov	r6, ip
 80013da:	40be      	lsls	r6, r7
 80013dc:	4332      	orrs	r2, r6
 80013de:	4690      	mov	r8, r2
 80013e0:	4646      	mov	r6, r8
 80013e2:	1e72      	subs	r2, r6, #1
 80013e4:	4196      	sbcs	r6, r2
 80013e6:	4333      	orrs	r3, r6
 80013e8:	e0da      	b.n	80015a0 <__aeabi_dsub+0x3b4>
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d100      	bne.n	80013f0 <__aeabi_dsub+0x204>
 80013ee:	e214      	b.n	800181a <__aeabi_dsub+0x62e>
 80013f0:	4663      	mov	r3, ip
 80013f2:	4313      	orrs	r3, r2
 80013f4:	d100      	bne.n	80013f8 <__aeabi_dsub+0x20c>
 80013f6:	e168      	b.n	80016ca <__aeabi_dsub+0x4de>
 80013f8:	2380      	movs	r3, #128	; 0x80
 80013fa:	074e      	lsls	r6, r1, #29
 80013fc:	08c0      	lsrs	r0, r0, #3
 80013fe:	08c9      	lsrs	r1, r1, #3
 8001400:	031b      	lsls	r3, r3, #12
 8001402:	4306      	orrs	r6, r0
 8001404:	4219      	tst	r1, r3
 8001406:	d008      	beq.n	800141a <__aeabi_dsub+0x22e>
 8001408:	4660      	mov	r0, ip
 800140a:	08c0      	lsrs	r0, r0, #3
 800140c:	4218      	tst	r0, r3
 800140e:	d104      	bne.n	800141a <__aeabi_dsub+0x22e>
 8001410:	4663      	mov	r3, ip
 8001412:	0001      	movs	r1, r0
 8001414:	08d2      	lsrs	r2, r2, #3
 8001416:	075e      	lsls	r6, r3, #29
 8001418:	4316      	orrs	r6, r2
 800141a:	00f3      	lsls	r3, r6, #3
 800141c:	4699      	mov	r9, r3
 800141e:	00c9      	lsls	r1, r1, #3
 8001420:	0f72      	lsrs	r2, r6, #29
 8001422:	4d44      	ldr	r5, [pc, #272]	; (8001534 <__aeabi_dsub+0x348>)
 8001424:	4311      	orrs	r1, r2
 8001426:	464b      	mov	r3, r9
 8001428:	08de      	lsrs	r6, r3, #3
 800142a:	4b42      	ldr	r3, [pc, #264]	; (8001534 <__aeabi_dsub+0x348>)
 800142c:	074f      	lsls	r7, r1, #29
 800142e:	4337      	orrs	r7, r6
 8001430:	08ca      	lsrs	r2, r1, #3
 8001432:	429d      	cmp	r5, r3
 8001434:	d100      	bne.n	8001438 <__aeabi_dsub+0x24c>
 8001436:	e06e      	b.n	8001516 <__aeabi_dsub+0x32a>
 8001438:	0312      	lsls	r2, r2, #12
 800143a:	056d      	lsls	r5, r5, #21
 800143c:	0b12      	lsrs	r2, r2, #12
 800143e:	0d6d      	lsrs	r5, r5, #21
 8001440:	2100      	movs	r1, #0
 8001442:	0312      	lsls	r2, r2, #12
 8001444:	0b13      	lsrs	r3, r2, #12
 8001446:	0d0a      	lsrs	r2, r1, #20
 8001448:	0512      	lsls	r2, r2, #20
 800144a:	431a      	orrs	r2, r3
 800144c:	4b3b      	ldr	r3, [pc, #236]	; (800153c <__aeabi_dsub+0x350>)
 800144e:	052d      	lsls	r5, r5, #20
 8001450:	4013      	ands	r3, r2
 8001452:	432b      	orrs	r3, r5
 8001454:	005b      	lsls	r3, r3, #1
 8001456:	07e4      	lsls	r4, r4, #31
 8001458:	085b      	lsrs	r3, r3, #1
 800145a:	4323      	orrs	r3, r4
 800145c:	0038      	movs	r0, r7
 800145e:	0019      	movs	r1, r3
 8001460:	bc3c      	pop	{r2, r3, r4, r5}
 8001462:	4690      	mov	r8, r2
 8001464:	4699      	mov	r9, r3
 8001466:	46a2      	mov	sl, r4
 8001468:	46ab      	mov	fp, r5
 800146a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800146c:	4663      	mov	r3, ip
 800146e:	4313      	orrs	r3, r2
 8001470:	d011      	beq.n	8001496 <__aeabi_dsub+0x2aa>
 8001472:	1e73      	subs	r3, r6, #1
 8001474:	2b00      	cmp	r3, #0
 8001476:	d000      	beq.n	800147a <__aeabi_dsub+0x28e>
 8001478:	e107      	b.n	800168a <__aeabi_dsub+0x49e>
 800147a:	1886      	adds	r6, r0, r2
 800147c:	4286      	cmp	r6, r0
 800147e:	4180      	sbcs	r0, r0
 8001480:	4461      	add	r1, ip
 8001482:	4240      	negs	r0, r0
 8001484:	1809      	adds	r1, r1, r0
 8001486:	2501      	movs	r5, #1
 8001488:	020b      	lsls	r3, r1, #8
 800148a:	d537      	bpl.n	80014fc <__aeabi_dsub+0x310>
 800148c:	2502      	movs	r5, #2
 800148e:	e77b      	b.n	8001388 <__aeabi_dsub+0x19c>
 8001490:	003e      	movs	r6, r7
 8001492:	4661      	mov	r1, ip
 8001494:	4691      	mov	r9, r2
 8001496:	0035      	movs	r5, r6
 8001498:	e7c5      	b.n	8001426 <__aeabi_dsub+0x23a>
 800149a:	465c      	mov	r4, fp
 800149c:	2d00      	cmp	r5, #0
 800149e:	d000      	beq.n	80014a2 <__aeabi_dsub+0x2b6>
 80014a0:	e0e1      	b.n	8001666 <__aeabi_dsub+0x47a>
 80014a2:	000b      	movs	r3, r1
 80014a4:	4303      	orrs	r3, r0
 80014a6:	d0f3      	beq.n	8001490 <__aeabi_dsub+0x2a4>
 80014a8:	1c73      	adds	r3, r6, #1
 80014aa:	d100      	bne.n	80014ae <__aeabi_dsub+0x2c2>
 80014ac:	e1ac      	b.n	8001808 <__aeabi_dsub+0x61c>
 80014ae:	4b21      	ldr	r3, [pc, #132]	; (8001534 <__aeabi_dsub+0x348>)
 80014b0:	429f      	cmp	r7, r3
 80014b2:	d100      	bne.n	80014b6 <__aeabi_dsub+0x2ca>
 80014b4:	e13a      	b.n	800172c <__aeabi_dsub+0x540>
 80014b6:	43f3      	mvns	r3, r6
 80014b8:	2b38      	cmp	r3, #56	; 0x38
 80014ba:	dd00      	ble.n	80014be <__aeabi_dsub+0x2d2>
 80014bc:	e16f      	b.n	800179e <__aeabi_dsub+0x5b2>
 80014be:	2b1f      	cmp	r3, #31
 80014c0:	dd00      	ble.n	80014c4 <__aeabi_dsub+0x2d8>
 80014c2:	e18c      	b.n	80017de <__aeabi_dsub+0x5f2>
 80014c4:	2520      	movs	r5, #32
 80014c6:	000e      	movs	r6, r1
 80014c8:	1aed      	subs	r5, r5, r3
 80014ca:	40ae      	lsls	r6, r5
 80014cc:	46b0      	mov	r8, r6
 80014ce:	0006      	movs	r6, r0
 80014d0:	46aa      	mov	sl, r5
 80014d2:	40de      	lsrs	r6, r3
 80014d4:	4645      	mov	r5, r8
 80014d6:	4335      	orrs	r5, r6
 80014d8:	002e      	movs	r6, r5
 80014da:	4655      	mov	r5, sl
 80014dc:	40d9      	lsrs	r1, r3
 80014de:	40a8      	lsls	r0, r5
 80014e0:	4663      	mov	r3, ip
 80014e2:	1e45      	subs	r5, r0, #1
 80014e4:	41a8      	sbcs	r0, r5
 80014e6:	1a5b      	subs	r3, r3, r1
 80014e8:	469c      	mov	ip, r3
 80014ea:	4330      	orrs	r0, r6
 80014ec:	1a16      	subs	r6, r2, r0
 80014ee:	42b2      	cmp	r2, r6
 80014f0:	4192      	sbcs	r2, r2
 80014f2:	4663      	mov	r3, ip
 80014f4:	4252      	negs	r2, r2
 80014f6:	1a99      	subs	r1, r3, r2
 80014f8:	003d      	movs	r5, r7
 80014fa:	e6b4      	b.n	8001266 <__aeabi_dsub+0x7a>
 80014fc:	2207      	movs	r2, #7
 80014fe:	4032      	ands	r2, r6
 8001500:	2a00      	cmp	r2, #0
 8001502:	d000      	beq.n	8001506 <__aeabi_dsub+0x31a>
 8001504:	e6e4      	b.n	80012d0 <__aeabi_dsub+0xe4>
 8001506:	4b0b      	ldr	r3, [pc, #44]	; (8001534 <__aeabi_dsub+0x348>)
 8001508:	08f6      	lsrs	r6, r6, #3
 800150a:	074f      	lsls	r7, r1, #29
 800150c:	4337      	orrs	r7, r6
 800150e:	08ca      	lsrs	r2, r1, #3
 8001510:	429d      	cmp	r5, r3
 8001512:	d000      	beq.n	8001516 <__aeabi_dsub+0x32a>
 8001514:	e790      	b.n	8001438 <__aeabi_dsub+0x24c>
 8001516:	003b      	movs	r3, r7
 8001518:	4313      	orrs	r3, r2
 800151a:	d100      	bne.n	800151e <__aeabi_dsub+0x332>
 800151c:	e1a6      	b.n	800186c <__aeabi_dsub+0x680>
 800151e:	2380      	movs	r3, #128	; 0x80
 8001520:	031b      	lsls	r3, r3, #12
 8001522:	431a      	orrs	r2, r3
 8001524:	0312      	lsls	r2, r2, #12
 8001526:	0b12      	lsrs	r2, r2, #12
 8001528:	4d02      	ldr	r5, [pc, #8]	; (8001534 <__aeabi_dsub+0x348>)
 800152a:	e789      	b.n	8001440 <__aeabi_dsub+0x254>
 800152c:	0015      	movs	r5, r2
 800152e:	2200      	movs	r2, #0
 8001530:	2700      	movs	r7, #0
 8001532:	e785      	b.n	8001440 <__aeabi_dsub+0x254>
 8001534:	000007ff 	.word	0x000007ff
 8001538:	ff7fffff 	.word	0xff7fffff
 800153c:	800fffff 	.word	0x800fffff
 8001540:	2e00      	cmp	r6, #0
 8001542:	d000      	beq.n	8001546 <__aeabi_dsub+0x35a>
 8001544:	e0c7      	b.n	80016d6 <__aeabi_dsub+0x4ea>
 8001546:	1c6b      	adds	r3, r5, #1
 8001548:	055e      	lsls	r6, r3, #21
 800154a:	0d76      	lsrs	r6, r6, #21
 800154c:	2e01      	cmp	r6, #1
 800154e:	dc00      	bgt.n	8001552 <__aeabi_dsub+0x366>
 8001550:	e0f0      	b.n	8001734 <__aeabi_dsub+0x548>
 8001552:	4dc8      	ldr	r5, [pc, #800]	; (8001874 <__aeabi_dsub+0x688>)
 8001554:	42ab      	cmp	r3, r5
 8001556:	d100      	bne.n	800155a <__aeabi_dsub+0x36e>
 8001558:	e0b9      	b.n	80016ce <__aeabi_dsub+0x4e2>
 800155a:	1885      	adds	r5, r0, r2
 800155c:	000a      	movs	r2, r1
 800155e:	4285      	cmp	r5, r0
 8001560:	4189      	sbcs	r1, r1
 8001562:	4462      	add	r2, ip
 8001564:	4249      	negs	r1, r1
 8001566:	1851      	adds	r1, r2, r1
 8001568:	2207      	movs	r2, #7
 800156a:	07ce      	lsls	r6, r1, #31
 800156c:	086d      	lsrs	r5, r5, #1
 800156e:	432e      	orrs	r6, r5
 8001570:	0849      	lsrs	r1, r1, #1
 8001572:	4032      	ands	r2, r6
 8001574:	001d      	movs	r5, r3
 8001576:	e6a9      	b.n	80012cc <__aeabi_dsub+0xe0>
 8001578:	49bf      	ldr	r1, [pc, #764]	; (8001878 <__aeabi_dsub+0x68c>)
 800157a:	1aed      	subs	r5, r5, r3
 800157c:	4011      	ands	r1, r2
 800157e:	2207      	movs	r2, #7
 8001580:	4032      	ands	r2, r6
 8001582:	e6a3      	b.n	80012cc <__aeabi_dsub+0xe0>
 8001584:	0032      	movs	r2, r6
 8001586:	3828      	subs	r0, #40	; 0x28
 8001588:	4082      	lsls	r2, r0
 800158a:	2600      	movs	r6, #0
 800158c:	e686      	b.n	800129c <__aeabi_dsub+0xb0>
 800158e:	0030      	movs	r0, r6
 8001590:	f000 fa36 	bl	8001a00 <__clzsi2>
 8001594:	3020      	adds	r0, #32
 8001596:	e673      	b.n	8001280 <__aeabi_dsub+0x94>
 8001598:	4663      	mov	r3, ip
 800159a:	4313      	orrs	r3, r2
 800159c:	1e5a      	subs	r2, r3, #1
 800159e:	4193      	sbcs	r3, r2
 80015a0:	1ac6      	subs	r6, r0, r3
 80015a2:	42b0      	cmp	r0, r6
 80015a4:	4180      	sbcs	r0, r0
 80015a6:	4240      	negs	r0, r0
 80015a8:	1a09      	subs	r1, r1, r0
 80015aa:	e65c      	b.n	8001266 <__aeabi_dsub+0x7a>
 80015ac:	000e      	movs	r6, r1
 80015ae:	4667      	mov	r7, ip
 80015b0:	4306      	orrs	r6, r0
 80015b2:	4317      	orrs	r7, r2
 80015b4:	2d00      	cmp	r5, #0
 80015b6:	d15e      	bne.n	8001676 <__aeabi_dsub+0x48a>
 80015b8:	2e00      	cmp	r6, #0
 80015ba:	d000      	beq.n	80015be <__aeabi_dsub+0x3d2>
 80015bc:	e0f3      	b.n	80017a6 <__aeabi_dsub+0x5ba>
 80015be:	2f00      	cmp	r7, #0
 80015c0:	d100      	bne.n	80015c4 <__aeabi_dsub+0x3d8>
 80015c2:	e11e      	b.n	8001802 <__aeabi_dsub+0x616>
 80015c4:	465c      	mov	r4, fp
 80015c6:	4661      	mov	r1, ip
 80015c8:	4691      	mov	r9, r2
 80015ca:	e72c      	b.n	8001426 <__aeabi_dsub+0x23a>
 80015cc:	4fa9      	ldr	r7, [pc, #676]	; (8001874 <__aeabi_dsub+0x688>)
 80015ce:	42be      	cmp	r6, r7
 80015d0:	d07b      	beq.n	80016ca <__aeabi_dsub+0x4de>
 80015d2:	001e      	movs	r6, r3
 80015d4:	e6f1      	b.n	80013ba <__aeabi_dsub+0x1ce>
 80015d6:	0010      	movs	r0, r2
 80015d8:	3d1f      	subs	r5, #31
 80015da:	40e8      	lsrs	r0, r5
 80015dc:	2b20      	cmp	r3, #32
 80015de:	d003      	beq.n	80015e8 <__aeabi_dsub+0x3fc>
 80015e0:	2140      	movs	r1, #64	; 0x40
 80015e2:	1acb      	subs	r3, r1, r3
 80015e4:	409a      	lsls	r2, r3
 80015e6:	4316      	orrs	r6, r2
 80015e8:	1e73      	subs	r3, r6, #1
 80015ea:	419e      	sbcs	r6, r3
 80015ec:	2207      	movs	r2, #7
 80015ee:	4306      	orrs	r6, r0
 80015f0:	4032      	ands	r2, r6
 80015f2:	2100      	movs	r1, #0
 80015f4:	2500      	movs	r5, #0
 80015f6:	e783      	b.n	8001500 <__aeabi_dsub+0x314>
 80015f8:	1a16      	subs	r6, r2, r0
 80015fa:	4663      	mov	r3, ip
 80015fc:	42b2      	cmp	r2, r6
 80015fe:	4180      	sbcs	r0, r0
 8001600:	1a59      	subs	r1, r3, r1
 8001602:	4240      	negs	r0, r0
 8001604:	1a0b      	subs	r3, r1, r0
 8001606:	4698      	mov	r8, r3
 8001608:	465c      	mov	r4, fp
 800160a:	e632      	b.n	8001272 <__aeabi_dsub+0x86>
 800160c:	2e1f      	cmp	r6, #31
 800160e:	dd00      	ble.n	8001612 <__aeabi_dsub+0x426>
 8001610:	e0ab      	b.n	800176a <__aeabi_dsub+0x57e>
 8001612:	2720      	movs	r7, #32
 8001614:	1bbb      	subs	r3, r7, r6
 8001616:	469a      	mov	sl, r3
 8001618:	4663      	mov	r3, ip
 800161a:	4657      	mov	r7, sl
 800161c:	40bb      	lsls	r3, r7
 800161e:	4699      	mov	r9, r3
 8001620:	0013      	movs	r3, r2
 8001622:	464f      	mov	r7, r9
 8001624:	40f3      	lsrs	r3, r6
 8001626:	431f      	orrs	r7, r3
 8001628:	003b      	movs	r3, r7
 800162a:	4657      	mov	r7, sl
 800162c:	40ba      	lsls	r2, r7
 800162e:	1e57      	subs	r7, r2, #1
 8001630:	41ba      	sbcs	r2, r7
 8001632:	4313      	orrs	r3, r2
 8001634:	4662      	mov	r2, ip
 8001636:	40f2      	lsrs	r2, r6
 8001638:	1889      	adds	r1, r1, r2
 800163a:	e698      	b.n	800136e <__aeabi_dsub+0x182>
 800163c:	2720      	movs	r7, #32
 800163e:	1bbb      	subs	r3, r7, r6
 8001640:	469a      	mov	sl, r3
 8001642:	4663      	mov	r3, ip
 8001644:	4657      	mov	r7, sl
 8001646:	40bb      	lsls	r3, r7
 8001648:	4699      	mov	r9, r3
 800164a:	0013      	movs	r3, r2
 800164c:	464f      	mov	r7, r9
 800164e:	40f3      	lsrs	r3, r6
 8001650:	431f      	orrs	r7, r3
 8001652:	003b      	movs	r3, r7
 8001654:	4657      	mov	r7, sl
 8001656:	40ba      	lsls	r2, r7
 8001658:	1e57      	subs	r7, r2, #1
 800165a:	41ba      	sbcs	r2, r7
 800165c:	4313      	orrs	r3, r2
 800165e:	4662      	mov	r2, ip
 8001660:	40f2      	lsrs	r2, r6
 8001662:	1a89      	subs	r1, r1, r2
 8001664:	e79c      	b.n	80015a0 <__aeabi_dsub+0x3b4>
 8001666:	4b83      	ldr	r3, [pc, #524]	; (8001874 <__aeabi_dsub+0x688>)
 8001668:	429f      	cmp	r7, r3
 800166a:	d05f      	beq.n	800172c <__aeabi_dsub+0x540>
 800166c:	2580      	movs	r5, #128	; 0x80
 800166e:	042d      	lsls	r5, r5, #16
 8001670:	4273      	negs	r3, r6
 8001672:	4329      	orrs	r1, r5
 8001674:	e720      	b.n	80014b8 <__aeabi_dsub+0x2cc>
 8001676:	2e00      	cmp	r6, #0
 8001678:	d10c      	bne.n	8001694 <__aeabi_dsub+0x4a8>
 800167a:	2f00      	cmp	r7, #0
 800167c:	d100      	bne.n	8001680 <__aeabi_dsub+0x494>
 800167e:	e0d0      	b.n	8001822 <__aeabi_dsub+0x636>
 8001680:	465c      	mov	r4, fp
 8001682:	4661      	mov	r1, ip
 8001684:	4691      	mov	r9, r2
 8001686:	4d7b      	ldr	r5, [pc, #492]	; (8001874 <__aeabi_dsub+0x688>)
 8001688:	e6cd      	b.n	8001426 <__aeabi_dsub+0x23a>
 800168a:	4f7a      	ldr	r7, [pc, #488]	; (8001874 <__aeabi_dsub+0x688>)
 800168c:	42be      	cmp	r6, r7
 800168e:	d01c      	beq.n	80016ca <__aeabi_dsub+0x4de>
 8001690:	001e      	movs	r6, r3
 8001692:	e665      	b.n	8001360 <__aeabi_dsub+0x174>
 8001694:	2f00      	cmp	r7, #0
 8001696:	d018      	beq.n	80016ca <__aeabi_dsub+0x4de>
 8001698:	08c0      	lsrs	r0, r0, #3
 800169a:	074e      	lsls	r6, r1, #29
 800169c:	4306      	orrs	r6, r0
 800169e:	2080      	movs	r0, #128	; 0x80
 80016a0:	08c9      	lsrs	r1, r1, #3
 80016a2:	0300      	lsls	r0, r0, #12
 80016a4:	4201      	tst	r1, r0
 80016a6:	d008      	beq.n	80016ba <__aeabi_dsub+0x4ce>
 80016a8:	4663      	mov	r3, ip
 80016aa:	08dc      	lsrs	r4, r3, #3
 80016ac:	4204      	tst	r4, r0
 80016ae:	d104      	bne.n	80016ba <__aeabi_dsub+0x4ce>
 80016b0:	0021      	movs	r1, r4
 80016b2:	46da      	mov	sl, fp
 80016b4:	08d2      	lsrs	r2, r2, #3
 80016b6:	075e      	lsls	r6, r3, #29
 80016b8:	4316      	orrs	r6, r2
 80016ba:	00f3      	lsls	r3, r6, #3
 80016bc:	4699      	mov	r9, r3
 80016be:	2401      	movs	r4, #1
 80016c0:	4653      	mov	r3, sl
 80016c2:	00c9      	lsls	r1, r1, #3
 80016c4:	0f72      	lsrs	r2, r6, #29
 80016c6:	4311      	orrs	r1, r2
 80016c8:	401c      	ands	r4, r3
 80016ca:	4d6a      	ldr	r5, [pc, #424]	; (8001874 <__aeabi_dsub+0x688>)
 80016cc:	e6ab      	b.n	8001426 <__aeabi_dsub+0x23a>
 80016ce:	001d      	movs	r5, r3
 80016d0:	2200      	movs	r2, #0
 80016d2:	2700      	movs	r7, #0
 80016d4:	e6b4      	b.n	8001440 <__aeabi_dsub+0x254>
 80016d6:	2d00      	cmp	r5, #0
 80016d8:	d159      	bne.n	800178e <__aeabi_dsub+0x5a2>
 80016da:	000b      	movs	r3, r1
 80016dc:	4303      	orrs	r3, r0
 80016de:	d100      	bne.n	80016e2 <__aeabi_dsub+0x4f6>
 80016e0:	e6d6      	b.n	8001490 <__aeabi_dsub+0x2a4>
 80016e2:	1c73      	adds	r3, r6, #1
 80016e4:	d100      	bne.n	80016e8 <__aeabi_dsub+0x4fc>
 80016e6:	e0b2      	b.n	800184e <__aeabi_dsub+0x662>
 80016e8:	4b62      	ldr	r3, [pc, #392]	; (8001874 <__aeabi_dsub+0x688>)
 80016ea:	429f      	cmp	r7, r3
 80016ec:	d01e      	beq.n	800172c <__aeabi_dsub+0x540>
 80016ee:	43f3      	mvns	r3, r6
 80016f0:	2b38      	cmp	r3, #56	; 0x38
 80016f2:	dc6f      	bgt.n	80017d4 <__aeabi_dsub+0x5e8>
 80016f4:	2b1f      	cmp	r3, #31
 80016f6:	dd00      	ble.n	80016fa <__aeabi_dsub+0x50e>
 80016f8:	e097      	b.n	800182a <__aeabi_dsub+0x63e>
 80016fa:	2520      	movs	r5, #32
 80016fc:	000e      	movs	r6, r1
 80016fe:	1aed      	subs	r5, r5, r3
 8001700:	40ae      	lsls	r6, r5
 8001702:	46b0      	mov	r8, r6
 8001704:	0006      	movs	r6, r0
 8001706:	46aa      	mov	sl, r5
 8001708:	40de      	lsrs	r6, r3
 800170a:	4645      	mov	r5, r8
 800170c:	4335      	orrs	r5, r6
 800170e:	002e      	movs	r6, r5
 8001710:	4655      	mov	r5, sl
 8001712:	40a8      	lsls	r0, r5
 8001714:	40d9      	lsrs	r1, r3
 8001716:	1e45      	subs	r5, r0, #1
 8001718:	41a8      	sbcs	r0, r5
 800171a:	448c      	add	ip, r1
 800171c:	4306      	orrs	r6, r0
 800171e:	18b6      	adds	r6, r6, r2
 8001720:	4296      	cmp	r6, r2
 8001722:	4192      	sbcs	r2, r2
 8001724:	4251      	negs	r1, r2
 8001726:	4461      	add	r1, ip
 8001728:	003d      	movs	r5, r7
 800172a:	e625      	b.n	8001378 <__aeabi_dsub+0x18c>
 800172c:	003d      	movs	r5, r7
 800172e:	4661      	mov	r1, ip
 8001730:	4691      	mov	r9, r2
 8001732:	e678      	b.n	8001426 <__aeabi_dsub+0x23a>
 8001734:	000b      	movs	r3, r1
 8001736:	4303      	orrs	r3, r0
 8001738:	2d00      	cmp	r5, #0
 800173a:	d000      	beq.n	800173e <__aeabi_dsub+0x552>
 800173c:	e655      	b.n	80013ea <__aeabi_dsub+0x1fe>
 800173e:	2b00      	cmp	r3, #0
 8001740:	d0f5      	beq.n	800172e <__aeabi_dsub+0x542>
 8001742:	4663      	mov	r3, ip
 8001744:	4313      	orrs	r3, r2
 8001746:	d100      	bne.n	800174a <__aeabi_dsub+0x55e>
 8001748:	e66d      	b.n	8001426 <__aeabi_dsub+0x23a>
 800174a:	1886      	adds	r6, r0, r2
 800174c:	4286      	cmp	r6, r0
 800174e:	4180      	sbcs	r0, r0
 8001750:	4461      	add	r1, ip
 8001752:	4240      	negs	r0, r0
 8001754:	1809      	adds	r1, r1, r0
 8001756:	2200      	movs	r2, #0
 8001758:	020b      	lsls	r3, r1, #8
 800175a:	d400      	bmi.n	800175e <__aeabi_dsub+0x572>
 800175c:	e6d0      	b.n	8001500 <__aeabi_dsub+0x314>
 800175e:	4b46      	ldr	r3, [pc, #280]	; (8001878 <__aeabi_dsub+0x68c>)
 8001760:	3501      	adds	r5, #1
 8001762:	4019      	ands	r1, r3
 8001764:	e5b2      	b.n	80012cc <__aeabi_dsub+0xe0>
 8001766:	46b1      	mov	r9, r6
 8001768:	e65d      	b.n	8001426 <__aeabi_dsub+0x23a>
 800176a:	0033      	movs	r3, r6
 800176c:	4667      	mov	r7, ip
 800176e:	3b20      	subs	r3, #32
 8001770:	40df      	lsrs	r7, r3
 8001772:	003b      	movs	r3, r7
 8001774:	2e20      	cmp	r6, #32
 8001776:	d005      	beq.n	8001784 <__aeabi_dsub+0x598>
 8001778:	2740      	movs	r7, #64	; 0x40
 800177a:	1bbf      	subs	r7, r7, r6
 800177c:	4666      	mov	r6, ip
 800177e:	40be      	lsls	r6, r7
 8001780:	4332      	orrs	r2, r6
 8001782:	4690      	mov	r8, r2
 8001784:	4646      	mov	r6, r8
 8001786:	1e72      	subs	r2, r6, #1
 8001788:	4196      	sbcs	r6, r2
 800178a:	4333      	orrs	r3, r6
 800178c:	e5ef      	b.n	800136e <__aeabi_dsub+0x182>
 800178e:	4b39      	ldr	r3, [pc, #228]	; (8001874 <__aeabi_dsub+0x688>)
 8001790:	429f      	cmp	r7, r3
 8001792:	d0cb      	beq.n	800172c <__aeabi_dsub+0x540>
 8001794:	2580      	movs	r5, #128	; 0x80
 8001796:	042d      	lsls	r5, r5, #16
 8001798:	4273      	negs	r3, r6
 800179a:	4329      	orrs	r1, r5
 800179c:	e7a8      	b.n	80016f0 <__aeabi_dsub+0x504>
 800179e:	4308      	orrs	r0, r1
 80017a0:	1e41      	subs	r1, r0, #1
 80017a2:	4188      	sbcs	r0, r1
 80017a4:	e6a2      	b.n	80014ec <__aeabi_dsub+0x300>
 80017a6:	2f00      	cmp	r7, #0
 80017a8:	d100      	bne.n	80017ac <__aeabi_dsub+0x5c0>
 80017aa:	e63c      	b.n	8001426 <__aeabi_dsub+0x23a>
 80017ac:	4663      	mov	r3, ip
 80017ae:	1a86      	subs	r6, r0, r2
 80017b0:	1acf      	subs	r7, r1, r3
 80017b2:	42b0      	cmp	r0, r6
 80017b4:	419b      	sbcs	r3, r3
 80017b6:	425b      	negs	r3, r3
 80017b8:	1afb      	subs	r3, r7, r3
 80017ba:	4698      	mov	r8, r3
 80017bc:	021b      	lsls	r3, r3, #8
 80017be:	d54e      	bpl.n	800185e <__aeabi_dsub+0x672>
 80017c0:	1a16      	subs	r6, r2, r0
 80017c2:	4663      	mov	r3, ip
 80017c4:	42b2      	cmp	r2, r6
 80017c6:	4192      	sbcs	r2, r2
 80017c8:	1a59      	subs	r1, r3, r1
 80017ca:	4252      	negs	r2, r2
 80017cc:	1a89      	subs	r1, r1, r2
 80017ce:	465c      	mov	r4, fp
 80017d0:	2200      	movs	r2, #0
 80017d2:	e57b      	b.n	80012cc <__aeabi_dsub+0xe0>
 80017d4:	4301      	orrs	r1, r0
 80017d6:	000e      	movs	r6, r1
 80017d8:	1e71      	subs	r1, r6, #1
 80017da:	418e      	sbcs	r6, r1
 80017dc:	e79f      	b.n	800171e <__aeabi_dsub+0x532>
 80017de:	001d      	movs	r5, r3
 80017e0:	000e      	movs	r6, r1
 80017e2:	3d20      	subs	r5, #32
 80017e4:	40ee      	lsrs	r6, r5
 80017e6:	46b0      	mov	r8, r6
 80017e8:	2b20      	cmp	r3, #32
 80017ea:	d004      	beq.n	80017f6 <__aeabi_dsub+0x60a>
 80017ec:	2540      	movs	r5, #64	; 0x40
 80017ee:	1aeb      	subs	r3, r5, r3
 80017f0:	4099      	lsls	r1, r3
 80017f2:	4308      	orrs	r0, r1
 80017f4:	4681      	mov	r9, r0
 80017f6:	4648      	mov	r0, r9
 80017f8:	4643      	mov	r3, r8
 80017fa:	1e41      	subs	r1, r0, #1
 80017fc:	4188      	sbcs	r0, r1
 80017fe:	4318      	orrs	r0, r3
 8001800:	e674      	b.n	80014ec <__aeabi_dsub+0x300>
 8001802:	2200      	movs	r2, #0
 8001804:	2400      	movs	r4, #0
 8001806:	e617      	b.n	8001438 <__aeabi_dsub+0x24c>
 8001808:	1a16      	subs	r6, r2, r0
 800180a:	4663      	mov	r3, ip
 800180c:	42b2      	cmp	r2, r6
 800180e:	4192      	sbcs	r2, r2
 8001810:	1a59      	subs	r1, r3, r1
 8001812:	4252      	negs	r2, r2
 8001814:	1a89      	subs	r1, r1, r2
 8001816:	003d      	movs	r5, r7
 8001818:	e525      	b.n	8001266 <__aeabi_dsub+0x7a>
 800181a:	4661      	mov	r1, ip
 800181c:	4691      	mov	r9, r2
 800181e:	4d15      	ldr	r5, [pc, #84]	; (8001874 <__aeabi_dsub+0x688>)
 8001820:	e601      	b.n	8001426 <__aeabi_dsub+0x23a>
 8001822:	2280      	movs	r2, #128	; 0x80
 8001824:	2400      	movs	r4, #0
 8001826:	0312      	lsls	r2, r2, #12
 8001828:	e679      	b.n	800151e <__aeabi_dsub+0x332>
 800182a:	001d      	movs	r5, r3
 800182c:	000e      	movs	r6, r1
 800182e:	3d20      	subs	r5, #32
 8001830:	40ee      	lsrs	r6, r5
 8001832:	46b0      	mov	r8, r6
 8001834:	2b20      	cmp	r3, #32
 8001836:	d004      	beq.n	8001842 <__aeabi_dsub+0x656>
 8001838:	2540      	movs	r5, #64	; 0x40
 800183a:	1aeb      	subs	r3, r5, r3
 800183c:	4099      	lsls	r1, r3
 800183e:	4308      	orrs	r0, r1
 8001840:	4681      	mov	r9, r0
 8001842:	464e      	mov	r6, r9
 8001844:	4643      	mov	r3, r8
 8001846:	1e71      	subs	r1, r6, #1
 8001848:	418e      	sbcs	r6, r1
 800184a:	431e      	orrs	r6, r3
 800184c:	e767      	b.n	800171e <__aeabi_dsub+0x532>
 800184e:	1886      	adds	r6, r0, r2
 8001850:	4296      	cmp	r6, r2
 8001852:	419b      	sbcs	r3, r3
 8001854:	4461      	add	r1, ip
 8001856:	425b      	negs	r3, r3
 8001858:	18c9      	adds	r1, r1, r3
 800185a:	003d      	movs	r5, r7
 800185c:	e58c      	b.n	8001378 <__aeabi_dsub+0x18c>
 800185e:	4647      	mov	r7, r8
 8001860:	4337      	orrs	r7, r6
 8001862:	d0ce      	beq.n	8001802 <__aeabi_dsub+0x616>
 8001864:	2207      	movs	r2, #7
 8001866:	4641      	mov	r1, r8
 8001868:	4032      	ands	r2, r6
 800186a:	e649      	b.n	8001500 <__aeabi_dsub+0x314>
 800186c:	2700      	movs	r7, #0
 800186e:	003a      	movs	r2, r7
 8001870:	e5e6      	b.n	8001440 <__aeabi_dsub+0x254>
 8001872:	46c0      	nop			; (mov r8, r8)
 8001874:	000007ff 	.word	0x000007ff
 8001878:	ff7fffff 	.word	0xff7fffff

0800187c <__aeabi_d2iz>:
 800187c:	b530      	push	{r4, r5, lr}
 800187e:	4d14      	ldr	r5, [pc, #80]	; (80018d0 <__aeabi_d2iz+0x54>)
 8001880:	030a      	lsls	r2, r1, #12
 8001882:	004b      	lsls	r3, r1, #1
 8001884:	0b12      	lsrs	r2, r2, #12
 8001886:	0d5b      	lsrs	r3, r3, #21
 8001888:	0fc9      	lsrs	r1, r1, #31
 800188a:	2400      	movs	r4, #0
 800188c:	42ab      	cmp	r3, r5
 800188e:	dd11      	ble.n	80018b4 <__aeabi_d2iz+0x38>
 8001890:	4c10      	ldr	r4, [pc, #64]	; (80018d4 <__aeabi_d2iz+0x58>)
 8001892:	42a3      	cmp	r3, r4
 8001894:	dc10      	bgt.n	80018b8 <__aeabi_d2iz+0x3c>
 8001896:	2480      	movs	r4, #128	; 0x80
 8001898:	0364      	lsls	r4, r4, #13
 800189a:	4322      	orrs	r2, r4
 800189c:	4c0e      	ldr	r4, [pc, #56]	; (80018d8 <__aeabi_d2iz+0x5c>)
 800189e:	1ae4      	subs	r4, r4, r3
 80018a0:	2c1f      	cmp	r4, #31
 80018a2:	dd0c      	ble.n	80018be <__aeabi_d2iz+0x42>
 80018a4:	480d      	ldr	r0, [pc, #52]	; (80018dc <__aeabi_d2iz+0x60>)
 80018a6:	1ac3      	subs	r3, r0, r3
 80018a8:	40da      	lsrs	r2, r3
 80018aa:	0013      	movs	r3, r2
 80018ac:	425c      	negs	r4, r3
 80018ae:	2900      	cmp	r1, #0
 80018b0:	d100      	bne.n	80018b4 <__aeabi_d2iz+0x38>
 80018b2:	001c      	movs	r4, r3
 80018b4:	0020      	movs	r0, r4
 80018b6:	bd30      	pop	{r4, r5, pc}
 80018b8:	4b09      	ldr	r3, [pc, #36]	; (80018e0 <__aeabi_d2iz+0x64>)
 80018ba:	18cc      	adds	r4, r1, r3
 80018bc:	e7fa      	b.n	80018b4 <__aeabi_d2iz+0x38>
 80018be:	4d09      	ldr	r5, [pc, #36]	; (80018e4 <__aeabi_d2iz+0x68>)
 80018c0:	40e0      	lsrs	r0, r4
 80018c2:	46ac      	mov	ip, r5
 80018c4:	4463      	add	r3, ip
 80018c6:	409a      	lsls	r2, r3
 80018c8:	0013      	movs	r3, r2
 80018ca:	4303      	orrs	r3, r0
 80018cc:	e7ee      	b.n	80018ac <__aeabi_d2iz+0x30>
 80018ce:	46c0      	nop			; (mov r8, r8)
 80018d0:	000003fe 	.word	0x000003fe
 80018d4:	0000041d 	.word	0x0000041d
 80018d8:	00000433 	.word	0x00000433
 80018dc:	00000413 	.word	0x00000413
 80018e0:	7fffffff 	.word	0x7fffffff
 80018e4:	fffffbed 	.word	0xfffffbed

080018e8 <__aeabi_i2d>:
 80018e8:	b570      	push	{r4, r5, r6, lr}
 80018ea:	2800      	cmp	r0, #0
 80018ec:	d02d      	beq.n	800194a <__aeabi_i2d+0x62>
 80018ee:	17c3      	asrs	r3, r0, #31
 80018f0:	18c5      	adds	r5, r0, r3
 80018f2:	405d      	eors	r5, r3
 80018f4:	0fc4      	lsrs	r4, r0, #31
 80018f6:	0028      	movs	r0, r5
 80018f8:	f000 f882 	bl	8001a00 <__clzsi2>
 80018fc:	4b15      	ldr	r3, [pc, #84]	; (8001954 <__aeabi_i2d+0x6c>)
 80018fe:	1a1b      	subs	r3, r3, r0
 8001900:	055b      	lsls	r3, r3, #21
 8001902:	0d5b      	lsrs	r3, r3, #21
 8001904:	280a      	cmp	r0, #10
 8001906:	dd15      	ble.n	8001934 <__aeabi_i2d+0x4c>
 8001908:	380b      	subs	r0, #11
 800190a:	4085      	lsls	r5, r0
 800190c:	2200      	movs	r2, #0
 800190e:	032d      	lsls	r5, r5, #12
 8001910:	0b2d      	lsrs	r5, r5, #12
 8001912:	2100      	movs	r1, #0
 8001914:	0010      	movs	r0, r2
 8001916:	032d      	lsls	r5, r5, #12
 8001918:	0d0a      	lsrs	r2, r1, #20
 800191a:	0b2d      	lsrs	r5, r5, #12
 800191c:	0512      	lsls	r2, r2, #20
 800191e:	432a      	orrs	r2, r5
 8001920:	4d0d      	ldr	r5, [pc, #52]	; (8001958 <__aeabi_i2d+0x70>)
 8001922:	051b      	lsls	r3, r3, #20
 8001924:	402a      	ands	r2, r5
 8001926:	4313      	orrs	r3, r2
 8001928:	005b      	lsls	r3, r3, #1
 800192a:	07e4      	lsls	r4, r4, #31
 800192c:	085b      	lsrs	r3, r3, #1
 800192e:	4323      	orrs	r3, r4
 8001930:	0019      	movs	r1, r3
 8001932:	bd70      	pop	{r4, r5, r6, pc}
 8001934:	0002      	movs	r2, r0
 8001936:	0029      	movs	r1, r5
 8001938:	3215      	adds	r2, #21
 800193a:	4091      	lsls	r1, r2
 800193c:	000a      	movs	r2, r1
 800193e:	210b      	movs	r1, #11
 8001940:	1a08      	subs	r0, r1, r0
 8001942:	40c5      	lsrs	r5, r0
 8001944:	032d      	lsls	r5, r5, #12
 8001946:	0b2d      	lsrs	r5, r5, #12
 8001948:	e7e3      	b.n	8001912 <__aeabi_i2d+0x2a>
 800194a:	2400      	movs	r4, #0
 800194c:	2300      	movs	r3, #0
 800194e:	2500      	movs	r5, #0
 8001950:	2200      	movs	r2, #0
 8001952:	e7de      	b.n	8001912 <__aeabi_i2d+0x2a>
 8001954:	0000041e 	.word	0x0000041e
 8001958:	800fffff 	.word	0x800fffff

0800195c <__aeabi_f2d>:
 800195c:	0041      	lsls	r1, r0, #1
 800195e:	0e09      	lsrs	r1, r1, #24
 8001960:	1c4b      	adds	r3, r1, #1
 8001962:	b570      	push	{r4, r5, r6, lr}
 8001964:	b2db      	uxtb	r3, r3
 8001966:	0246      	lsls	r6, r0, #9
 8001968:	0a75      	lsrs	r5, r6, #9
 800196a:	0fc4      	lsrs	r4, r0, #31
 800196c:	2b01      	cmp	r3, #1
 800196e:	dd14      	ble.n	800199a <__aeabi_f2d+0x3e>
 8001970:	23e0      	movs	r3, #224	; 0xe0
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	076d      	lsls	r5, r5, #29
 8001976:	0b36      	lsrs	r6, r6, #12
 8001978:	18cb      	adds	r3, r1, r3
 800197a:	2100      	movs	r1, #0
 800197c:	0d0a      	lsrs	r2, r1, #20
 800197e:	0028      	movs	r0, r5
 8001980:	0512      	lsls	r2, r2, #20
 8001982:	4d1c      	ldr	r5, [pc, #112]	; (80019f4 <__aeabi_f2d+0x98>)
 8001984:	4332      	orrs	r2, r6
 8001986:	055b      	lsls	r3, r3, #21
 8001988:	402a      	ands	r2, r5
 800198a:	085b      	lsrs	r3, r3, #1
 800198c:	4313      	orrs	r3, r2
 800198e:	005b      	lsls	r3, r3, #1
 8001990:	07e4      	lsls	r4, r4, #31
 8001992:	085b      	lsrs	r3, r3, #1
 8001994:	4323      	orrs	r3, r4
 8001996:	0019      	movs	r1, r3
 8001998:	bd70      	pop	{r4, r5, r6, pc}
 800199a:	2900      	cmp	r1, #0
 800199c:	d114      	bne.n	80019c8 <__aeabi_f2d+0x6c>
 800199e:	2d00      	cmp	r5, #0
 80019a0:	d01e      	beq.n	80019e0 <__aeabi_f2d+0x84>
 80019a2:	0028      	movs	r0, r5
 80019a4:	f000 f82c 	bl	8001a00 <__clzsi2>
 80019a8:	280a      	cmp	r0, #10
 80019aa:	dc1c      	bgt.n	80019e6 <__aeabi_f2d+0x8a>
 80019ac:	230b      	movs	r3, #11
 80019ae:	002a      	movs	r2, r5
 80019b0:	1a1b      	subs	r3, r3, r0
 80019b2:	40da      	lsrs	r2, r3
 80019b4:	0003      	movs	r3, r0
 80019b6:	3315      	adds	r3, #21
 80019b8:	409d      	lsls	r5, r3
 80019ba:	4b0f      	ldr	r3, [pc, #60]	; (80019f8 <__aeabi_f2d+0x9c>)
 80019bc:	0312      	lsls	r2, r2, #12
 80019be:	1a1b      	subs	r3, r3, r0
 80019c0:	055b      	lsls	r3, r3, #21
 80019c2:	0b16      	lsrs	r6, r2, #12
 80019c4:	0d5b      	lsrs	r3, r3, #21
 80019c6:	e7d8      	b.n	800197a <__aeabi_f2d+0x1e>
 80019c8:	2d00      	cmp	r5, #0
 80019ca:	d006      	beq.n	80019da <__aeabi_f2d+0x7e>
 80019cc:	0b32      	lsrs	r2, r6, #12
 80019ce:	2680      	movs	r6, #128	; 0x80
 80019d0:	0336      	lsls	r6, r6, #12
 80019d2:	076d      	lsls	r5, r5, #29
 80019d4:	4316      	orrs	r6, r2
 80019d6:	4b09      	ldr	r3, [pc, #36]	; (80019fc <__aeabi_f2d+0xa0>)
 80019d8:	e7cf      	b.n	800197a <__aeabi_f2d+0x1e>
 80019da:	4b08      	ldr	r3, [pc, #32]	; (80019fc <__aeabi_f2d+0xa0>)
 80019dc:	2600      	movs	r6, #0
 80019de:	e7cc      	b.n	800197a <__aeabi_f2d+0x1e>
 80019e0:	2300      	movs	r3, #0
 80019e2:	2600      	movs	r6, #0
 80019e4:	e7c9      	b.n	800197a <__aeabi_f2d+0x1e>
 80019e6:	0003      	movs	r3, r0
 80019e8:	002a      	movs	r2, r5
 80019ea:	3b0b      	subs	r3, #11
 80019ec:	409a      	lsls	r2, r3
 80019ee:	2500      	movs	r5, #0
 80019f0:	e7e3      	b.n	80019ba <__aeabi_f2d+0x5e>
 80019f2:	46c0      	nop			; (mov r8, r8)
 80019f4:	800fffff 	.word	0x800fffff
 80019f8:	00000389 	.word	0x00000389
 80019fc:	000007ff 	.word	0x000007ff

08001a00 <__clzsi2>:
 8001a00:	211c      	movs	r1, #28
 8001a02:	2301      	movs	r3, #1
 8001a04:	041b      	lsls	r3, r3, #16
 8001a06:	4298      	cmp	r0, r3
 8001a08:	d301      	bcc.n	8001a0e <__clzsi2+0xe>
 8001a0a:	0c00      	lsrs	r0, r0, #16
 8001a0c:	3910      	subs	r1, #16
 8001a0e:	0a1b      	lsrs	r3, r3, #8
 8001a10:	4298      	cmp	r0, r3
 8001a12:	d301      	bcc.n	8001a18 <__clzsi2+0x18>
 8001a14:	0a00      	lsrs	r0, r0, #8
 8001a16:	3908      	subs	r1, #8
 8001a18:	091b      	lsrs	r3, r3, #4
 8001a1a:	4298      	cmp	r0, r3
 8001a1c:	d301      	bcc.n	8001a22 <__clzsi2+0x22>
 8001a1e:	0900      	lsrs	r0, r0, #4
 8001a20:	3904      	subs	r1, #4
 8001a22:	a202      	add	r2, pc, #8	; (adr r2, 8001a2c <__clzsi2+0x2c>)
 8001a24:	5c10      	ldrb	r0, [r2, r0]
 8001a26:	1840      	adds	r0, r0, r1
 8001a28:	4770      	bx	lr
 8001a2a:	46c0      	nop			; (mov r8, r8)
 8001a2c:	02020304 	.word	0x02020304
 8001a30:	01010101 	.word	0x01010101
	...

08001a3c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001a3c:	b590      	push	{r4, r7, lr}
 8001a3e:	b08b      	sub	sp, #44	; 0x2c
 8001a40:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a42:	2414      	movs	r4, #20
 8001a44:	193b      	adds	r3, r7, r4
 8001a46:	0018      	movs	r0, r3
 8001a48:	2314      	movs	r3, #20
 8001a4a:	001a      	movs	r2, r3
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	f003 f897 	bl	8004b80 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a52:	4b34      	ldr	r3, [pc, #208]	; (8001b24 <MX_GPIO_Init+0xe8>)
 8001a54:	695a      	ldr	r2, [r3, #20]
 8001a56:	4b33      	ldr	r3, [pc, #204]	; (8001b24 <MX_GPIO_Init+0xe8>)
 8001a58:	2180      	movs	r1, #128	; 0x80
 8001a5a:	03c9      	lsls	r1, r1, #15
 8001a5c:	430a      	orrs	r2, r1
 8001a5e:	615a      	str	r2, [r3, #20]
 8001a60:	4b30      	ldr	r3, [pc, #192]	; (8001b24 <MX_GPIO_Init+0xe8>)
 8001a62:	695a      	ldr	r2, [r3, #20]
 8001a64:	2380      	movs	r3, #128	; 0x80
 8001a66:	03db      	lsls	r3, r3, #15
 8001a68:	4013      	ands	r3, r2
 8001a6a:	613b      	str	r3, [r7, #16]
 8001a6c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a6e:	4b2d      	ldr	r3, [pc, #180]	; (8001b24 <MX_GPIO_Init+0xe8>)
 8001a70:	695a      	ldr	r2, [r3, #20]
 8001a72:	4b2c      	ldr	r3, [pc, #176]	; (8001b24 <MX_GPIO_Init+0xe8>)
 8001a74:	2180      	movs	r1, #128	; 0x80
 8001a76:	0289      	lsls	r1, r1, #10
 8001a78:	430a      	orrs	r2, r1
 8001a7a:	615a      	str	r2, [r3, #20]
 8001a7c:	4b29      	ldr	r3, [pc, #164]	; (8001b24 <MX_GPIO_Init+0xe8>)
 8001a7e:	695a      	ldr	r2, [r3, #20]
 8001a80:	2380      	movs	r3, #128	; 0x80
 8001a82:	029b      	lsls	r3, r3, #10
 8001a84:	4013      	ands	r3, r2
 8001a86:	60fb      	str	r3, [r7, #12]
 8001a88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a8a:	4b26      	ldr	r3, [pc, #152]	; (8001b24 <MX_GPIO_Init+0xe8>)
 8001a8c:	695a      	ldr	r2, [r3, #20]
 8001a8e:	4b25      	ldr	r3, [pc, #148]	; (8001b24 <MX_GPIO_Init+0xe8>)
 8001a90:	2180      	movs	r1, #128	; 0x80
 8001a92:	0309      	lsls	r1, r1, #12
 8001a94:	430a      	orrs	r2, r1
 8001a96:	615a      	str	r2, [r3, #20]
 8001a98:	4b22      	ldr	r3, [pc, #136]	; (8001b24 <MX_GPIO_Init+0xe8>)
 8001a9a:	695a      	ldr	r2, [r3, #20]
 8001a9c:	2380      	movs	r3, #128	; 0x80
 8001a9e:	031b      	lsls	r3, r3, #12
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	60bb      	str	r3, [r7, #8]
 8001aa4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aa6:	4b1f      	ldr	r3, [pc, #124]	; (8001b24 <MX_GPIO_Init+0xe8>)
 8001aa8:	695a      	ldr	r2, [r3, #20]
 8001aaa:	4b1e      	ldr	r3, [pc, #120]	; (8001b24 <MX_GPIO_Init+0xe8>)
 8001aac:	2180      	movs	r1, #128	; 0x80
 8001aae:	02c9      	lsls	r1, r1, #11
 8001ab0:	430a      	orrs	r2, r1
 8001ab2:	615a      	str	r2, [r3, #20]
 8001ab4:	4b1b      	ldr	r3, [pc, #108]	; (8001b24 <MX_GPIO_Init+0xe8>)
 8001ab6:	695a      	ldr	r2, [r3, #20]
 8001ab8:	2380      	movs	r3, #128	; 0x80
 8001aba:	02db      	lsls	r3, r3, #11
 8001abc:	4013      	ands	r3, r2
 8001abe:	607b      	str	r3, [r7, #4]
 8001ac0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001ac2:	2380      	movs	r3, #128	; 0x80
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	4818      	ldr	r0, [pc, #96]	; (8001b28 <MX_GPIO_Init+0xec>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	0019      	movs	r1, r3
 8001acc:	f000 fe42 	bl	8002754 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001ad0:	193b      	adds	r3, r7, r4
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001ad6:	193b      	adds	r3, r7, r4
 8001ad8:	2290      	movs	r2, #144	; 0x90
 8001ada:	0352      	lsls	r2, r2, #13
 8001adc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ade:	193b      	adds	r3, r7, r4
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001ae4:	193a      	adds	r2, r7, r4
 8001ae6:	2390      	movs	r3, #144	; 0x90
 8001ae8:	05db      	lsls	r3, r3, #23
 8001aea:	0011      	movs	r1, r2
 8001aec:	0018      	movs	r0, r3
 8001aee:	f000 fcc1 	bl	8002474 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8001af2:	0021      	movs	r1, r4
 8001af4:	187b      	adds	r3, r7, r1
 8001af6:	2280      	movs	r2, #128	; 0x80
 8001af8:	0092      	lsls	r2, r2, #2
 8001afa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001afc:	187b      	adds	r3, r7, r1
 8001afe:	2201      	movs	r2, #1
 8001b00:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b02:	187b      	adds	r3, r7, r1
 8001b04:	2200      	movs	r2, #0
 8001b06:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b08:	187b      	adds	r3, r7, r1
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8001b0e:	187b      	adds	r3, r7, r1
 8001b10:	4a05      	ldr	r2, [pc, #20]	; (8001b28 <MX_GPIO_Init+0xec>)
 8001b12:	0019      	movs	r1, r3
 8001b14:	0010      	movs	r0, r2
 8001b16:	f000 fcad 	bl	8002474 <HAL_GPIO_Init>

}
 8001b1a:	46c0      	nop			; (mov r8, r8)
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	b00b      	add	sp, #44	; 0x2c
 8001b20:	bd90      	pop	{r4, r7, pc}
 8001b22:	46c0      	nop			; (mov r8, r8)
 8001b24:	40021000 	.word	0x40021000
 8001b28:	48000800 	.word	0x48000800

08001b2c <create_sin_table>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void create_sin_table(uint16_t t[]){
 8001b2c:	b5b0      	push	{r4, r5, r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
	int i;
	for(i=0;i<MAX_PULSE;i++){
 8001b34:	2300      	movs	r3, #0
 8001b36:	60fb      	str	r3, [r7, #12]
 8001b38:	e037      	b.n	8001baa <create_sin_table+0x7e>
		/*	ARR = 200 for 10KHz freq	*/
		t[i] = (uint16_t)(200/2)+((99)*sin((PI/180)*angle_step_rate*i));
 8001b3a:	4b1f      	ldr	r3, [pc, #124]	; (8001bb8 <create_sin_table+0x8c>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	1c18      	adds	r0, r3, #0
 8001b40:	f7ff ff0c 	bl	800195c <__aeabi_f2d>
 8001b44:	4a1d      	ldr	r2, [pc, #116]	; (8001bbc <create_sin_table+0x90>)
 8001b46:	4b1e      	ldr	r3, [pc, #120]	; (8001bc0 <create_sin_table+0x94>)
 8001b48:	f7ff f8de 	bl	8000d08 <__aeabi_dmul>
 8001b4c:	0003      	movs	r3, r0
 8001b4e:	000c      	movs	r4, r1
 8001b50:	0025      	movs	r5, r4
 8001b52:	001c      	movs	r4, r3
 8001b54:	68f8      	ldr	r0, [r7, #12]
 8001b56:	f7ff fec7 	bl	80018e8 <__aeabi_i2d>
 8001b5a:	0002      	movs	r2, r0
 8001b5c:	000b      	movs	r3, r1
 8001b5e:	0020      	movs	r0, r4
 8001b60:	0029      	movs	r1, r5
 8001b62:	f7ff f8d1 	bl	8000d08 <__aeabi_dmul>
 8001b66:	0003      	movs	r3, r0
 8001b68:	000c      	movs	r4, r1
 8001b6a:	0018      	movs	r0, r3
 8001b6c:	0021      	movs	r1, r4
 8001b6e:	f003 f80f 	bl	8004b90 <sin>
 8001b72:	2200      	movs	r2, #0
 8001b74:	4b13      	ldr	r3, [pc, #76]	; (8001bc4 <create_sin_table+0x98>)
 8001b76:	f7ff f8c7 	bl	8000d08 <__aeabi_dmul>
 8001b7a:	0003      	movs	r3, r0
 8001b7c:	000c      	movs	r4, r1
 8001b7e:	0018      	movs	r0, r3
 8001b80:	0021      	movs	r1, r4
 8001b82:	2200      	movs	r2, #0
 8001b84:	4b10      	ldr	r3, [pc, #64]	; (8001bc8 <create_sin_table+0x9c>)
 8001b86:	f7fe fc9b 	bl	80004c0 <__aeabi_dadd>
 8001b8a:	0003      	movs	r3, r0
 8001b8c:	000c      	movs	r4, r1
 8001b8e:	0018      	movs	r0, r3
 8001b90:	0021      	movs	r1, r4
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	18d4      	adds	r4, r2, r3
 8001b9a:	f7fe fc73 	bl	8000484 <__aeabi_d2uiz>
 8001b9e:	0003      	movs	r3, r0
 8001ba0:	b29b      	uxth	r3, r3
 8001ba2:	8023      	strh	r3, [r4, #0]
	for(i=0;i<MAX_PULSE;i++){
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	60fb      	str	r3, [r7, #12]
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	2bc7      	cmp	r3, #199	; 0xc7
 8001bae:	ddc4      	ble.n	8001b3a <create_sin_table+0xe>
	}
}
 8001bb0:	46c0      	nop			; (mov r8, r8)
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	b004      	add	sp, #16
 8001bb6:	bdb0      	pop	{r4, r5, r7, pc}
 8001bb8:	20000000 	.word	0x20000000
 8001bbc:	d98b0955 	.word	0xd98b0955
 8001bc0:	3f91dcf4 	.word	0x3f91dcf4
 8001bc4:	4058c000 	.word	0x4058c000
 8001bc8:	40590000 	.word	0x40590000

08001bcc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001bd0:	f000 fb0e 	bl	80021f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001bd4:	f000 f822 	bl	8001c1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001bd8:	f7ff ff30 	bl	8001a3c <MX_GPIO_Init>
  MX_TIM1_Init();
 8001bdc:	f000 f8f0 	bl	8001dc0 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8001be0:	f000 fa38 	bl	8002054 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
//  HAL_TIMEx_PWMN_Start_IT(&htim1, TIM_CHANNEL_1);
  create_sin_table(sin_duty);
 8001be4:	4b0b      	ldr	r3, [pc, #44]	; (8001c14 <main+0x48>)
 8001be6:	0018      	movs	r0, r3
 8001be8:	f7ff ffa0 	bl	8001b2c <create_sin_table>
  HAL_TIM_Base_Start_IT(&htim1);
 8001bec:	4b0a      	ldr	r3, [pc, #40]	; (8001c18 <main+0x4c>)
 8001bee:	0018      	movs	r0, r3
 8001bf0:	f001 fb6a 	bl	80032c8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001bf4:	4b08      	ldr	r3, [pc, #32]	; (8001c18 <main+0x4c>)
 8001bf6:	2100      	movs	r1, #0
 8001bf8:	0018      	movs	r0, r3
 8001bfa:	f001 fc0f 	bl	800341c <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8001bfe:	4b06      	ldr	r3, [pc, #24]	; (8001c18 <main+0x4c>)
 8001c00:	2100      	movs	r1, #0
 8001c02:	0018      	movs	r0, r3
 8001c04:	f002 fac0 	bl	8004188 <HAL_TIMEx_PWMN_Start>
  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,10);
 8001c08:	4b03      	ldr	r3, [pc, #12]	; (8001c18 <main+0x4c>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	220a      	movs	r2, #10
 8001c0e:	635a      	str	r2, [r3, #52]	; 0x34

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001c10:	e7fe      	b.n	8001c10 <main+0x44>
 8001c12:	46c0      	nop			; (mov r8, r8)
 8001c14:	20000030 	.word	0x20000030
 8001c18:	20000350 	.word	0x20000350

08001c1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c1c:	b590      	push	{r4, r7, lr}
 8001c1e:	b097      	sub	sp, #92	; 0x5c
 8001c20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c22:	2428      	movs	r4, #40	; 0x28
 8001c24:	193b      	adds	r3, r7, r4
 8001c26:	0018      	movs	r0, r3
 8001c28:	2330      	movs	r3, #48	; 0x30
 8001c2a:	001a      	movs	r2, r3
 8001c2c:	2100      	movs	r1, #0
 8001c2e:	f002 ffa7 	bl	8004b80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c32:	2318      	movs	r3, #24
 8001c34:	18fb      	adds	r3, r7, r3
 8001c36:	0018      	movs	r0, r3
 8001c38:	2310      	movs	r3, #16
 8001c3a:	001a      	movs	r2, r3
 8001c3c:	2100      	movs	r1, #0
 8001c3e:	f002 ff9f 	bl	8004b80 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c42:	1d3b      	adds	r3, r7, #4
 8001c44:	0018      	movs	r0, r3
 8001c46:	2314      	movs	r3, #20
 8001c48:	001a      	movs	r2, r3
 8001c4a:	2100      	movs	r1, #0
 8001c4c:	f002 ff98 	bl	8004b80 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c50:	0021      	movs	r1, r4
 8001c52:	187b      	adds	r3, r7, r1
 8001c54:	2201      	movs	r2, #1
 8001c56:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c58:	187b      	adds	r3, r7, r1
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c5e:	187b      	adds	r3, r7, r1
 8001c60:	2202      	movs	r2, #2
 8001c62:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c64:	187b      	adds	r3, r7, r1
 8001c66:	2280      	movs	r2, #128	; 0x80
 8001c68:	0252      	lsls	r2, r2, #9
 8001c6a:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001c6c:	187b      	adds	r3, r7, r1
 8001c6e:	2280      	movs	r2, #128	; 0x80
 8001c70:	0352      	lsls	r2, r2, #13
 8001c72:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001c74:	187b      	adds	r3, r7, r1
 8001c76:	2200      	movs	r2, #0
 8001c78:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c7a:	187b      	adds	r3, r7, r1
 8001c7c:	0018      	movs	r0, r3
 8001c7e:	f000 fd87 	bl	8002790 <HAL_RCC_OscConfig>
 8001c82:	1e03      	subs	r3, r0, #0
 8001c84:	d001      	beq.n	8001c8a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001c86:	f000 f828 	bl	8001cda <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c8a:	2118      	movs	r1, #24
 8001c8c:	187b      	adds	r3, r7, r1
 8001c8e:	2207      	movs	r2, #7
 8001c90:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c92:	187b      	adds	r3, r7, r1
 8001c94:	2202      	movs	r2, #2
 8001c96:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c98:	187b      	adds	r3, r7, r1
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001c9e:	187b      	adds	r3, r7, r1
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001ca4:	187b      	adds	r3, r7, r1
 8001ca6:	2101      	movs	r1, #1
 8001ca8:	0018      	movs	r0, r3
 8001caa:	f001 f88d 	bl	8002dc8 <HAL_RCC_ClockConfig>
 8001cae:	1e03      	subs	r3, r0, #0
 8001cb0:	d001      	beq.n	8001cb6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001cb2:	f000 f812 	bl	8001cda <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001cb6:	1d3b      	adds	r3, r7, #4
 8001cb8:	2201      	movs	r2, #1
 8001cba:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001cbc:	1d3b      	adds	r3, r7, #4
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cc2:	1d3b      	adds	r3, r7, #4
 8001cc4:	0018      	movs	r0, r3
 8001cc6:	f001 f9d1 	bl	800306c <HAL_RCCEx_PeriphCLKConfig>
 8001cca:	1e03      	subs	r3, r0, #0
 8001ccc:	d001      	beq.n	8001cd2 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8001cce:	f000 f804 	bl	8001cda <Error_Handler>
  }
}
 8001cd2:	46c0      	nop			; (mov r8, r8)
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	b017      	add	sp, #92	; 0x5c
 8001cd8:	bd90      	pop	{r4, r7, pc}

08001cda <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cda:	b580      	push	{r7, lr}
 8001cdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001cde:	46c0      	nop			; (mov r8, r8)
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cea:	4b0f      	ldr	r3, [pc, #60]	; (8001d28 <HAL_MspInit+0x44>)
 8001cec:	699a      	ldr	r2, [r3, #24]
 8001cee:	4b0e      	ldr	r3, [pc, #56]	; (8001d28 <HAL_MspInit+0x44>)
 8001cf0:	2101      	movs	r1, #1
 8001cf2:	430a      	orrs	r2, r1
 8001cf4:	619a      	str	r2, [r3, #24]
 8001cf6:	4b0c      	ldr	r3, [pc, #48]	; (8001d28 <HAL_MspInit+0x44>)
 8001cf8:	699b      	ldr	r3, [r3, #24]
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	607b      	str	r3, [r7, #4]
 8001d00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d02:	4b09      	ldr	r3, [pc, #36]	; (8001d28 <HAL_MspInit+0x44>)
 8001d04:	69da      	ldr	r2, [r3, #28]
 8001d06:	4b08      	ldr	r3, [pc, #32]	; (8001d28 <HAL_MspInit+0x44>)
 8001d08:	2180      	movs	r1, #128	; 0x80
 8001d0a:	0549      	lsls	r1, r1, #21
 8001d0c:	430a      	orrs	r2, r1
 8001d0e:	61da      	str	r2, [r3, #28]
 8001d10:	4b05      	ldr	r3, [pc, #20]	; (8001d28 <HAL_MspInit+0x44>)
 8001d12:	69da      	ldr	r2, [r3, #28]
 8001d14:	2380      	movs	r3, #128	; 0x80
 8001d16:	055b      	lsls	r3, r3, #21
 8001d18:	4013      	ands	r3, r2
 8001d1a:	603b      	str	r3, [r7, #0]
 8001d1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d1e:	46c0      	nop			; (mov r8, r8)
 8001d20:	46bd      	mov	sp, r7
 8001d22:	b002      	add	sp, #8
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	46c0      	nop			; (mov r8, r8)
 8001d28:	40021000 	.word	0x40021000

08001d2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001d30:	46c0      	nop			; (mov r8, r8)
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}

08001d36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d36:	b580      	push	{r7, lr}
 8001d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d3a:	e7fe      	b.n	8001d3a <HardFault_Handler+0x4>

08001d3c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001d40:	46c0      	nop			; (mov r8, r8)
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}

08001d46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d46:	b580      	push	{r7, lr}
 8001d48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d4a:	46c0      	nop			; (mov r8, r8)
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}

08001d50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d54:	f000 fa94 	bl	8002280 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d58:	46c0      	nop			; (mov r8, r8)
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
	...

08001d60 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */
	  cur_pulse++;
 8001d64:	4b0f      	ldr	r3, [pc, #60]	; (8001da4 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x44>)
 8001d66:	881b      	ldrh	r3, [r3, #0]
 8001d68:	3301      	adds	r3, #1
 8001d6a:	b29a      	uxth	r2, r3
 8001d6c:	4b0d      	ldr	r3, [pc, #52]	; (8001da4 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x44>)
 8001d6e:	801a      	strh	r2, [r3, #0]
//	  			duty++;
//	  	}else if(cur_pulse >200 && cur_pulse < 400){
//	  		if(duty > 4)
//	  			duty--;
//	  	}
	  	if(cur_pulse >=200){
 8001d70:	4b0c      	ldr	r3, [pc, #48]	; (8001da4 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x44>)
 8001d72:	881b      	ldrh	r3, [r3, #0]
 8001d74:	2bc7      	cmp	r3, #199	; 0xc7
 8001d76:	d905      	bls.n	8001d84 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x24>
	  		cur_pulse = 0;
 8001d78:	4b0a      	ldr	r3, [pc, #40]	; (8001da4 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x44>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	801a      	strh	r2, [r3, #0]
	  		duty = 2;
 8001d7e:	4b0a      	ldr	r3, [pc, #40]	; (8001da8 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x48>)
 8001d80:	2202      	movs	r2, #2
 8001d82:	801a      	strh	r2, [r3, #0]
	  	}
//	  	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,duty);
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,sin_duty[cur_pulse]);
 8001d84:	4b07      	ldr	r3, [pc, #28]	; (8001da4 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x44>)
 8001d86:	881b      	ldrh	r3, [r3, #0]
 8001d88:	001a      	movs	r2, r3
 8001d8a:	4b08      	ldr	r3, [pc, #32]	; (8001dac <TIM1_BRK_UP_TRG_COM_IRQHandler+0x4c>)
 8001d8c:	0052      	lsls	r2, r2, #1
 8001d8e:	5ad2      	ldrh	r2, [r2, r3]
 8001d90:	4b07      	ldr	r3, [pc, #28]	; (8001db0 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x50>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	635a      	str	r2, [r3, #52]	; 0x34
  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001d96:	4b06      	ldr	r3, [pc, #24]	; (8001db0 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x50>)
 8001d98:	0018      	movs	r0, r3
 8001d9a:	f001 fbf7 	bl	800358c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8001d9e:	46c0      	nop			; (mov r8, r8)
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	2000002e 	.word	0x2000002e
 8001da8:	2000002c 	.word	0x2000002c
 8001dac:	20000030 	.word	0x20000030
 8001db0:	20000350 	.word	0x20000350

08001db4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001db8:	46c0      	nop			; (mov r8, r8)
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
	...

08001dc0 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b096      	sub	sp, #88	; 0x58
 8001dc4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dc6:	2348      	movs	r3, #72	; 0x48
 8001dc8:	18fb      	adds	r3, r7, r3
 8001dca:	0018      	movs	r0, r3
 8001dcc:	2310      	movs	r3, #16
 8001dce:	001a      	movs	r2, r3
 8001dd0:	2100      	movs	r1, #0
 8001dd2:	f002 fed5 	bl	8004b80 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dd6:	2340      	movs	r3, #64	; 0x40
 8001dd8:	18fb      	adds	r3, r7, r3
 8001dda:	0018      	movs	r0, r3
 8001ddc:	2308      	movs	r3, #8
 8001dde:	001a      	movs	r2, r3
 8001de0:	2100      	movs	r1, #0
 8001de2:	f002 fecd 	bl	8004b80 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001de6:	2324      	movs	r3, #36	; 0x24
 8001de8:	18fb      	adds	r3, r7, r3
 8001dea:	0018      	movs	r0, r3
 8001dec:	231c      	movs	r3, #28
 8001dee:	001a      	movs	r2, r3
 8001df0:	2100      	movs	r1, #0
 8001df2:	f002 fec5 	bl	8004b80 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001df6:	1d3b      	adds	r3, r7, #4
 8001df8:	0018      	movs	r0, r3
 8001dfa:	2320      	movs	r3, #32
 8001dfc:	001a      	movs	r2, r3
 8001dfe:	2100      	movs	r1, #0
 8001e00:	f002 febe 	bl	8004b80 <memset>

  htim1.Instance = TIM1;
 8001e04:	4b47      	ldr	r3, [pc, #284]	; (8001f24 <MX_TIM1_Init+0x164>)
 8001e06:	4a48      	ldr	r2, [pc, #288]	; (8001f28 <MX_TIM1_Init+0x168>)
 8001e08:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 12-1;
 8001e0a:	4b46      	ldr	r3, [pc, #280]	; (8001f24 <MX_TIM1_Init+0x164>)
 8001e0c:	220b      	movs	r2, #11
 8001e0e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001e10:	4b44      	ldr	r3, [pc, #272]	; (8001f24 <MX_TIM1_Init+0x164>)
 8001e12:	2220      	movs	r2, #32
 8001e14:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 200-1;
 8001e16:	4b43      	ldr	r3, [pc, #268]	; (8001f24 <MX_TIM1_Init+0x164>)
 8001e18:	22c7      	movs	r2, #199	; 0xc7
 8001e1a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e1c:	4b41      	ldr	r3, [pc, #260]	; (8001f24 <MX_TIM1_Init+0x164>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001e22:	4b40      	ldr	r3, [pc, #256]	; (8001f24 <MX_TIM1_Init+0x164>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e28:	4b3e      	ldr	r3, [pc, #248]	; (8001f24 <MX_TIM1_Init+0x164>)
 8001e2a:	2280      	movs	r2, #128	; 0x80
 8001e2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001e2e:	4b3d      	ldr	r3, [pc, #244]	; (8001f24 <MX_TIM1_Init+0x164>)
 8001e30:	0018      	movs	r0, r3
 8001e32:	f001 f9f9 	bl	8003228 <HAL_TIM_Base_Init>
 8001e36:	1e03      	subs	r3, r0, #0
 8001e38:	d001      	beq.n	8001e3e <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8001e3a:	f7ff ff4e 	bl	8001cda <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e3e:	2148      	movs	r1, #72	; 0x48
 8001e40:	187b      	adds	r3, r7, r1
 8001e42:	2280      	movs	r2, #128	; 0x80
 8001e44:	0152      	lsls	r2, r2, #5
 8001e46:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001e48:	187a      	adds	r2, r7, r1
 8001e4a:	4b36      	ldr	r3, [pc, #216]	; (8001f24 <MX_TIM1_Init+0x164>)
 8001e4c:	0011      	movs	r1, r2
 8001e4e:	0018      	movs	r0, r3
 8001e50:	f001 fd6e 	bl	8003930 <HAL_TIM_ConfigClockSource>
 8001e54:	1e03      	subs	r3, r0, #0
 8001e56:	d001      	beq.n	8001e5c <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8001e58:	f7ff ff3f 	bl	8001cda <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001e5c:	4b31      	ldr	r3, [pc, #196]	; (8001f24 <MX_TIM1_Init+0x164>)
 8001e5e:	0018      	movs	r0, r3
 8001e60:	f001 fa84 	bl	800336c <HAL_TIM_PWM_Init>
 8001e64:	1e03      	subs	r3, r0, #0
 8001e66:	d001      	beq.n	8001e6c <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 8001e68:	f7ff ff37 	bl	8001cda <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e6c:	2140      	movs	r1, #64	; 0x40
 8001e6e:	187b      	adds	r3, r7, r1
 8001e70:	2200      	movs	r2, #0
 8001e72:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e74:	187b      	adds	r3, r7, r1
 8001e76:	2200      	movs	r2, #0
 8001e78:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e7a:	187a      	adds	r2, r7, r1
 8001e7c:	4b29      	ldr	r3, [pc, #164]	; (8001f24 <MX_TIM1_Init+0x164>)
 8001e7e:	0011      	movs	r1, r2
 8001e80:	0018      	movs	r0, r3
 8001e82:	f002 fa1d 	bl	80042c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001e86:	1e03      	subs	r3, r0, #0
 8001e88:	d001      	beq.n	8001e8e <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 8001e8a:	f7ff ff26 	bl	8001cda <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e8e:	2124      	movs	r1, #36	; 0x24
 8001e90:	187b      	adds	r3, r7, r1
 8001e92:	2260      	movs	r2, #96	; 0x60
 8001e94:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001e96:	187b      	adds	r3, r7, r1
 8001e98:	2200      	movs	r2, #0
 8001e9a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e9c:	187b      	adds	r3, r7, r1
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001ea2:	187b      	adds	r3, r7, r1
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ea8:	187b      	adds	r3, r7, r1
 8001eaa:	2200      	movs	r2, #0
 8001eac:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001eae:	187b      	adds	r3, r7, r1
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001eb4:	187b      	adds	r3, r7, r1
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001eba:	1879      	adds	r1, r7, r1
 8001ebc:	4b19      	ldr	r3, [pc, #100]	; (8001f24 <MX_TIM1_Init+0x164>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	0018      	movs	r0, r3
 8001ec2:	f001 fc79 	bl	80037b8 <HAL_TIM_PWM_ConfigChannel>
 8001ec6:	1e03      	subs	r3, r0, #0
 8001ec8:	d001      	beq.n	8001ece <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8001eca:	f7ff ff06 	bl	8001cda <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001ece:	1d3b      	adds	r3, r7, #4
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001ed4:	1d3b      	adds	r3, r7, #4
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001eda:	1d3b      	adds	r3, r7, #4
 8001edc:	2200      	movs	r2, #0
 8001ede:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 10;
 8001ee0:	1d3b      	adds	r3, r7, #4
 8001ee2:	220a      	movs	r2, #10
 8001ee4:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8001ee6:	1d3b      	adds	r3, r7, #4
 8001ee8:	2280      	movs	r2, #128	; 0x80
 8001eea:	0152      	lsls	r2, r2, #5
 8001eec:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001eee:	1d3b      	adds	r3, r7, #4
 8001ef0:	2280      	movs	r2, #128	; 0x80
 8001ef2:	0192      	lsls	r2, r2, #6
 8001ef4:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 8001ef6:	1d3b      	adds	r3, r7, #4
 8001ef8:	2280      	movs	r2, #128	; 0x80
 8001efa:	01d2      	lsls	r2, r2, #7
 8001efc:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001efe:	1d3a      	adds	r2, r7, #4
 8001f00:	4b08      	ldr	r3, [pc, #32]	; (8001f24 <MX_TIM1_Init+0x164>)
 8001f02:	0011      	movs	r1, r2
 8001f04:	0018      	movs	r0, r3
 8001f06:	f002 fa39 	bl	800437c <HAL_TIMEx_ConfigBreakDeadTime>
 8001f0a:	1e03      	subs	r3, r0, #0
 8001f0c:	d001      	beq.n	8001f12 <MX_TIM1_Init+0x152>
  {
    Error_Handler();
 8001f0e:	f7ff fee4 	bl	8001cda <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8001f12:	4b04      	ldr	r3, [pc, #16]	; (8001f24 <MX_TIM1_Init+0x164>)
 8001f14:	0018      	movs	r0, r3
 8001f16:	f000 f85d 	bl	8001fd4 <HAL_TIM_MspPostInit>

}
 8001f1a:	46c0      	nop			; (mov r8, r8)
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	b016      	add	sp, #88	; 0x58
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	46c0      	nop			; (mov r8, r8)
 8001f24:	20000350 	.word	0x20000350
 8001f28:	40012c00 	.word	0x40012c00

08001f2c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b08a      	sub	sp, #40	; 0x28
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f34:	2314      	movs	r3, #20
 8001f36:	18fb      	adds	r3, r7, r3
 8001f38:	0018      	movs	r0, r3
 8001f3a:	2314      	movs	r3, #20
 8001f3c:	001a      	movs	r2, r3
 8001f3e:	2100      	movs	r1, #0
 8001f40:	f002 fe1e 	bl	8004b80 <memset>
  if(tim_baseHandle->Instance==TIM1)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a20      	ldr	r2, [pc, #128]	; (8001fcc <HAL_TIM_Base_MspInit+0xa0>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d13a      	bne.n	8001fc4 <HAL_TIM_Base_MspInit+0x98>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f4e:	4b20      	ldr	r3, [pc, #128]	; (8001fd0 <HAL_TIM_Base_MspInit+0xa4>)
 8001f50:	699a      	ldr	r2, [r3, #24]
 8001f52:	4b1f      	ldr	r3, [pc, #124]	; (8001fd0 <HAL_TIM_Base_MspInit+0xa4>)
 8001f54:	2180      	movs	r1, #128	; 0x80
 8001f56:	0109      	lsls	r1, r1, #4
 8001f58:	430a      	orrs	r2, r1
 8001f5a:	619a      	str	r2, [r3, #24]
 8001f5c:	4b1c      	ldr	r3, [pc, #112]	; (8001fd0 <HAL_TIM_Base_MspInit+0xa4>)
 8001f5e:	699a      	ldr	r2, [r3, #24]
 8001f60:	2380      	movs	r3, #128	; 0x80
 8001f62:	011b      	lsls	r3, r3, #4
 8001f64:	4013      	ands	r3, r2
 8001f66:	613b      	str	r3, [r7, #16]
 8001f68:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f6a:	4b19      	ldr	r3, [pc, #100]	; (8001fd0 <HAL_TIM_Base_MspInit+0xa4>)
 8001f6c:	695a      	ldr	r2, [r3, #20]
 8001f6e:	4b18      	ldr	r3, [pc, #96]	; (8001fd0 <HAL_TIM_Base_MspInit+0xa4>)
 8001f70:	2180      	movs	r1, #128	; 0x80
 8001f72:	0289      	lsls	r1, r1, #10
 8001f74:	430a      	orrs	r2, r1
 8001f76:	615a      	str	r2, [r3, #20]
 8001f78:	4b15      	ldr	r3, [pc, #84]	; (8001fd0 <HAL_TIM_Base_MspInit+0xa4>)
 8001f7a:	695a      	ldr	r2, [r3, #20]
 8001f7c:	2380      	movs	r3, #128	; 0x80
 8001f7e:	029b      	lsls	r3, r3, #10
 8001f80:	4013      	ands	r3, r2
 8001f82:	60fb      	str	r3, [r7, #12]
 8001f84:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PA6     ------> TIM1_BKIN 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001f86:	2114      	movs	r1, #20
 8001f88:	187b      	adds	r3, r7, r1
 8001f8a:	2240      	movs	r2, #64	; 0x40
 8001f8c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f8e:	187b      	adds	r3, r7, r1
 8001f90:	2202      	movs	r2, #2
 8001f92:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f94:	187b      	adds	r3, r7, r1
 8001f96:	2200      	movs	r2, #0
 8001f98:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f9a:	187b      	adds	r3, r7, r1
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001fa0:	187b      	adds	r3, r7, r1
 8001fa2:	2202      	movs	r2, #2
 8001fa4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fa6:	187a      	adds	r2, r7, r1
 8001fa8:	2390      	movs	r3, #144	; 0x90
 8001faa:	05db      	lsls	r3, r3, #23
 8001fac:	0011      	movs	r1, r2
 8001fae:	0018      	movs	r0, r3
 8001fb0:	f000 fa60 	bl	8002474 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	2100      	movs	r1, #0
 8001fb8:	200d      	movs	r0, #13
 8001fba:	f000 fa29 	bl	8002410 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8001fbe:	200d      	movs	r0, #13
 8001fc0:	f000 fa3b 	bl	800243a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001fc4:	46c0      	nop			; (mov r8, r8)
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	b00a      	add	sp, #40	; 0x28
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	40012c00 	.word	0x40012c00
 8001fd0:	40021000 	.word	0x40021000

08001fd4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b088      	sub	sp, #32
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fdc:	230c      	movs	r3, #12
 8001fde:	18fb      	adds	r3, r7, r3
 8001fe0:	0018      	movs	r0, r3
 8001fe2:	2314      	movs	r3, #20
 8001fe4:	001a      	movs	r2, r3
 8001fe6:	2100      	movs	r1, #0
 8001fe8:	f002 fdca 	bl	8004b80 <memset>
  if(timHandle->Instance==TIM1)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a16      	ldr	r2, [pc, #88]	; (800204c <HAL_TIM_MspPostInit+0x78>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d125      	bne.n	8002042 <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ff6:	4b16      	ldr	r3, [pc, #88]	; (8002050 <HAL_TIM_MspPostInit+0x7c>)
 8001ff8:	695a      	ldr	r2, [r3, #20]
 8001ffa:	4b15      	ldr	r3, [pc, #84]	; (8002050 <HAL_TIM_MspPostInit+0x7c>)
 8001ffc:	2180      	movs	r1, #128	; 0x80
 8001ffe:	0289      	lsls	r1, r1, #10
 8002000:	430a      	orrs	r2, r1
 8002002:	615a      	str	r2, [r3, #20]
 8002004:	4b12      	ldr	r3, [pc, #72]	; (8002050 <HAL_TIM_MspPostInit+0x7c>)
 8002006:	695a      	ldr	r2, [r3, #20]
 8002008:	2380      	movs	r3, #128	; 0x80
 800200a:	029b      	lsls	r3, r3, #10
 800200c:	4013      	ands	r3, r2
 800200e:	60bb      	str	r3, [r7, #8]
 8002010:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration    
    PA7     ------> TIM1_CH1N
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002012:	210c      	movs	r1, #12
 8002014:	187b      	adds	r3, r7, r1
 8002016:	22c0      	movs	r2, #192	; 0xc0
 8002018:	0052      	lsls	r2, r2, #1
 800201a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800201c:	187b      	adds	r3, r7, r1
 800201e:	2202      	movs	r2, #2
 8002020:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002022:	187b      	adds	r3, r7, r1
 8002024:	2200      	movs	r2, #0
 8002026:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002028:	187b      	adds	r3, r7, r1
 800202a:	2200      	movs	r2, #0
 800202c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800202e:	187b      	adds	r3, r7, r1
 8002030:	2202      	movs	r2, #2
 8002032:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002034:	187a      	adds	r2, r7, r1
 8002036:	2390      	movs	r3, #144	; 0x90
 8002038:	05db      	lsls	r3, r3, #23
 800203a:	0011      	movs	r1, r2
 800203c:	0018      	movs	r0, r3
 800203e:	f000 fa19 	bl	8002474 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002042:	46c0      	nop			; (mov r8, r8)
 8002044:	46bd      	mov	sp, r7
 8002046:	b008      	add	sp, #32
 8002048:	bd80      	pop	{r7, pc}
 800204a:	46c0      	nop			; (mov r8, r8)
 800204c:	40012c00 	.word	0x40012c00
 8002050:	40021000 	.word	0x40021000

08002054 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8002058:	4b14      	ldr	r3, [pc, #80]	; (80020ac <MX_USART1_UART_Init+0x58>)
 800205a:	4a15      	ldr	r2, [pc, #84]	; (80020b0 <MX_USART1_UART_Init+0x5c>)
 800205c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 800205e:	4b13      	ldr	r3, [pc, #76]	; (80020ac <MX_USART1_UART_Init+0x58>)
 8002060:	2296      	movs	r2, #150	; 0x96
 8002062:	0212      	lsls	r2, r2, #8
 8002064:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002066:	4b11      	ldr	r3, [pc, #68]	; (80020ac <MX_USART1_UART_Init+0x58>)
 8002068:	2200      	movs	r2, #0
 800206a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800206c:	4b0f      	ldr	r3, [pc, #60]	; (80020ac <MX_USART1_UART_Init+0x58>)
 800206e:	2200      	movs	r2, #0
 8002070:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002072:	4b0e      	ldr	r3, [pc, #56]	; (80020ac <MX_USART1_UART_Init+0x58>)
 8002074:	2200      	movs	r2, #0
 8002076:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002078:	4b0c      	ldr	r3, [pc, #48]	; (80020ac <MX_USART1_UART_Init+0x58>)
 800207a:	220c      	movs	r2, #12
 800207c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800207e:	4b0b      	ldr	r3, [pc, #44]	; (80020ac <MX_USART1_UART_Init+0x58>)
 8002080:	2200      	movs	r2, #0
 8002082:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002084:	4b09      	ldr	r3, [pc, #36]	; (80020ac <MX_USART1_UART_Init+0x58>)
 8002086:	2200      	movs	r2, #0
 8002088:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800208a:	4b08      	ldr	r3, [pc, #32]	; (80020ac <MX_USART1_UART_Init+0x58>)
 800208c:	2200      	movs	r2, #0
 800208e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002090:	4b06      	ldr	r3, [pc, #24]	; (80020ac <MX_USART1_UART_Init+0x58>)
 8002092:	2200      	movs	r2, #0
 8002094:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002096:	4b05      	ldr	r3, [pc, #20]	; (80020ac <MX_USART1_UART_Init+0x58>)
 8002098:	0018      	movs	r0, r3
 800209a:	f002 fa01 	bl	80044a0 <HAL_UART_Init>
 800209e:	1e03      	subs	r3, r0, #0
 80020a0:	d001      	beq.n	80020a6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80020a2:	f7ff fe1a 	bl	8001cda <Error_Handler>
  }

}
 80020a6:	46c0      	nop			; (mov r8, r8)
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	20000398 	.word	0x20000398
 80020b0:	40013800 	.word	0x40013800

080020b4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80020b4:	b590      	push	{r4, r7, lr}
 80020b6:	b08b      	sub	sp, #44	; 0x2c
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020bc:	2314      	movs	r3, #20
 80020be:	18fb      	adds	r3, r7, r3
 80020c0:	0018      	movs	r0, r3
 80020c2:	2314      	movs	r3, #20
 80020c4:	001a      	movs	r2, r3
 80020c6:	2100      	movs	r1, #0
 80020c8:	f002 fd5a 	bl	8004b80 <memset>
  if(uartHandle->Instance==USART1)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a2f      	ldr	r2, [pc, #188]	; (8002190 <HAL_UART_MspInit+0xdc>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d158      	bne.n	8002188 <HAL_UART_MspInit+0xd4>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80020d6:	4b2f      	ldr	r3, [pc, #188]	; (8002194 <HAL_UART_MspInit+0xe0>)
 80020d8:	699a      	ldr	r2, [r3, #24]
 80020da:	4b2e      	ldr	r3, [pc, #184]	; (8002194 <HAL_UART_MspInit+0xe0>)
 80020dc:	2180      	movs	r1, #128	; 0x80
 80020de:	01c9      	lsls	r1, r1, #7
 80020e0:	430a      	orrs	r2, r1
 80020e2:	619a      	str	r2, [r3, #24]
 80020e4:	4b2b      	ldr	r3, [pc, #172]	; (8002194 <HAL_UART_MspInit+0xe0>)
 80020e6:	699a      	ldr	r2, [r3, #24]
 80020e8:	2380      	movs	r3, #128	; 0x80
 80020ea:	01db      	lsls	r3, r3, #7
 80020ec:	4013      	ands	r3, r2
 80020ee:	613b      	str	r3, [r7, #16]
 80020f0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020f2:	4b28      	ldr	r3, [pc, #160]	; (8002194 <HAL_UART_MspInit+0xe0>)
 80020f4:	695a      	ldr	r2, [r3, #20]
 80020f6:	4b27      	ldr	r3, [pc, #156]	; (8002194 <HAL_UART_MspInit+0xe0>)
 80020f8:	2180      	movs	r1, #128	; 0x80
 80020fa:	0289      	lsls	r1, r1, #10
 80020fc:	430a      	orrs	r2, r1
 80020fe:	615a      	str	r2, [r3, #20]
 8002100:	4b24      	ldr	r3, [pc, #144]	; (8002194 <HAL_UART_MspInit+0xe0>)
 8002102:	695a      	ldr	r2, [r3, #20]
 8002104:	2380      	movs	r3, #128	; 0x80
 8002106:	029b      	lsls	r3, r3, #10
 8002108:	4013      	ands	r3, r2
 800210a:	60fb      	str	r3, [r7, #12]
 800210c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800210e:	4b21      	ldr	r3, [pc, #132]	; (8002194 <HAL_UART_MspInit+0xe0>)
 8002110:	695a      	ldr	r2, [r3, #20]
 8002112:	4b20      	ldr	r3, [pc, #128]	; (8002194 <HAL_UART_MspInit+0xe0>)
 8002114:	2180      	movs	r1, #128	; 0x80
 8002116:	02c9      	lsls	r1, r1, #11
 8002118:	430a      	orrs	r2, r1
 800211a:	615a      	str	r2, [r3, #20]
 800211c:	4b1d      	ldr	r3, [pc, #116]	; (8002194 <HAL_UART_MspInit+0xe0>)
 800211e:	695a      	ldr	r2, [r3, #20]
 8002120:	2380      	movs	r3, #128	; 0x80
 8002122:	02db      	lsls	r3, r3, #11
 8002124:	4013      	ands	r3, r2
 8002126:	60bb      	str	r3, [r7, #8]
 8002128:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800212a:	2114      	movs	r1, #20
 800212c:	187b      	adds	r3, r7, r1
 800212e:	2280      	movs	r2, #128	; 0x80
 8002130:	00d2      	lsls	r2, r2, #3
 8002132:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002134:	000c      	movs	r4, r1
 8002136:	193b      	adds	r3, r7, r4
 8002138:	2202      	movs	r2, #2
 800213a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213c:	193b      	adds	r3, r7, r4
 800213e:	2200      	movs	r2, #0
 8002140:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002142:	193b      	adds	r3, r7, r4
 8002144:	2203      	movs	r2, #3
 8002146:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8002148:	193b      	adds	r3, r7, r4
 800214a:	2201      	movs	r2, #1
 800214c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800214e:	193a      	adds	r2, r7, r4
 8002150:	2390      	movs	r3, #144	; 0x90
 8002152:	05db      	lsls	r3, r3, #23
 8002154:	0011      	movs	r1, r2
 8002156:	0018      	movs	r0, r3
 8002158:	f000 f98c 	bl	8002474 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800215c:	0021      	movs	r1, r4
 800215e:	187b      	adds	r3, r7, r1
 8002160:	2240      	movs	r2, #64	; 0x40
 8002162:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002164:	187b      	adds	r3, r7, r1
 8002166:	2202      	movs	r2, #2
 8002168:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216a:	187b      	adds	r3, r7, r1
 800216c:	2200      	movs	r2, #0
 800216e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002170:	187b      	adds	r3, r7, r1
 8002172:	2203      	movs	r2, #3
 8002174:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8002176:	187b      	adds	r3, r7, r1
 8002178:	2200      	movs	r2, #0
 800217a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800217c:	187b      	adds	r3, r7, r1
 800217e:	4a06      	ldr	r2, [pc, #24]	; (8002198 <HAL_UART_MspInit+0xe4>)
 8002180:	0019      	movs	r1, r3
 8002182:	0010      	movs	r0, r2
 8002184:	f000 f976 	bl	8002474 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002188:	46c0      	nop			; (mov r8, r8)
 800218a:	46bd      	mov	sp, r7
 800218c:	b00b      	add	sp, #44	; 0x2c
 800218e:	bd90      	pop	{r4, r7, pc}
 8002190:	40013800 	.word	0x40013800
 8002194:	40021000 	.word	0x40021000
 8002198:	48000400 	.word	0x48000400

0800219c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800219c:	480d      	ldr	r0, [pc, #52]	; (80021d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800219e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80021a0:	480d      	ldr	r0, [pc, #52]	; (80021d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80021a2:	490e      	ldr	r1, [pc, #56]	; (80021dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80021a4:	4a0e      	ldr	r2, [pc, #56]	; (80021e0 <LoopForever+0xe>)
  movs r3, #0
 80021a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021a8:	e002      	b.n	80021b0 <LoopCopyDataInit>

080021aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021ae:	3304      	adds	r3, #4

080021b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021b4:	d3f9      	bcc.n	80021aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021b6:	4a0b      	ldr	r2, [pc, #44]	; (80021e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80021b8:	4c0b      	ldr	r4, [pc, #44]	; (80021e8 <LoopForever+0x16>)
  movs r3, #0
 80021ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021bc:	e001      	b.n	80021c2 <LoopFillZerobss>

080021be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021c0:	3204      	adds	r2, #4

080021c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021c4:	d3fb      	bcc.n	80021be <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80021c6:	f7ff fdf5 	bl	8001db4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80021ca:	f002 fcb5 	bl	8004b38 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80021ce:	f7ff fcfd 	bl	8001bcc <main>

080021d2 <LoopForever>:

LoopForever:
    b LoopForever
 80021d2:	e7fe      	b.n	80021d2 <LoopForever>
  ldr   r0, =_estack
 80021d4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80021d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021dc:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80021e0:	08005df0 	.word	0x08005df0
  ldr r2, =_sbss
 80021e4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80021e8:	20000420 	.word	0x20000420

080021ec <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80021ec:	e7fe      	b.n	80021ec <ADC1_COMP_IRQHandler>
	...

080021f0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021f4:	4b07      	ldr	r3, [pc, #28]	; (8002214 <HAL_Init+0x24>)
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	4b06      	ldr	r3, [pc, #24]	; (8002214 <HAL_Init+0x24>)
 80021fa:	2110      	movs	r1, #16
 80021fc:	430a      	orrs	r2, r1
 80021fe:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002200:	2000      	movs	r0, #0
 8002202:	f000 f809 	bl	8002218 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002206:	f7ff fd6d 	bl	8001ce4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800220a:	2300      	movs	r3, #0
}
 800220c:	0018      	movs	r0, r3
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	46c0      	nop			; (mov r8, r8)
 8002214:	40022000 	.word	0x40022000

08002218 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002218:	b590      	push	{r4, r7, lr}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002220:	4b14      	ldr	r3, [pc, #80]	; (8002274 <HAL_InitTick+0x5c>)
 8002222:	681c      	ldr	r4, [r3, #0]
 8002224:	4b14      	ldr	r3, [pc, #80]	; (8002278 <HAL_InitTick+0x60>)
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	0019      	movs	r1, r3
 800222a:	23fa      	movs	r3, #250	; 0xfa
 800222c:	0098      	lsls	r0, r3, #2
 800222e:	f7fd ff75 	bl	800011c <__udivsi3>
 8002232:	0003      	movs	r3, r0
 8002234:	0019      	movs	r1, r3
 8002236:	0020      	movs	r0, r4
 8002238:	f7fd ff70 	bl	800011c <__udivsi3>
 800223c:	0003      	movs	r3, r0
 800223e:	0018      	movs	r0, r3
 8002240:	f000 f90b 	bl	800245a <HAL_SYSTICK_Config>
 8002244:	1e03      	subs	r3, r0, #0
 8002246:	d001      	beq.n	800224c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e00f      	b.n	800226c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2b03      	cmp	r3, #3
 8002250:	d80b      	bhi.n	800226a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002252:	6879      	ldr	r1, [r7, #4]
 8002254:	2301      	movs	r3, #1
 8002256:	425b      	negs	r3, r3
 8002258:	2200      	movs	r2, #0
 800225a:	0018      	movs	r0, r3
 800225c:	f000 f8d8 	bl	8002410 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002260:	4b06      	ldr	r3, [pc, #24]	; (800227c <HAL_InitTick+0x64>)
 8002262:	687a      	ldr	r2, [r7, #4]
 8002264:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8002266:	2300      	movs	r3, #0
 8002268:	e000      	b.n	800226c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
}
 800226c:	0018      	movs	r0, r3
 800226e:	46bd      	mov	sp, r7
 8002270:	b003      	add	sp, #12
 8002272:	bd90      	pop	{r4, r7, pc}
 8002274:	20000004 	.word	0x20000004
 8002278:	2000000c 	.word	0x2000000c
 800227c:	20000008 	.word	0x20000008

08002280 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002284:	4b05      	ldr	r3, [pc, #20]	; (800229c <HAL_IncTick+0x1c>)
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	001a      	movs	r2, r3
 800228a:	4b05      	ldr	r3, [pc, #20]	; (80022a0 <HAL_IncTick+0x20>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	18d2      	adds	r2, r2, r3
 8002290:	4b03      	ldr	r3, [pc, #12]	; (80022a0 <HAL_IncTick+0x20>)
 8002292:	601a      	str	r2, [r3, #0]
}
 8002294:	46c0      	nop			; (mov r8, r8)
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	46c0      	nop			; (mov r8, r8)
 800229c:	2000000c 	.word	0x2000000c
 80022a0:	2000041c 	.word	0x2000041c

080022a4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	af00      	add	r7, sp, #0
  return uwTick;
 80022a8:	4b02      	ldr	r3, [pc, #8]	; (80022b4 <HAL_GetTick+0x10>)
 80022aa:	681b      	ldr	r3, [r3, #0]
}
 80022ac:	0018      	movs	r0, r3
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	46c0      	nop			; (mov r8, r8)
 80022b4:	2000041c 	.word	0x2000041c

080022b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	0002      	movs	r2, r0
 80022c0:	1dfb      	adds	r3, r7, #7
 80022c2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80022c4:	1dfb      	adds	r3, r7, #7
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	2b7f      	cmp	r3, #127	; 0x7f
 80022ca:	d809      	bhi.n	80022e0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022cc:	1dfb      	adds	r3, r7, #7
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	001a      	movs	r2, r3
 80022d2:	231f      	movs	r3, #31
 80022d4:	401a      	ands	r2, r3
 80022d6:	4b04      	ldr	r3, [pc, #16]	; (80022e8 <__NVIC_EnableIRQ+0x30>)
 80022d8:	2101      	movs	r1, #1
 80022da:	4091      	lsls	r1, r2
 80022dc:	000a      	movs	r2, r1
 80022de:	601a      	str	r2, [r3, #0]
  }
}
 80022e0:	46c0      	nop			; (mov r8, r8)
 80022e2:	46bd      	mov	sp, r7
 80022e4:	b002      	add	sp, #8
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	e000e100 	.word	0xe000e100

080022ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022ec:	b590      	push	{r4, r7, lr}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	0002      	movs	r2, r0
 80022f4:	6039      	str	r1, [r7, #0]
 80022f6:	1dfb      	adds	r3, r7, #7
 80022f8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80022fa:	1dfb      	adds	r3, r7, #7
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	2b7f      	cmp	r3, #127	; 0x7f
 8002300:	d828      	bhi.n	8002354 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002302:	4a2f      	ldr	r2, [pc, #188]	; (80023c0 <__NVIC_SetPriority+0xd4>)
 8002304:	1dfb      	adds	r3, r7, #7
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	b25b      	sxtb	r3, r3
 800230a:	089b      	lsrs	r3, r3, #2
 800230c:	33c0      	adds	r3, #192	; 0xc0
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	589b      	ldr	r3, [r3, r2]
 8002312:	1dfa      	adds	r2, r7, #7
 8002314:	7812      	ldrb	r2, [r2, #0]
 8002316:	0011      	movs	r1, r2
 8002318:	2203      	movs	r2, #3
 800231a:	400a      	ands	r2, r1
 800231c:	00d2      	lsls	r2, r2, #3
 800231e:	21ff      	movs	r1, #255	; 0xff
 8002320:	4091      	lsls	r1, r2
 8002322:	000a      	movs	r2, r1
 8002324:	43d2      	mvns	r2, r2
 8002326:	401a      	ands	r2, r3
 8002328:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	019b      	lsls	r3, r3, #6
 800232e:	22ff      	movs	r2, #255	; 0xff
 8002330:	401a      	ands	r2, r3
 8002332:	1dfb      	adds	r3, r7, #7
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	0018      	movs	r0, r3
 8002338:	2303      	movs	r3, #3
 800233a:	4003      	ands	r3, r0
 800233c:	00db      	lsls	r3, r3, #3
 800233e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002340:	481f      	ldr	r0, [pc, #124]	; (80023c0 <__NVIC_SetPriority+0xd4>)
 8002342:	1dfb      	adds	r3, r7, #7
 8002344:	781b      	ldrb	r3, [r3, #0]
 8002346:	b25b      	sxtb	r3, r3
 8002348:	089b      	lsrs	r3, r3, #2
 800234a:	430a      	orrs	r2, r1
 800234c:	33c0      	adds	r3, #192	; 0xc0
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002352:	e031      	b.n	80023b8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002354:	4a1b      	ldr	r2, [pc, #108]	; (80023c4 <__NVIC_SetPriority+0xd8>)
 8002356:	1dfb      	adds	r3, r7, #7
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	0019      	movs	r1, r3
 800235c:	230f      	movs	r3, #15
 800235e:	400b      	ands	r3, r1
 8002360:	3b08      	subs	r3, #8
 8002362:	089b      	lsrs	r3, r3, #2
 8002364:	3306      	adds	r3, #6
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	18d3      	adds	r3, r2, r3
 800236a:	3304      	adds	r3, #4
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	1dfa      	adds	r2, r7, #7
 8002370:	7812      	ldrb	r2, [r2, #0]
 8002372:	0011      	movs	r1, r2
 8002374:	2203      	movs	r2, #3
 8002376:	400a      	ands	r2, r1
 8002378:	00d2      	lsls	r2, r2, #3
 800237a:	21ff      	movs	r1, #255	; 0xff
 800237c:	4091      	lsls	r1, r2
 800237e:	000a      	movs	r2, r1
 8002380:	43d2      	mvns	r2, r2
 8002382:	401a      	ands	r2, r3
 8002384:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	019b      	lsls	r3, r3, #6
 800238a:	22ff      	movs	r2, #255	; 0xff
 800238c:	401a      	ands	r2, r3
 800238e:	1dfb      	adds	r3, r7, #7
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	0018      	movs	r0, r3
 8002394:	2303      	movs	r3, #3
 8002396:	4003      	ands	r3, r0
 8002398:	00db      	lsls	r3, r3, #3
 800239a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800239c:	4809      	ldr	r0, [pc, #36]	; (80023c4 <__NVIC_SetPriority+0xd8>)
 800239e:	1dfb      	adds	r3, r7, #7
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	001c      	movs	r4, r3
 80023a4:	230f      	movs	r3, #15
 80023a6:	4023      	ands	r3, r4
 80023a8:	3b08      	subs	r3, #8
 80023aa:	089b      	lsrs	r3, r3, #2
 80023ac:	430a      	orrs	r2, r1
 80023ae:	3306      	adds	r3, #6
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	18c3      	adds	r3, r0, r3
 80023b4:	3304      	adds	r3, #4
 80023b6:	601a      	str	r2, [r3, #0]
}
 80023b8:	46c0      	nop			; (mov r8, r8)
 80023ba:	46bd      	mov	sp, r7
 80023bc:	b003      	add	sp, #12
 80023be:	bd90      	pop	{r4, r7, pc}
 80023c0:	e000e100 	.word	0xe000e100
 80023c4:	e000ed00 	.word	0xe000ed00

080023c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	3b01      	subs	r3, #1
 80023d4:	4a0c      	ldr	r2, [pc, #48]	; (8002408 <SysTick_Config+0x40>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d901      	bls.n	80023de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023da:	2301      	movs	r3, #1
 80023dc:	e010      	b.n	8002400 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023de:	4b0b      	ldr	r3, [pc, #44]	; (800240c <SysTick_Config+0x44>)
 80023e0:	687a      	ldr	r2, [r7, #4]
 80023e2:	3a01      	subs	r2, #1
 80023e4:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023e6:	2301      	movs	r3, #1
 80023e8:	425b      	negs	r3, r3
 80023ea:	2103      	movs	r1, #3
 80023ec:	0018      	movs	r0, r3
 80023ee:	f7ff ff7d 	bl	80022ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023f2:	4b06      	ldr	r3, [pc, #24]	; (800240c <SysTick_Config+0x44>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023f8:	4b04      	ldr	r3, [pc, #16]	; (800240c <SysTick_Config+0x44>)
 80023fa:	2207      	movs	r2, #7
 80023fc:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023fe:	2300      	movs	r3, #0
}
 8002400:	0018      	movs	r0, r3
 8002402:	46bd      	mov	sp, r7
 8002404:	b002      	add	sp, #8
 8002406:	bd80      	pop	{r7, pc}
 8002408:	00ffffff 	.word	0x00ffffff
 800240c:	e000e010 	.word	0xe000e010

08002410 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002410:	b580      	push	{r7, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af00      	add	r7, sp, #0
 8002416:	60b9      	str	r1, [r7, #8]
 8002418:	607a      	str	r2, [r7, #4]
 800241a:	210f      	movs	r1, #15
 800241c:	187b      	adds	r3, r7, r1
 800241e:	1c02      	adds	r2, r0, #0
 8002420:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002422:	68ba      	ldr	r2, [r7, #8]
 8002424:	187b      	adds	r3, r7, r1
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	b25b      	sxtb	r3, r3
 800242a:	0011      	movs	r1, r2
 800242c:	0018      	movs	r0, r3
 800242e:	f7ff ff5d 	bl	80022ec <__NVIC_SetPriority>
}
 8002432:	46c0      	nop			; (mov r8, r8)
 8002434:	46bd      	mov	sp, r7
 8002436:	b004      	add	sp, #16
 8002438:	bd80      	pop	{r7, pc}

0800243a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800243a:	b580      	push	{r7, lr}
 800243c:	b082      	sub	sp, #8
 800243e:	af00      	add	r7, sp, #0
 8002440:	0002      	movs	r2, r0
 8002442:	1dfb      	adds	r3, r7, #7
 8002444:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002446:	1dfb      	adds	r3, r7, #7
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	b25b      	sxtb	r3, r3
 800244c:	0018      	movs	r0, r3
 800244e:	f7ff ff33 	bl	80022b8 <__NVIC_EnableIRQ>
}
 8002452:	46c0      	nop			; (mov r8, r8)
 8002454:	46bd      	mov	sp, r7
 8002456:	b002      	add	sp, #8
 8002458:	bd80      	pop	{r7, pc}

0800245a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800245a:	b580      	push	{r7, lr}
 800245c:	b082      	sub	sp, #8
 800245e:	af00      	add	r7, sp, #0
 8002460:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	0018      	movs	r0, r3
 8002466:	f7ff ffaf 	bl	80023c8 <SysTick_Config>
 800246a:	0003      	movs	r3, r0
}
 800246c:	0018      	movs	r0, r3
 800246e:	46bd      	mov	sp, r7
 8002470:	b002      	add	sp, #8
 8002472:	bd80      	pop	{r7, pc}

08002474 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b086      	sub	sp, #24
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800247e:	2300      	movs	r3, #0
 8002480:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002482:	e14f      	b.n	8002724 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	2101      	movs	r1, #1
 800248a:	697a      	ldr	r2, [r7, #20]
 800248c:	4091      	lsls	r1, r2
 800248e:	000a      	movs	r2, r1
 8002490:	4013      	ands	r3, r2
 8002492:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d100      	bne.n	800249c <HAL_GPIO_Init+0x28>
 800249a:	e140      	b.n	800271e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	2203      	movs	r2, #3
 80024a2:	4013      	ands	r3, r2
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d005      	beq.n	80024b4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	2203      	movs	r2, #3
 80024ae:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d130      	bne.n	8002516 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	005b      	lsls	r3, r3, #1
 80024be:	2203      	movs	r2, #3
 80024c0:	409a      	lsls	r2, r3
 80024c2:	0013      	movs	r3, r2
 80024c4:	43da      	mvns	r2, r3
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	4013      	ands	r3, r2
 80024ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	68da      	ldr	r2, [r3, #12]
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	005b      	lsls	r3, r3, #1
 80024d4:	409a      	lsls	r2, r3
 80024d6:	0013      	movs	r3, r2
 80024d8:	693a      	ldr	r2, [r7, #16]
 80024da:	4313      	orrs	r3, r2
 80024dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	693a      	ldr	r2, [r7, #16]
 80024e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024ea:	2201      	movs	r2, #1
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	409a      	lsls	r2, r3
 80024f0:	0013      	movs	r3, r2
 80024f2:	43da      	mvns	r2, r3
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	4013      	ands	r3, r2
 80024f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	091b      	lsrs	r3, r3, #4
 8002500:	2201      	movs	r2, #1
 8002502:	401a      	ands	r2, r3
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	409a      	lsls	r2, r3
 8002508:	0013      	movs	r3, r2
 800250a:	693a      	ldr	r2, [r7, #16]
 800250c:	4313      	orrs	r3, r2
 800250e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	693a      	ldr	r2, [r7, #16]
 8002514:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	2203      	movs	r2, #3
 800251c:	4013      	ands	r3, r2
 800251e:	2b03      	cmp	r3, #3
 8002520:	d017      	beq.n	8002552 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	68db      	ldr	r3, [r3, #12]
 8002526:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	005b      	lsls	r3, r3, #1
 800252c:	2203      	movs	r2, #3
 800252e:	409a      	lsls	r2, r3
 8002530:	0013      	movs	r3, r2
 8002532:	43da      	mvns	r2, r3
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	4013      	ands	r3, r2
 8002538:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	689a      	ldr	r2, [r3, #8]
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	005b      	lsls	r3, r3, #1
 8002542:	409a      	lsls	r2, r3
 8002544:	0013      	movs	r3, r2
 8002546:	693a      	ldr	r2, [r7, #16]
 8002548:	4313      	orrs	r3, r2
 800254a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	693a      	ldr	r2, [r7, #16]
 8002550:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	2203      	movs	r2, #3
 8002558:	4013      	ands	r3, r2
 800255a:	2b02      	cmp	r3, #2
 800255c:	d123      	bne.n	80025a6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	08da      	lsrs	r2, r3, #3
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	3208      	adds	r2, #8
 8002566:	0092      	lsls	r2, r2, #2
 8002568:	58d3      	ldr	r3, [r2, r3]
 800256a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	2207      	movs	r2, #7
 8002570:	4013      	ands	r3, r2
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	220f      	movs	r2, #15
 8002576:	409a      	lsls	r2, r3
 8002578:	0013      	movs	r3, r2
 800257a:	43da      	mvns	r2, r3
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	4013      	ands	r3, r2
 8002580:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	691a      	ldr	r2, [r3, #16]
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	2107      	movs	r1, #7
 800258a:	400b      	ands	r3, r1
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	409a      	lsls	r2, r3
 8002590:	0013      	movs	r3, r2
 8002592:	693a      	ldr	r2, [r7, #16]
 8002594:	4313      	orrs	r3, r2
 8002596:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	08da      	lsrs	r2, r3, #3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	3208      	adds	r2, #8
 80025a0:	0092      	lsls	r2, r2, #2
 80025a2:	6939      	ldr	r1, [r7, #16]
 80025a4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	005b      	lsls	r3, r3, #1
 80025b0:	2203      	movs	r2, #3
 80025b2:	409a      	lsls	r2, r3
 80025b4:	0013      	movs	r3, r2
 80025b6:	43da      	mvns	r2, r3
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	4013      	ands	r3, r2
 80025bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	2203      	movs	r2, #3
 80025c4:	401a      	ands	r2, r3
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	005b      	lsls	r3, r3, #1
 80025ca:	409a      	lsls	r2, r3
 80025cc:	0013      	movs	r3, r2
 80025ce:	693a      	ldr	r2, [r7, #16]
 80025d0:	4313      	orrs	r3, r2
 80025d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	693a      	ldr	r2, [r7, #16]
 80025d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	685a      	ldr	r2, [r3, #4]
 80025de:	23c0      	movs	r3, #192	; 0xc0
 80025e0:	029b      	lsls	r3, r3, #10
 80025e2:	4013      	ands	r3, r2
 80025e4:	d100      	bne.n	80025e8 <HAL_GPIO_Init+0x174>
 80025e6:	e09a      	b.n	800271e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025e8:	4b54      	ldr	r3, [pc, #336]	; (800273c <HAL_GPIO_Init+0x2c8>)
 80025ea:	699a      	ldr	r2, [r3, #24]
 80025ec:	4b53      	ldr	r3, [pc, #332]	; (800273c <HAL_GPIO_Init+0x2c8>)
 80025ee:	2101      	movs	r1, #1
 80025f0:	430a      	orrs	r2, r1
 80025f2:	619a      	str	r2, [r3, #24]
 80025f4:	4b51      	ldr	r3, [pc, #324]	; (800273c <HAL_GPIO_Init+0x2c8>)
 80025f6:	699b      	ldr	r3, [r3, #24]
 80025f8:	2201      	movs	r2, #1
 80025fa:	4013      	ands	r3, r2
 80025fc:	60bb      	str	r3, [r7, #8]
 80025fe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002600:	4a4f      	ldr	r2, [pc, #316]	; (8002740 <HAL_GPIO_Init+0x2cc>)
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	089b      	lsrs	r3, r3, #2
 8002606:	3302      	adds	r3, #2
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	589b      	ldr	r3, [r3, r2]
 800260c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	2203      	movs	r2, #3
 8002612:	4013      	ands	r3, r2
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	220f      	movs	r2, #15
 8002618:	409a      	lsls	r2, r3
 800261a:	0013      	movs	r3, r2
 800261c:	43da      	mvns	r2, r3
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	4013      	ands	r3, r2
 8002622:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	2390      	movs	r3, #144	; 0x90
 8002628:	05db      	lsls	r3, r3, #23
 800262a:	429a      	cmp	r2, r3
 800262c:	d013      	beq.n	8002656 <HAL_GPIO_Init+0x1e2>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a44      	ldr	r2, [pc, #272]	; (8002744 <HAL_GPIO_Init+0x2d0>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d00d      	beq.n	8002652 <HAL_GPIO_Init+0x1de>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4a43      	ldr	r2, [pc, #268]	; (8002748 <HAL_GPIO_Init+0x2d4>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d007      	beq.n	800264e <HAL_GPIO_Init+0x1da>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4a42      	ldr	r2, [pc, #264]	; (800274c <HAL_GPIO_Init+0x2d8>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d101      	bne.n	800264a <HAL_GPIO_Init+0x1d6>
 8002646:	2303      	movs	r3, #3
 8002648:	e006      	b.n	8002658 <HAL_GPIO_Init+0x1e4>
 800264a:	2305      	movs	r3, #5
 800264c:	e004      	b.n	8002658 <HAL_GPIO_Init+0x1e4>
 800264e:	2302      	movs	r3, #2
 8002650:	e002      	b.n	8002658 <HAL_GPIO_Init+0x1e4>
 8002652:	2301      	movs	r3, #1
 8002654:	e000      	b.n	8002658 <HAL_GPIO_Init+0x1e4>
 8002656:	2300      	movs	r3, #0
 8002658:	697a      	ldr	r2, [r7, #20]
 800265a:	2103      	movs	r1, #3
 800265c:	400a      	ands	r2, r1
 800265e:	0092      	lsls	r2, r2, #2
 8002660:	4093      	lsls	r3, r2
 8002662:	693a      	ldr	r2, [r7, #16]
 8002664:	4313      	orrs	r3, r2
 8002666:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002668:	4935      	ldr	r1, [pc, #212]	; (8002740 <HAL_GPIO_Init+0x2cc>)
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	089b      	lsrs	r3, r3, #2
 800266e:	3302      	adds	r3, #2
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	693a      	ldr	r2, [r7, #16]
 8002674:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002676:	4b36      	ldr	r3, [pc, #216]	; (8002750 <HAL_GPIO_Init+0x2dc>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	43da      	mvns	r2, r3
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	4013      	ands	r3, r2
 8002684:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	685a      	ldr	r2, [r3, #4]
 800268a:	2380      	movs	r3, #128	; 0x80
 800268c:	025b      	lsls	r3, r3, #9
 800268e:	4013      	ands	r3, r2
 8002690:	d003      	beq.n	800269a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8002692:	693a      	ldr	r2, [r7, #16]
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	4313      	orrs	r3, r2
 8002698:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800269a:	4b2d      	ldr	r3, [pc, #180]	; (8002750 <HAL_GPIO_Init+0x2dc>)
 800269c:	693a      	ldr	r2, [r7, #16]
 800269e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80026a0:	4b2b      	ldr	r3, [pc, #172]	; (8002750 <HAL_GPIO_Init+0x2dc>)
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	43da      	mvns	r2, r3
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	4013      	ands	r3, r2
 80026ae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	685a      	ldr	r2, [r3, #4]
 80026b4:	2380      	movs	r3, #128	; 0x80
 80026b6:	029b      	lsls	r3, r3, #10
 80026b8:	4013      	ands	r3, r2
 80026ba:	d003      	beq.n	80026c4 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80026bc:	693a      	ldr	r2, [r7, #16]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	4313      	orrs	r3, r2
 80026c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80026c4:	4b22      	ldr	r3, [pc, #136]	; (8002750 <HAL_GPIO_Init+0x2dc>)
 80026c6:	693a      	ldr	r2, [r7, #16]
 80026c8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026ca:	4b21      	ldr	r3, [pc, #132]	; (8002750 <HAL_GPIO_Init+0x2dc>)
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	43da      	mvns	r2, r3
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	4013      	ands	r3, r2
 80026d8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	685a      	ldr	r2, [r3, #4]
 80026de:	2380      	movs	r3, #128	; 0x80
 80026e0:	035b      	lsls	r3, r3, #13
 80026e2:	4013      	ands	r3, r2
 80026e4:	d003      	beq.n	80026ee <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80026e6:	693a      	ldr	r2, [r7, #16]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80026ee:	4b18      	ldr	r3, [pc, #96]	; (8002750 <HAL_GPIO_Init+0x2dc>)
 80026f0:	693a      	ldr	r2, [r7, #16]
 80026f2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80026f4:	4b16      	ldr	r3, [pc, #88]	; (8002750 <HAL_GPIO_Init+0x2dc>)
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	43da      	mvns	r2, r3
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	4013      	ands	r3, r2
 8002702:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	685a      	ldr	r2, [r3, #4]
 8002708:	2380      	movs	r3, #128	; 0x80
 800270a:	039b      	lsls	r3, r3, #14
 800270c:	4013      	ands	r3, r2
 800270e:	d003      	beq.n	8002718 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8002710:	693a      	ldr	r2, [r7, #16]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	4313      	orrs	r3, r2
 8002716:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002718:	4b0d      	ldr	r3, [pc, #52]	; (8002750 <HAL_GPIO_Init+0x2dc>)
 800271a:	693a      	ldr	r2, [r7, #16]
 800271c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	3301      	adds	r3, #1
 8002722:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	40da      	lsrs	r2, r3
 800272c:	1e13      	subs	r3, r2, #0
 800272e:	d000      	beq.n	8002732 <HAL_GPIO_Init+0x2be>
 8002730:	e6a8      	b.n	8002484 <HAL_GPIO_Init+0x10>
  } 
}
 8002732:	46c0      	nop			; (mov r8, r8)
 8002734:	46bd      	mov	sp, r7
 8002736:	b006      	add	sp, #24
 8002738:	bd80      	pop	{r7, pc}
 800273a:	46c0      	nop			; (mov r8, r8)
 800273c:	40021000 	.word	0x40021000
 8002740:	40010000 	.word	0x40010000
 8002744:	48000400 	.word	0x48000400
 8002748:	48000800 	.word	0x48000800
 800274c:	48000c00 	.word	0x48000c00
 8002750:	40010400 	.word	0x40010400

08002754 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b082      	sub	sp, #8
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	0008      	movs	r0, r1
 800275e:	0011      	movs	r1, r2
 8002760:	1cbb      	adds	r3, r7, #2
 8002762:	1c02      	adds	r2, r0, #0
 8002764:	801a      	strh	r2, [r3, #0]
 8002766:	1c7b      	adds	r3, r7, #1
 8002768:	1c0a      	adds	r2, r1, #0
 800276a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800276c:	1c7b      	adds	r3, r7, #1
 800276e:	781b      	ldrb	r3, [r3, #0]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d004      	beq.n	800277e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002774:	1cbb      	adds	r3, r7, #2
 8002776:	881a      	ldrh	r2, [r3, #0]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800277c:	e003      	b.n	8002786 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800277e:	1cbb      	adds	r3, r7, #2
 8002780:	881a      	ldrh	r2, [r3, #0]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002786:	46c0      	nop			; (mov r8, r8)
 8002788:	46bd      	mov	sp, r7
 800278a:	b002      	add	sp, #8
 800278c:	bd80      	pop	{r7, pc}
	...

08002790 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b088      	sub	sp, #32
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d101      	bne.n	80027a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e303      	b.n	8002daa <HAL_RCC_OscConfig+0x61a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	2201      	movs	r2, #1
 80027a8:	4013      	ands	r3, r2
 80027aa:	d100      	bne.n	80027ae <HAL_RCC_OscConfig+0x1e>
 80027ac:	e08d      	b.n	80028ca <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80027ae:	4bc4      	ldr	r3, [pc, #784]	; (8002ac0 <HAL_RCC_OscConfig+0x330>)
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	220c      	movs	r2, #12
 80027b4:	4013      	ands	r3, r2
 80027b6:	2b04      	cmp	r3, #4
 80027b8:	d00e      	beq.n	80027d8 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80027ba:	4bc1      	ldr	r3, [pc, #772]	; (8002ac0 <HAL_RCC_OscConfig+0x330>)
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	220c      	movs	r2, #12
 80027c0:	4013      	ands	r3, r2
 80027c2:	2b08      	cmp	r3, #8
 80027c4:	d116      	bne.n	80027f4 <HAL_RCC_OscConfig+0x64>
 80027c6:	4bbe      	ldr	r3, [pc, #760]	; (8002ac0 <HAL_RCC_OscConfig+0x330>)
 80027c8:	685a      	ldr	r2, [r3, #4]
 80027ca:	2380      	movs	r3, #128	; 0x80
 80027cc:	025b      	lsls	r3, r3, #9
 80027ce:	401a      	ands	r2, r3
 80027d0:	2380      	movs	r3, #128	; 0x80
 80027d2:	025b      	lsls	r3, r3, #9
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d10d      	bne.n	80027f4 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027d8:	4bb9      	ldr	r3, [pc, #740]	; (8002ac0 <HAL_RCC_OscConfig+0x330>)
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	2380      	movs	r3, #128	; 0x80
 80027de:	029b      	lsls	r3, r3, #10
 80027e0:	4013      	ands	r3, r2
 80027e2:	d100      	bne.n	80027e6 <HAL_RCC_OscConfig+0x56>
 80027e4:	e070      	b.n	80028c8 <HAL_RCC_OscConfig+0x138>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d000      	beq.n	80027f0 <HAL_RCC_OscConfig+0x60>
 80027ee:	e06b      	b.n	80028c8 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e2da      	b.n	8002daa <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d107      	bne.n	800280c <HAL_RCC_OscConfig+0x7c>
 80027fc:	4bb0      	ldr	r3, [pc, #704]	; (8002ac0 <HAL_RCC_OscConfig+0x330>)
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	4baf      	ldr	r3, [pc, #700]	; (8002ac0 <HAL_RCC_OscConfig+0x330>)
 8002802:	2180      	movs	r1, #128	; 0x80
 8002804:	0249      	lsls	r1, r1, #9
 8002806:	430a      	orrs	r2, r1
 8002808:	601a      	str	r2, [r3, #0]
 800280a:	e02f      	b.n	800286c <HAL_RCC_OscConfig+0xdc>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d10c      	bne.n	800282e <HAL_RCC_OscConfig+0x9e>
 8002814:	4baa      	ldr	r3, [pc, #680]	; (8002ac0 <HAL_RCC_OscConfig+0x330>)
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	4ba9      	ldr	r3, [pc, #676]	; (8002ac0 <HAL_RCC_OscConfig+0x330>)
 800281a:	49aa      	ldr	r1, [pc, #680]	; (8002ac4 <HAL_RCC_OscConfig+0x334>)
 800281c:	400a      	ands	r2, r1
 800281e:	601a      	str	r2, [r3, #0]
 8002820:	4ba7      	ldr	r3, [pc, #668]	; (8002ac0 <HAL_RCC_OscConfig+0x330>)
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	4ba6      	ldr	r3, [pc, #664]	; (8002ac0 <HAL_RCC_OscConfig+0x330>)
 8002826:	49a8      	ldr	r1, [pc, #672]	; (8002ac8 <HAL_RCC_OscConfig+0x338>)
 8002828:	400a      	ands	r2, r1
 800282a:	601a      	str	r2, [r3, #0]
 800282c:	e01e      	b.n	800286c <HAL_RCC_OscConfig+0xdc>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	2b05      	cmp	r3, #5
 8002834:	d10e      	bne.n	8002854 <HAL_RCC_OscConfig+0xc4>
 8002836:	4ba2      	ldr	r3, [pc, #648]	; (8002ac0 <HAL_RCC_OscConfig+0x330>)
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	4ba1      	ldr	r3, [pc, #644]	; (8002ac0 <HAL_RCC_OscConfig+0x330>)
 800283c:	2180      	movs	r1, #128	; 0x80
 800283e:	02c9      	lsls	r1, r1, #11
 8002840:	430a      	orrs	r2, r1
 8002842:	601a      	str	r2, [r3, #0]
 8002844:	4b9e      	ldr	r3, [pc, #632]	; (8002ac0 <HAL_RCC_OscConfig+0x330>)
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	4b9d      	ldr	r3, [pc, #628]	; (8002ac0 <HAL_RCC_OscConfig+0x330>)
 800284a:	2180      	movs	r1, #128	; 0x80
 800284c:	0249      	lsls	r1, r1, #9
 800284e:	430a      	orrs	r2, r1
 8002850:	601a      	str	r2, [r3, #0]
 8002852:	e00b      	b.n	800286c <HAL_RCC_OscConfig+0xdc>
 8002854:	4b9a      	ldr	r3, [pc, #616]	; (8002ac0 <HAL_RCC_OscConfig+0x330>)
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	4b99      	ldr	r3, [pc, #612]	; (8002ac0 <HAL_RCC_OscConfig+0x330>)
 800285a:	499a      	ldr	r1, [pc, #616]	; (8002ac4 <HAL_RCC_OscConfig+0x334>)
 800285c:	400a      	ands	r2, r1
 800285e:	601a      	str	r2, [r3, #0]
 8002860:	4b97      	ldr	r3, [pc, #604]	; (8002ac0 <HAL_RCC_OscConfig+0x330>)
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	4b96      	ldr	r3, [pc, #600]	; (8002ac0 <HAL_RCC_OscConfig+0x330>)
 8002866:	4998      	ldr	r1, [pc, #608]	; (8002ac8 <HAL_RCC_OscConfig+0x338>)
 8002868:	400a      	ands	r2, r1
 800286a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d014      	beq.n	800289e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002874:	f7ff fd16 	bl	80022a4 <HAL_GetTick>
 8002878:	0003      	movs	r3, r0
 800287a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800287c:	e008      	b.n	8002890 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800287e:	f7ff fd11 	bl	80022a4 <HAL_GetTick>
 8002882:	0002      	movs	r2, r0
 8002884:	69bb      	ldr	r3, [r7, #24]
 8002886:	1ad3      	subs	r3, r2, r3
 8002888:	2b64      	cmp	r3, #100	; 0x64
 800288a:	d901      	bls.n	8002890 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 800288c:	2303      	movs	r3, #3
 800288e:	e28c      	b.n	8002daa <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002890:	4b8b      	ldr	r3, [pc, #556]	; (8002ac0 <HAL_RCC_OscConfig+0x330>)
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	2380      	movs	r3, #128	; 0x80
 8002896:	029b      	lsls	r3, r3, #10
 8002898:	4013      	ands	r3, r2
 800289a:	d0f0      	beq.n	800287e <HAL_RCC_OscConfig+0xee>
 800289c:	e015      	b.n	80028ca <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800289e:	f7ff fd01 	bl	80022a4 <HAL_GetTick>
 80028a2:	0003      	movs	r3, r0
 80028a4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028a6:	e008      	b.n	80028ba <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028a8:	f7ff fcfc 	bl	80022a4 <HAL_GetTick>
 80028ac:	0002      	movs	r2, r0
 80028ae:	69bb      	ldr	r3, [r7, #24]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	2b64      	cmp	r3, #100	; 0x64
 80028b4:	d901      	bls.n	80028ba <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e277      	b.n	8002daa <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028ba:	4b81      	ldr	r3, [pc, #516]	; (8002ac0 <HAL_RCC_OscConfig+0x330>)
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	2380      	movs	r3, #128	; 0x80
 80028c0:	029b      	lsls	r3, r3, #10
 80028c2:	4013      	ands	r3, r2
 80028c4:	d1f0      	bne.n	80028a8 <HAL_RCC_OscConfig+0x118>
 80028c6:	e000      	b.n	80028ca <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028c8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	2202      	movs	r2, #2
 80028d0:	4013      	ands	r3, r2
 80028d2:	d100      	bne.n	80028d6 <HAL_RCC_OscConfig+0x146>
 80028d4:	e069      	b.n	80029aa <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80028d6:	4b7a      	ldr	r3, [pc, #488]	; (8002ac0 <HAL_RCC_OscConfig+0x330>)
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	220c      	movs	r2, #12
 80028dc:	4013      	ands	r3, r2
 80028de:	d00b      	beq.n	80028f8 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80028e0:	4b77      	ldr	r3, [pc, #476]	; (8002ac0 <HAL_RCC_OscConfig+0x330>)
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	220c      	movs	r2, #12
 80028e6:	4013      	ands	r3, r2
 80028e8:	2b08      	cmp	r3, #8
 80028ea:	d11c      	bne.n	8002926 <HAL_RCC_OscConfig+0x196>
 80028ec:	4b74      	ldr	r3, [pc, #464]	; (8002ac0 <HAL_RCC_OscConfig+0x330>)
 80028ee:	685a      	ldr	r2, [r3, #4]
 80028f0:	2380      	movs	r3, #128	; 0x80
 80028f2:	025b      	lsls	r3, r3, #9
 80028f4:	4013      	ands	r3, r2
 80028f6:	d116      	bne.n	8002926 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028f8:	4b71      	ldr	r3, [pc, #452]	; (8002ac0 <HAL_RCC_OscConfig+0x330>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	2202      	movs	r2, #2
 80028fe:	4013      	ands	r3, r2
 8002900:	d005      	beq.n	800290e <HAL_RCC_OscConfig+0x17e>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	68db      	ldr	r3, [r3, #12]
 8002906:	2b01      	cmp	r3, #1
 8002908:	d001      	beq.n	800290e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e24d      	b.n	8002daa <HAL_RCC_OscConfig+0x61a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800290e:	4b6c      	ldr	r3, [pc, #432]	; (8002ac0 <HAL_RCC_OscConfig+0x330>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	22f8      	movs	r2, #248	; 0xf8
 8002914:	4393      	bics	r3, r2
 8002916:	0019      	movs	r1, r3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	691b      	ldr	r3, [r3, #16]
 800291c:	00da      	lsls	r2, r3, #3
 800291e:	4b68      	ldr	r3, [pc, #416]	; (8002ac0 <HAL_RCC_OscConfig+0x330>)
 8002920:	430a      	orrs	r2, r1
 8002922:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002924:	e041      	b.n	80029aa <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	68db      	ldr	r3, [r3, #12]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d024      	beq.n	8002978 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800292e:	4b64      	ldr	r3, [pc, #400]	; (8002ac0 <HAL_RCC_OscConfig+0x330>)
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	4b63      	ldr	r3, [pc, #396]	; (8002ac0 <HAL_RCC_OscConfig+0x330>)
 8002934:	2101      	movs	r1, #1
 8002936:	430a      	orrs	r2, r1
 8002938:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800293a:	f7ff fcb3 	bl	80022a4 <HAL_GetTick>
 800293e:	0003      	movs	r3, r0
 8002940:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002942:	e008      	b.n	8002956 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002944:	f7ff fcae 	bl	80022a4 <HAL_GetTick>
 8002948:	0002      	movs	r2, r0
 800294a:	69bb      	ldr	r3, [r7, #24]
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	2b02      	cmp	r3, #2
 8002950:	d901      	bls.n	8002956 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8002952:	2303      	movs	r3, #3
 8002954:	e229      	b.n	8002daa <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002956:	4b5a      	ldr	r3, [pc, #360]	; (8002ac0 <HAL_RCC_OscConfig+0x330>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	2202      	movs	r2, #2
 800295c:	4013      	ands	r3, r2
 800295e:	d0f1      	beq.n	8002944 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002960:	4b57      	ldr	r3, [pc, #348]	; (8002ac0 <HAL_RCC_OscConfig+0x330>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	22f8      	movs	r2, #248	; 0xf8
 8002966:	4393      	bics	r3, r2
 8002968:	0019      	movs	r1, r3
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	691b      	ldr	r3, [r3, #16]
 800296e:	00da      	lsls	r2, r3, #3
 8002970:	4b53      	ldr	r3, [pc, #332]	; (8002ac0 <HAL_RCC_OscConfig+0x330>)
 8002972:	430a      	orrs	r2, r1
 8002974:	601a      	str	r2, [r3, #0]
 8002976:	e018      	b.n	80029aa <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002978:	4b51      	ldr	r3, [pc, #324]	; (8002ac0 <HAL_RCC_OscConfig+0x330>)
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	4b50      	ldr	r3, [pc, #320]	; (8002ac0 <HAL_RCC_OscConfig+0x330>)
 800297e:	2101      	movs	r1, #1
 8002980:	438a      	bics	r2, r1
 8002982:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002984:	f7ff fc8e 	bl	80022a4 <HAL_GetTick>
 8002988:	0003      	movs	r3, r0
 800298a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800298c:	e008      	b.n	80029a0 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800298e:	f7ff fc89 	bl	80022a4 <HAL_GetTick>
 8002992:	0002      	movs	r2, r0
 8002994:	69bb      	ldr	r3, [r7, #24]
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	2b02      	cmp	r3, #2
 800299a:	d901      	bls.n	80029a0 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 800299c:	2303      	movs	r3, #3
 800299e:	e204      	b.n	8002daa <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029a0:	4b47      	ldr	r3, [pc, #284]	; (8002ac0 <HAL_RCC_OscConfig+0x330>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	2202      	movs	r2, #2
 80029a6:	4013      	ands	r3, r2
 80029a8:	d1f1      	bne.n	800298e <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	2208      	movs	r2, #8
 80029b0:	4013      	ands	r3, r2
 80029b2:	d036      	beq.n	8002a22 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	69db      	ldr	r3, [r3, #28]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d019      	beq.n	80029f0 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029bc:	4b40      	ldr	r3, [pc, #256]	; (8002ac0 <HAL_RCC_OscConfig+0x330>)
 80029be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029c0:	4b3f      	ldr	r3, [pc, #252]	; (8002ac0 <HAL_RCC_OscConfig+0x330>)
 80029c2:	2101      	movs	r1, #1
 80029c4:	430a      	orrs	r2, r1
 80029c6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029c8:	f7ff fc6c 	bl	80022a4 <HAL_GetTick>
 80029cc:	0003      	movs	r3, r0
 80029ce:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029d0:	e008      	b.n	80029e4 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029d2:	f7ff fc67 	bl	80022a4 <HAL_GetTick>
 80029d6:	0002      	movs	r2, r0
 80029d8:	69bb      	ldr	r3, [r7, #24]
 80029da:	1ad3      	subs	r3, r2, r3
 80029dc:	2b02      	cmp	r3, #2
 80029de:	d901      	bls.n	80029e4 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80029e0:	2303      	movs	r3, #3
 80029e2:	e1e2      	b.n	8002daa <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029e4:	4b36      	ldr	r3, [pc, #216]	; (8002ac0 <HAL_RCC_OscConfig+0x330>)
 80029e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e8:	2202      	movs	r2, #2
 80029ea:	4013      	ands	r3, r2
 80029ec:	d0f1      	beq.n	80029d2 <HAL_RCC_OscConfig+0x242>
 80029ee:	e018      	b.n	8002a22 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029f0:	4b33      	ldr	r3, [pc, #204]	; (8002ac0 <HAL_RCC_OscConfig+0x330>)
 80029f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029f4:	4b32      	ldr	r3, [pc, #200]	; (8002ac0 <HAL_RCC_OscConfig+0x330>)
 80029f6:	2101      	movs	r1, #1
 80029f8:	438a      	bics	r2, r1
 80029fa:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029fc:	f7ff fc52 	bl	80022a4 <HAL_GetTick>
 8002a00:	0003      	movs	r3, r0
 8002a02:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a04:	e008      	b.n	8002a18 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a06:	f7ff fc4d 	bl	80022a4 <HAL_GetTick>
 8002a0a:	0002      	movs	r2, r0
 8002a0c:	69bb      	ldr	r3, [r7, #24]
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	2b02      	cmp	r3, #2
 8002a12:	d901      	bls.n	8002a18 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8002a14:	2303      	movs	r3, #3
 8002a16:	e1c8      	b.n	8002daa <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a18:	4b29      	ldr	r3, [pc, #164]	; (8002ac0 <HAL_RCC_OscConfig+0x330>)
 8002a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1c:	2202      	movs	r2, #2
 8002a1e:	4013      	ands	r3, r2
 8002a20:	d1f1      	bne.n	8002a06 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	2204      	movs	r2, #4
 8002a28:	4013      	ands	r3, r2
 8002a2a:	d100      	bne.n	8002a2e <HAL_RCC_OscConfig+0x29e>
 8002a2c:	e0b6      	b.n	8002b9c <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a2e:	231f      	movs	r3, #31
 8002a30:	18fb      	adds	r3, r7, r3
 8002a32:	2200      	movs	r2, #0
 8002a34:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a36:	4b22      	ldr	r3, [pc, #136]	; (8002ac0 <HAL_RCC_OscConfig+0x330>)
 8002a38:	69da      	ldr	r2, [r3, #28]
 8002a3a:	2380      	movs	r3, #128	; 0x80
 8002a3c:	055b      	lsls	r3, r3, #21
 8002a3e:	4013      	ands	r3, r2
 8002a40:	d111      	bne.n	8002a66 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a42:	4b1f      	ldr	r3, [pc, #124]	; (8002ac0 <HAL_RCC_OscConfig+0x330>)
 8002a44:	69da      	ldr	r2, [r3, #28]
 8002a46:	4b1e      	ldr	r3, [pc, #120]	; (8002ac0 <HAL_RCC_OscConfig+0x330>)
 8002a48:	2180      	movs	r1, #128	; 0x80
 8002a4a:	0549      	lsls	r1, r1, #21
 8002a4c:	430a      	orrs	r2, r1
 8002a4e:	61da      	str	r2, [r3, #28]
 8002a50:	4b1b      	ldr	r3, [pc, #108]	; (8002ac0 <HAL_RCC_OscConfig+0x330>)
 8002a52:	69da      	ldr	r2, [r3, #28]
 8002a54:	2380      	movs	r3, #128	; 0x80
 8002a56:	055b      	lsls	r3, r3, #21
 8002a58:	4013      	ands	r3, r2
 8002a5a:	60fb      	str	r3, [r7, #12]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002a5e:	231f      	movs	r3, #31
 8002a60:	18fb      	adds	r3, r7, r3
 8002a62:	2201      	movs	r2, #1
 8002a64:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a66:	4b19      	ldr	r3, [pc, #100]	; (8002acc <HAL_RCC_OscConfig+0x33c>)
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	2380      	movs	r3, #128	; 0x80
 8002a6c:	005b      	lsls	r3, r3, #1
 8002a6e:	4013      	ands	r3, r2
 8002a70:	d11a      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a72:	4b16      	ldr	r3, [pc, #88]	; (8002acc <HAL_RCC_OscConfig+0x33c>)
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	4b15      	ldr	r3, [pc, #84]	; (8002acc <HAL_RCC_OscConfig+0x33c>)
 8002a78:	2180      	movs	r1, #128	; 0x80
 8002a7a:	0049      	lsls	r1, r1, #1
 8002a7c:	430a      	orrs	r2, r1
 8002a7e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a80:	f7ff fc10 	bl	80022a4 <HAL_GetTick>
 8002a84:	0003      	movs	r3, r0
 8002a86:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a88:	e008      	b.n	8002a9c <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a8a:	f7ff fc0b 	bl	80022a4 <HAL_GetTick>
 8002a8e:	0002      	movs	r2, r0
 8002a90:	69bb      	ldr	r3, [r7, #24]
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	2b64      	cmp	r3, #100	; 0x64
 8002a96:	d901      	bls.n	8002a9c <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 8002a98:	2303      	movs	r3, #3
 8002a9a:	e186      	b.n	8002daa <HAL_RCC_OscConfig+0x61a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a9c:	4b0b      	ldr	r3, [pc, #44]	; (8002acc <HAL_RCC_OscConfig+0x33c>)
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	2380      	movs	r3, #128	; 0x80
 8002aa2:	005b      	lsls	r3, r3, #1
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	d0f0      	beq.n	8002a8a <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d10f      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x340>
 8002ab0:	4b03      	ldr	r3, [pc, #12]	; (8002ac0 <HAL_RCC_OscConfig+0x330>)
 8002ab2:	6a1a      	ldr	r2, [r3, #32]
 8002ab4:	4b02      	ldr	r3, [pc, #8]	; (8002ac0 <HAL_RCC_OscConfig+0x330>)
 8002ab6:	2101      	movs	r1, #1
 8002ab8:	430a      	orrs	r2, r1
 8002aba:	621a      	str	r2, [r3, #32]
 8002abc:	e036      	b.n	8002b2c <HAL_RCC_OscConfig+0x39c>
 8002abe:	46c0      	nop			; (mov r8, r8)
 8002ac0:	40021000 	.word	0x40021000
 8002ac4:	fffeffff 	.word	0xfffeffff
 8002ac8:	fffbffff 	.word	0xfffbffff
 8002acc:	40007000 	.word	0x40007000
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d10c      	bne.n	8002af2 <HAL_RCC_OscConfig+0x362>
 8002ad8:	4bb6      	ldr	r3, [pc, #728]	; (8002db4 <HAL_RCC_OscConfig+0x624>)
 8002ada:	6a1a      	ldr	r2, [r3, #32]
 8002adc:	4bb5      	ldr	r3, [pc, #724]	; (8002db4 <HAL_RCC_OscConfig+0x624>)
 8002ade:	2101      	movs	r1, #1
 8002ae0:	438a      	bics	r2, r1
 8002ae2:	621a      	str	r2, [r3, #32]
 8002ae4:	4bb3      	ldr	r3, [pc, #716]	; (8002db4 <HAL_RCC_OscConfig+0x624>)
 8002ae6:	6a1a      	ldr	r2, [r3, #32]
 8002ae8:	4bb2      	ldr	r3, [pc, #712]	; (8002db4 <HAL_RCC_OscConfig+0x624>)
 8002aea:	2104      	movs	r1, #4
 8002aec:	438a      	bics	r2, r1
 8002aee:	621a      	str	r2, [r3, #32]
 8002af0:	e01c      	b.n	8002b2c <HAL_RCC_OscConfig+0x39c>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	2b05      	cmp	r3, #5
 8002af8:	d10c      	bne.n	8002b14 <HAL_RCC_OscConfig+0x384>
 8002afa:	4bae      	ldr	r3, [pc, #696]	; (8002db4 <HAL_RCC_OscConfig+0x624>)
 8002afc:	6a1a      	ldr	r2, [r3, #32]
 8002afe:	4bad      	ldr	r3, [pc, #692]	; (8002db4 <HAL_RCC_OscConfig+0x624>)
 8002b00:	2104      	movs	r1, #4
 8002b02:	430a      	orrs	r2, r1
 8002b04:	621a      	str	r2, [r3, #32]
 8002b06:	4bab      	ldr	r3, [pc, #684]	; (8002db4 <HAL_RCC_OscConfig+0x624>)
 8002b08:	6a1a      	ldr	r2, [r3, #32]
 8002b0a:	4baa      	ldr	r3, [pc, #680]	; (8002db4 <HAL_RCC_OscConfig+0x624>)
 8002b0c:	2101      	movs	r1, #1
 8002b0e:	430a      	orrs	r2, r1
 8002b10:	621a      	str	r2, [r3, #32]
 8002b12:	e00b      	b.n	8002b2c <HAL_RCC_OscConfig+0x39c>
 8002b14:	4ba7      	ldr	r3, [pc, #668]	; (8002db4 <HAL_RCC_OscConfig+0x624>)
 8002b16:	6a1a      	ldr	r2, [r3, #32]
 8002b18:	4ba6      	ldr	r3, [pc, #664]	; (8002db4 <HAL_RCC_OscConfig+0x624>)
 8002b1a:	2101      	movs	r1, #1
 8002b1c:	438a      	bics	r2, r1
 8002b1e:	621a      	str	r2, [r3, #32]
 8002b20:	4ba4      	ldr	r3, [pc, #656]	; (8002db4 <HAL_RCC_OscConfig+0x624>)
 8002b22:	6a1a      	ldr	r2, [r3, #32]
 8002b24:	4ba3      	ldr	r3, [pc, #652]	; (8002db4 <HAL_RCC_OscConfig+0x624>)
 8002b26:	2104      	movs	r1, #4
 8002b28:	438a      	bics	r2, r1
 8002b2a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d014      	beq.n	8002b5e <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b34:	f7ff fbb6 	bl	80022a4 <HAL_GetTick>
 8002b38:	0003      	movs	r3, r0
 8002b3a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b3c:	e009      	b.n	8002b52 <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b3e:	f7ff fbb1 	bl	80022a4 <HAL_GetTick>
 8002b42:	0002      	movs	r2, r0
 8002b44:	69bb      	ldr	r3, [r7, #24]
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	4a9b      	ldr	r2, [pc, #620]	; (8002db8 <HAL_RCC_OscConfig+0x628>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d901      	bls.n	8002b52 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e12b      	b.n	8002daa <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b52:	4b98      	ldr	r3, [pc, #608]	; (8002db4 <HAL_RCC_OscConfig+0x624>)
 8002b54:	6a1b      	ldr	r3, [r3, #32]
 8002b56:	2202      	movs	r2, #2
 8002b58:	4013      	ands	r3, r2
 8002b5a:	d0f0      	beq.n	8002b3e <HAL_RCC_OscConfig+0x3ae>
 8002b5c:	e013      	b.n	8002b86 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b5e:	f7ff fba1 	bl	80022a4 <HAL_GetTick>
 8002b62:	0003      	movs	r3, r0
 8002b64:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b66:	e009      	b.n	8002b7c <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b68:	f7ff fb9c 	bl	80022a4 <HAL_GetTick>
 8002b6c:	0002      	movs	r2, r0
 8002b6e:	69bb      	ldr	r3, [r7, #24]
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	4a91      	ldr	r2, [pc, #580]	; (8002db8 <HAL_RCC_OscConfig+0x628>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d901      	bls.n	8002b7c <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8002b78:	2303      	movs	r3, #3
 8002b7a:	e116      	b.n	8002daa <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b7c:	4b8d      	ldr	r3, [pc, #564]	; (8002db4 <HAL_RCC_OscConfig+0x624>)
 8002b7e:	6a1b      	ldr	r3, [r3, #32]
 8002b80:	2202      	movs	r2, #2
 8002b82:	4013      	ands	r3, r2
 8002b84:	d1f0      	bne.n	8002b68 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002b86:	231f      	movs	r3, #31
 8002b88:	18fb      	adds	r3, r7, r3
 8002b8a:	781b      	ldrb	r3, [r3, #0]
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d105      	bne.n	8002b9c <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b90:	4b88      	ldr	r3, [pc, #544]	; (8002db4 <HAL_RCC_OscConfig+0x624>)
 8002b92:	69da      	ldr	r2, [r3, #28]
 8002b94:	4b87      	ldr	r3, [pc, #540]	; (8002db4 <HAL_RCC_OscConfig+0x624>)
 8002b96:	4989      	ldr	r1, [pc, #548]	; (8002dbc <HAL_RCC_OscConfig+0x62c>)
 8002b98:	400a      	ands	r2, r1
 8002b9a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	2210      	movs	r2, #16
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	d063      	beq.n	8002c6e <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	695b      	ldr	r3, [r3, #20]
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d12a      	bne.n	8002c04 <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002bae:	4b81      	ldr	r3, [pc, #516]	; (8002db4 <HAL_RCC_OscConfig+0x624>)
 8002bb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bb2:	4b80      	ldr	r3, [pc, #512]	; (8002db4 <HAL_RCC_OscConfig+0x624>)
 8002bb4:	2104      	movs	r1, #4
 8002bb6:	430a      	orrs	r2, r1
 8002bb8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002bba:	4b7e      	ldr	r3, [pc, #504]	; (8002db4 <HAL_RCC_OscConfig+0x624>)
 8002bbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bbe:	4b7d      	ldr	r3, [pc, #500]	; (8002db4 <HAL_RCC_OscConfig+0x624>)
 8002bc0:	2101      	movs	r1, #1
 8002bc2:	430a      	orrs	r2, r1
 8002bc4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bc6:	f7ff fb6d 	bl	80022a4 <HAL_GetTick>
 8002bca:	0003      	movs	r3, r0
 8002bcc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002bce:	e008      	b.n	8002be2 <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002bd0:	f7ff fb68 	bl	80022a4 <HAL_GetTick>
 8002bd4:	0002      	movs	r2, r0
 8002bd6:	69bb      	ldr	r3, [r7, #24]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d901      	bls.n	8002be2 <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	e0e3      	b.n	8002daa <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002be2:	4b74      	ldr	r3, [pc, #464]	; (8002db4 <HAL_RCC_OscConfig+0x624>)
 8002be4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002be6:	2202      	movs	r2, #2
 8002be8:	4013      	ands	r3, r2
 8002bea:	d0f1      	beq.n	8002bd0 <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002bec:	4b71      	ldr	r3, [pc, #452]	; (8002db4 <HAL_RCC_OscConfig+0x624>)
 8002bee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bf0:	22f8      	movs	r2, #248	; 0xf8
 8002bf2:	4393      	bics	r3, r2
 8002bf4:	0019      	movs	r1, r3
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	699b      	ldr	r3, [r3, #24]
 8002bfa:	00da      	lsls	r2, r3, #3
 8002bfc:	4b6d      	ldr	r3, [pc, #436]	; (8002db4 <HAL_RCC_OscConfig+0x624>)
 8002bfe:	430a      	orrs	r2, r1
 8002c00:	635a      	str	r2, [r3, #52]	; 0x34
 8002c02:	e034      	b.n	8002c6e <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	695b      	ldr	r3, [r3, #20]
 8002c08:	3305      	adds	r3, #5
 8002c0a:	d111      	bne.n	8002c30 <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002c0c:	4b69      	ldr	r3, [pc, #420]	; (8002db4 <HAL_RCC_OscConfig+0x624>)
 8002c0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c10:	4b68      	ldr	r3, [pc, #416]	; (8002db4 <HAL_RCC_OscConfig+0x624>)
 8002c12:	2104      	movs	r1, #4
 8002c14:	438a      	bics	r2, r1
 8002c16:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002c18:	4b66      	ldr	r3, [pc, #408]	; (8002db4 <HAL_RCC_OscConfig+0x624>)
 8002c1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c1c:	22f8      	movs	r2, #248	; 0xf8
 8002c1e:	4393      	bics	r3, r2
 8002c20:	0019      	movs	r1, r3
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	699b      	ldr	r3, [r3, #24]
 8002c26:	00da      	lsls	r2, r3, #3
 8002c28:	4b62      	ldr	r3, [pc, #392]	; (8002db4 <HAL_RCC_OscConfig+0x624>)
 8002c2a:	430a      	orrs	r2, r1
 8002c2c:	635a      	str	r2, [r3, #52]	; 0x34
 8002c2e:	e01e      	b.n	8002c6e <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002c30:	4b60      	ldr	r3, [pc, #384]	; (8002db4 <HAL_RCC_OscConfig+0x624>)
 8002c32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c34:	4b5f      	ldr	r3, [pc, #380]	; (8002db4 <HAL_RCC_OscConfig+0x624>)
 8002c36:	2104      	movs	r1, #4
 8002c38:	430a      	orrs	r2, r1
 8002c3a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002c3c:	4b5d      	ldr	r3, [pc, #372]	; (8002db4 <HAL_RCC_OscConfig+0x624>)
 8002c3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c40:	4b5c      	ldr	r3, [pc, #368]	; (8002db4 <HAL_RCC_OscConfig+0x624>)
 8002c42:	2101      	movs	r1, #1
 8002c44:	438a      	bics	r2, r1
 8002c46:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c48:	f7ff fb2c 	bl	80022a4 <HAL_GetTick>
 8002c4c:	0003      	movs	r3, r0
 8002c4e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002c50:	e008      	b.n	8002c64 <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002c52:	f7ff fb27 	bl	80022a4 <HAL_GetTick>
 8002c56:	0002      	movs	r2, r0
 8002c58:	69bb      	ldr	r3, [r7, #24]
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	2b02      	cmp	r3, #2
 8002c5e:	d901      	bls.n	8002c64 <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 8002c60:	2303      	movs	r3, #3
 8002c62:	e0a2      	b.n	8002daa <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002c64:	4b53      	ldr	r3, [pc, #332]	; (8002db4 <HAL_RCC_OscConfig+0x624>)
 8002c66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c68:	2202      	movs	r2, #2
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	d1f1      	bne.n	8002c52 <HAL_RCC_OscConfig+0x4c2>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6a1b      	ldr	r3, [r3, #32]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d100      	bne.n	8002c78 <HAL_RCC_OscConfig+0x4e8>
 8002c76:	e097      	b.n	8002da8 <HAL_RCC_OscConfig+0x618>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c78:	4b4e      	ldr	r3, [pc, #312]	; (8002db4 <HAL_RCC_OscConfig+0x624>)
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	220c      	movs	r2, #12
 8002c7e:	4013      	ands	r3, r2
 8002c80:	2b08      	cmp	r3, #8
 8002c82:	d100      	bne.n	8002c86 <HAL_RCC_OscConfig+0x4f6>
 8002c84:	e06b      	b.n	8002d5e <HAL_RCC_OscConfig+0x5ce>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6a1b      	ldr	r3, [r3, #32]
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d14c      	bne.n	8002d28 <HAL_RCC_OscConfig+0x598>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c8e:	4b49      	ldr	r3, [pc, #292]	; (8002db4 <HAL_RCC_OscConfig+0x624>)
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	4b48      	ldr	r3, [pc, #288]	; (8002db4 <HAL_RCC_OscConfig+0x624>)
 8002c94:	494a      	ldr	r1, [pc, #296]	; (8002dc0 <HAL_RCC_OscConfig+0x630>)
 8002c96:	400a      	ands	r2, r1
 8002c98:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c9a:	f7ff fb03 	bl	80022a4 <HAL_GetTick>
 8002c9e:	0003      	movs	r3, r0
 8002ca0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ca2:	e008      	b.n	8002cb6 <HAL_RCC_OscConfig+0x526>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ca4:	f7ff fafe 	bl	80022a4 <HAL_GetTick>
 8002ca8:	0002      	movs	r2, r0
 8002caa:	69bb      	ldr	r3, [r7, #24]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	2b02      	cmp	r3, #2
 8002cb0:	d901      	bls.n	8002cb6 <HAL_RCC_OscConfig+0x526>
          {
            return HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e079      	b.n	8002daa <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cb6:	4b3f      	ldr	r3, [pc, #252]	; (8002db4 <HAL_RCC_OscConfig+0x624>)
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	2380      	movs	r3, #128	; 0x80
 8002cbc:	049b      	lsls	r3, r3, #18
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	d1f0      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x514>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cc2:	4b3c      	ldr	r3, [pc, #240]	; (8002db4 <HAL_RCC_OscConfig+0x624>)
 8002cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc6:	220f      	movs	r2, #15
 8002cc8:	4393      	bics	r3, r2
 8002cca:	0019      	movs	r1, r3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cd0:	4b38      	ldr	r3, [pc, #224]	; (8002db4 <HAL_RCC_OscConfig+0x624>)
 8002cd2:	430a      	orrs	r2, r1
 8002cd4:	62da      	str	r2, [r3, #44]	; 0x2c
 8002cd6:	4b37      	ldr	r3, [pc, #220]	; (8002db4 <HAL_RCC_OscConfig+0x624>)
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	4a3a      	ldr	r2, [pc, #232]	; (8002dc4 <HAL_RCC_OscConfig+0x634>)
 8002cdc:	4013      	ands	r3, r2
 8002cde:	0019      	movs	r1, r3
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce8:	431a      	orrs	r2, r3
 8002cea:	4b32      	ldr	r3, [pc, #200]	; (8002db4 <HAL_RCC_OscConfig+0x624>)
 8002cec:	430a      	orrs	r2, r1
 8002cee:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cf0:	4b30      	ldr	r3, [pc, #192]	; (8002db4 <HAL_RCC_OscConfig+0x624>)
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	4b2f      	ldr	r3, [pc, #188]	; (8002db4 <HAL_RCC_OscConfig+0x624>)
 8002cf6:	2180      	movs	r1, #128	; 0x80
 8002cf8:	0449      	lsls	r1, r1, #17
 8002cfa:	430a      	orrs	r2, r1
 8002cfc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cfe:	f7ff fad1 	bl	80022a4 <HAL_GetTick>
 8002d02:	0003      	movs	r3, r0
 8002d04:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d06:	e008      	b.n	8002d1a <HAL_RCC_OscConfig+0x58a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d08:	f7ff facc 	bl	80022a4 <HAL_GetTick>
 8002d0c:	0002      	movs	r2, r0
 8002d0e:	69bb      	ldr	r3, [r7, #24]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	2b02      	cmp	r3, #2
 8002d14:	d901      	bls.n	8002d1a <HAL_RCC_OscConfig+0x58a>
          {
            return HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	e047      	b.n	8002daa <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d1a:	4b26      	ldr	r3, [pc, #152]	; (8002db4 <HAL_RCC_OscConfig+0x624>)
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	2380      	movs	r3, #128	; 0x80
 8002d20:	049b      	lsls	r3, r3, #18
 8002d22:	4013      	ands	r3, r2
 8002d24:	d0f0      	beq.n	8002d08 <HAL_RCC_OscConfig+0x578>
 8002d26:	e03f      	b.n	8002da8 <HAL_RCC_OscConfig+0x618>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d28:	4b22      	ldr	r3, [pc, #136]	; (8002db4 <HAL_RCC_OscConfig+0x624>)
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	4b21      	ldr	r3, [pc, #132]	; (8002db4 <HAL_RCC_OscConfig+0x624>)
 8002d2e:	4924      	ldr	r1, [pc, #144]	; (8002dc0 <HAL_RCC_OscConfig+0x630>)
 8002d30:	400a      	ands	r2, r1
 8002d32:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d34:	f7ff fab6 	bl	80022a4 <HAL_GetTick>
 8002d38:	0003      	movs	r3, r0
 8002d3a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d3c:	e008      	b.n	8002d50 <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d3e:	f7ff fab1 	bl	80022a4 <HAL_GetTick>
 8002d42:	0002      	movs	r2, r0
 8002d44:	69bb      	ldr	r3, [r7, #24]
 8002d46:	1ad3      	subs	r3, r2, r3
 8002d48:	2b02      	cmp	r3, #2
 8002d4a:	d901      	bls.n	8002d50 <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 8002d4c:	2303      	movs	r3, #3
 8002d4e:	e02c      	b.n	8002daa <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d50:	4b18      	ldr	r3, [pc, #96]	; (8002db4 <HAL_RCC_OscConfig+0x624>)
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	2380      	movs	r3, #128	; 0x80
 8002d56:	049b      	lsls	r3, r3, #18
 8002d58:	4013      	ands	r3, r2
 8002d5a:	d1f0      	bne.n	8002d3e <HAL_RCC_OscConfig+0x5ae>
 8002d5c:	e024      	b.n	8002da8 <HAL_RCC_OscConfig+0x618>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6a1b      	ldr	r3, [r3, #32]
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d101      	bne.n	8002d6a <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e01f      	b.n	8002daa <HAL_RCC_OscConfig+0x61a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002d6a:	4b12      	ldr	r3, [pc, #72]	; (8002db4 <HAL_RCC_OscConfig+0x624>)
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002d70:	4b10      	ldr	r3, [pc, #64]	; (8002db4 <HAL_RCC_OscConfig+0x624>)
 8002d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d74:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d76:	697a      	ldr	r2, [r7, #20]
 8002d78:	2380      	movs	r3, #128	; 0x80
 8002d7a:	025b      	lsls	r3, r3, #9
 8002d7c:	401a      	ands	r2, r3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d10e      	bne.n	8002da4 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	220f      	movs	r2, #15
 8002d8a:	401a      	ands	r2, r3
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d107      	bne.n	8002da4 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002d94:	697a      	ldr	r2, [r7, #20]
 8002d96:	23f0      	movs	r3, #240	; 0xf0
 8002d98:	039b      	lsls	r3, r3, #14
 8002d9a:	401a      	ands	r2, r3
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d001      	beq.n	8002da8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e000      	b.n	8002daa <HAL_RCC_OscConfig+0x61a>
        }
      }
    }
  }

  return HAL_OK;
 8002da8:	2300      	movs	r3, #0
}
 8002daa:	0018      	movs	r0, r3
 8002dac:	46bd      	mov	sp, r7
 8002dae:	b008      	add	sp, #32
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	46c0      	nop			; (mov r8, r8)
 8002db4:	40021000 	.word	0x40021000
 8002db8:	00001388 	.word	0x00001388
 8002dbc:	efffffff 	.word	0xefffffff
 8002dc0:	feffffff 	.word	0xfeffffff
 8002dc4:	ffc2ffff 	.word	0xffc2ffff

08002dc8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b084      	sub	sp, #16
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d101      	bne.n	8002ddc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e0b3      	b.n	8002f44 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ddc:	4b5b      	ldr	r3, [pc, #364]	; (8002f4c <HAL_RCC_ClockConfig+0x184>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	2201      	movs	r2, #1
 8002de2:	4013      	ands	r3, r2
 8002de4:	683a      	ldr	r2, [r7, #0]
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d911      	bls.n	8002e0e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dea:	4b58      	ldr	r3, [pc, #352]	; (8002f4c <HAL_RCC_ClockConfig+0x184>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	2201      	movs	r2, #1
 8002df0:	4393      	bics	r3, r2
 8002df2:	0019      	movs	r1, r3
 8002df4:	4b55      	ldr	r3, [pc, #340]	; (8002f4c <HAL_RCC_ClockConfig+0x184>)
 8002df6:	683a      	ldr	r2, [r7, #0]
 8002df8:	430a      	orrs	r2, r1
 8002dfa:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dfc:	4b53      	ldr	r3, [pc, #332]	; (8002f4c <HAL_RCC_ClockConfig+0x184>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	2201      	movs	r2, #1
 8002e02:	4013      	ands	r3, r2
 8002e04:	683a      	ldr	r2, [r7, #0]
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d001      	beq.n	8002e0e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e09a      	b.n	8002f44 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	2202      	movs	r2, #2
 8002e14:	4013      	ands	r3, r2
 8002e16:	d015      	beq.n	8002e44 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	2204      	movs	r2, #4
 8002e1e:	4013      	ands	r3, r2
 8002e20:	d006      	beq.n	8002e30 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002e22:	4b4b      	ldr	r3, [pc, #300]	; (8002f50 <HAL_RCC_ClockConfig+0x188>)
 8002e24:	685a      	ldr	r2, [r3, #4]
 8002e26:	4b4a      	ldr	r3, [pc, #296]	; (8002f50 <HAL_RCC_ClockConfig+0x188>)
 8002e28:	21e0      	movs	r1, #224	; 0xe0
 8002e2a:	00c9      	lsls	r1, r1, #3
 8002e2c:	430a      	orrs	r2, r1
 8002e2e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e30:	4b47      	ldr	r3, [pc, #284]	; (8002f50 <HAL_RCC_ClockConfig+0x188>)
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	22f0      	movs	r2, #240	; 0xf0
 8002e36:	4393      	bics	r3, r2
 8002e38:	0019      	movs	r1, r3
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	689a      	ldr	r2, [r3, #8]
 8002e3e:	4b44      	ldr	r3, [pc, #272]	; (8002f50 <HAL_RCC_ClockConfig+0x188>)
 8002e40:	430a      	orrs	r2, r1
 8002e42:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	2201      	movs	r2, #1
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	d040      	beq.n	8002ed0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d107      	bne.n	8002e66 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e56:	4b3e      	ldr	r3, [pc, #248]	; (8002f50 <HAL_RCC_ClockConfig+0x188>)
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	2380      	movs	r3, #128	; 0x80
 8002e5c:	029b      	lsls	r3, r3, #10
 8002e5e:	4013      	ands	r3, r2
 8002e60:	d114      	bne.n	8002e8c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e06e      	b.n	8002f44 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d107      	bne.n	8002e7e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e6e:	4b38      	ldr	r3, [pc, #224]	; (8002f50 <HAL_RCC_ClockConfig+0x188>)
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	2380      	movs	r3, #128	; 0x80
 8002e74:	049b      	lsls	r3, r3, #18
 8002e76:	4013      	ands	r3, r2
 8002e78:	d108      	bne.n	8002e8c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e062      	b.n	8002f44 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e7e:	4b34      	ldr	r3, [pc, #208]	; (8002f50 <HAL_RCC_ClockConfig+0x188>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	2202      	movs	r2, #2
 8002e84:	4013      	ands	r3, r2
 8002e86:	d101      	bne.n	8002e8c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e05b      	b.n	8002f44 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e8c:	4b30      	ldr	r3, [pc, #192]	; (8002f50 <HAL_RCC_ClockConfig+0x188>)
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	2203      	movs	r2, #3
 8002e92:	4393      	bics	r3, r2
 8002e94:	0019      	movs	r1, r3
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	685a      	ldr	r2, [r3, #4]
 8002e9a:	4b2d      	ldr	r3, [pc, #180]	; (8002f50 <HAL_RCC_ClockConfig+0x188>)
 8002e9c:	430a      	orrs	r2, r1
 8002e9e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ea0:	f7ff fa00 	bl	80022a4 <HAL_GetTick>
 8002ea4:	0003      	movs	r3, r0
 8002ea6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ea8:	e009      	b.n	8002ebe <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002eaa:	f7ff f9fb 	bl	80022a4 <HAL_GetTick>
 8002eae:	0002      	movs	r2, r0
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	1ad3      	subs	r3, r2, r3
 8002eb4:	4a27      	ldr	r2, [pc, #156]	; (8002f54 <HAL_RCC_ClockConfig+0x18c>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d901      	bls.n	8002ebe <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e042      	b.n	8002f44 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ebe:	4b24      	ldr	r3, [pc, #144]	; (8002f50 <HAL_RCC_ClockConfig+0x188>)
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	220c      	movs	r2, #12
 8002ec4:	401a      	ands	r2, r3
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d1ec      	bne.n	8002eaa <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ed0:	4b1e      	ldr	r3, [pc, #120]	; (8002f4c <HAL_RCC_ClockConfig+0x184>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	683a      	ldr	r2, [r7, #0]
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d211      	bcs.n	8002f02 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ede:	4b1b      	ldr	r3, [pc, #108]	; (8002f4c <HAL_RCC_ClockConfig+0x184>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	4393      	bics	r3, r2
 8002ee6:	0019      	movs	r1, r3
 8002ee8:	4b18      	ldr	r3, [pc, #96]	; (8002f4c <HAL_RCC_ClockConfig+0x184>)
 8002eea:	683a      	ldr	r2, [r7, #0]
 8002eec:	430a      	orrs	r2, r1
 8002eee:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ef0:	4b16      	ldr	r3, [pc, #88]	; (8002f4c <HAL_RCC_ClockConfig+0x184>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	683a      	ldr	r2, [r7, #0]
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d001      	beq.n	8002f02 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e020      	b.n	8002f44 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	2204      	movs	r2, #4
 8002f08:	4013      	ands	r3, r2
 8002f0a:	d009      	beq.n	8002f20 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002f0c:	4b10      	ldr	r3, [pc, #64]	; (8002f50 <HAL_RCC_ClockConfig+0x188>)
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	4a11      	ldr	r2, [pc, #68]	; (8002f58 <HAL_RCC_ClockConfig+0x190>)
 8002f12:	4013      	ands	r3, r2
 8002f14:	0019      	movs	r1, r3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	68da      	ldr	r2, [r3, #12]
 8002f1a:	4b0d      	ldr	r3, [pc, #52]	; (8002f50 <HAL_RCC_ClockConfig+0x188>)
 8002f1c:	430a      	orrs	r2, r1
 8002f1e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002f20:	f000 f820 	bl	8002f64 <HAL_RCC_GetSysClockFreq>
 8002f24:	0001      	movs	r1, r0
 8002f26:	4b0a      	ldr	r3, [pc, #40]	; (8002f50 <HAL_RCC_ClockConfig+0x188>)
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	091b      	lsrs	r3, r3, #4
 8002f2c:	220f      	movs	r2, #15
 8002f2e:	4013      	ands	r3, r2
 8002f30:	4a0a      	ldr	r2, [pc, #40]	; (8002f5c <HAL_RCC_ClockConfig+0x194>)
 8002f32:	5cd3      	ldrb	r3, [r2, r3]
 8002f34:	000a      	movs	r2, r1
 8002f36:	40da      	lsrs	r2, r3
 8002f38:	4b09      	ldr	r3, [pc, #36]	; (8002f60 <HAL_RCC_ClockConfig+0x198>)
 8002f3a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002f3c:	2000      	movs	r0, #0
 8002f3e:	f7ff f96b 	bl	8002218 <HAL_InitTick>
  
  return HAL_OK;
 8002f42:	2300      	movs	r3, #0
}
 8002f44:	0018      	movs	r0, r3
 8002f46:	46bd      	mov	sp, r7
 8002f48:	b004      	add	sp, #16
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	40022000 	.word	0x40022000
 8002f50:	40021000 	.word	0x40021000
 8002f54:	00001388 	.word	0x00001388
 8002f58:	fffff8ff 	.word	0xfffff8ff
 8002f5c:	08005bf8 	.word	0x08005bf8
 8002f60:	20000004 	.word	0x20000004

08002f64 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f64:	b590      	push	{r4, r7, lr}
 8002f66:	b08f      	sub	sp, #60	; 0x3c
 8002f68:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002f6a:	2314      	movs	r3, #20
 8002f6c:	18fb      	adds	r3, r7, r3
 8002f6e:	4a2b      	ldr	r2, [pc, #172]	; (800301c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f70:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002f72:	c313      	stmia	r3!, {r0, r1, r4}
 8002f74:	6812      	ldr	r2, [r2, #0]
 8002f76:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002f78:	1d3b      	adds	r3, r7, #4
 8002f7a:	4a29      	ldr	r2, [pc, #164]	; (8003020 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002f7c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002f7e:	c313      	stmia	r3!, {r0, r1, r4}
 8002f80:	6812      	ldr	r2, [r2, #0]
 8002f82:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002f84:	2300      	movs	r3, #0
 8002f86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f88:	2300      	movs	r3, #0
 8002f8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	637b      	str	r3, [r7, #52]	; 0x34
 8002f90:	2300      	movs	r3, #0
 8002f92:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002f94:	2300      	movs	r3, #0
 8002f96:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002f98:	4b22      	ldr	r3, [pc, #136]	; (8003024 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fa0:	220c      	movs	r2, #12
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	2b04      	cmp	r3, #4
 8002fa6:	d002      	beq.n	8002fae <HAL_RCC_GetSysClockFreq+0x4a>
 8002fa8:	2b08      	cmp	r3, #8
 8002faa:	d003      	beq.n	8002fb4 <HAL_RCC_GetSysClockFreq+0x50>
 8002fac:	e02d      	b.n	800300a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002fae:	4b1e      	ldr	r3, [pc, #120]	; (8003028 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002fb0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002fb2:	e02d      	b.n	8003010 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fb6:	0c9b      	lsrs	r3, r3, #18
 8002fb8:	220f      	movs	r2, #15
 8002fba:	4013      	ands	r3, r2
 8002fbc:	2214      	movs	r2, #20
 8002fbe:	18ba      	adds	r2, r7, r2
 8002fc0:	5cd3      	ldrb	r3, [r2, r3]
 8002fc2:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002fc4:	4b17      	ldr	r3, [pc, #92]	; (8003024 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc8:	220f      	movs	r2, #15
 8002fca:	4013      	ands	r3, r2
 8002fcc:	1d3a      	adds	r2, r7, #4
 8002fce:	5cd3      	ldrb	r3, [r2, r3]
 8002fd0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002fd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002fd4:	2380      	movs	r3, #128	; 0x80
 8002fd6:	025b      	lsls	r3, r3, #9
 8002fd8:	4013      	ands	r3, r2
 8002fda:	d009      	beq.n	8002ff0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002fdc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002fde:	4812      	ldr	r0, [pc, #72]	; (8003028 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002fe0:	f7fd f89c 	bl	800011c <__udivsi3>
 8002fe4:	0003      	movs	r3, r0
 8002fe6:	001a      	movs	r2, r3
 8002fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fea:	4353      	muls	r3, r2
 8002fec:	637b      	str	r3, [r7, #52]	; 0x34
 8002fee:	e009      	b.n	8003004 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002ff0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ff2:	000a      	movs	r2, r1
 8002ff4:	0152      	lsls	r2, r2, #5
 8002ff6:	1a52      	subs	r2, r2, r1
 8002ff8:	0193      	lsls	r3, r2, #6
 8002ffa:	1a9b      	subs	r3, r3, r2
 8002ffc:	00db      	lsls	r3, r3, #3
 8002ffe:	185b      	adds	r3, r3, r1
 8003000:	021b      	lsls	r3, r3, #8
 8003002:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8003004:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003006:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003008:	e002      	b.n	8003010 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800300a:	4b07      	ldr	r3, [pc, #28]	; (8003028 <HAL_RCC_GetSysClockFreq+0xc4>)
 800300c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800300e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003012:	0018      	movs	r0, r3
 8003014:	46bd      	mov	sp, r7
 8003016:	b00f      	add	sp, #60	; 0x3c
 8003018:	bd90      	pop	{r4, r7, pc}
 800301a:	46c0      	nop			; (mov r8, r8)
 800301c:	08005b98 	.word	0x08005b98
 8003020:	08005ba8 	.word	0x08005ba8
 8003024:	40021000 	.word	0x40021000
 8003028:	007a1200 	.word	0x007a1200

0800302c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003030:	4b02      	ldr	r3, [pc, #8]	; (800303c <HAL_RCC_GetHCLKFreq+0x10>)
 8003032:	681b      	ldr	r3, [r3, #0]
}
 8003034:	0018      	movs	r0, r3
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
 800303a:	46c0      	nop			; (mov r8, r8)
 800303c:	20000004 	.word	0x20000004

08003040 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8003044:	f7ff fff2 	bl	800302c <HAL_RCC_GetHCLKFreq>
 8003048:	0001      	movs	r1, r0
 800304a:	4b06      	ldr	r3, [pc, #24]	; (8003064 <HAL_RCC_GetPCLK1Freq+0x24>)
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	0a1b      	lsrs	r3, r3, #8
 8003050:	2207      	movs	r2, #7
 8003052:	4013      	ands	r3, r2
 8003054:	4a04      	ldr	r2, [pc, #16]	; (8003068 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003056:	5cd3      	ldrb	r3, [r2, r3]
 8003058:	40d9      	lsrs	r1, r3
 800305a:	000b      	movs	r3, r1
}    
 800305c:	0018      	movs	r0, r3
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
 8003062:	46c0      	nop			; (mov r8, r8)
 8003064:	40021000 	.word	0x40021000
 8003068:	08005c08 	.word	0x08005c08

0800306c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b086      	sub	sp, #24
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003074:	2300      	movs	r3, #0
 8003076:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8003078:	2300      	movs	r3, #0
 800307a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	2380      	movs	r3, #128	; 0x80
 8003082:	025b      	lsls	r3, r3, #9
 8003084:	4013      	ands	r3, r2
 8003086:	d100      	bne.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8003088:	e08f      	b.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800308a:	2317      	movs	r3, #23
 800308c:	18fb      	adds	r3, r7, r3
 800308e:	2200      	movs	r2, #0
 8003090:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003092:	4b5f      	ldr	r3, [pc, #380]	; (8003210 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003094:	69da      	ldr	r2, [r3, #28]
 8003096:	2380      	movs	r3, #128	; 0x80
 8003098:	055b      	lsls	r3, r3, #21
 800309a:	4013      	ands	r3, r2
 800309c:	d111      	bne.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800309e:	4b5c      	ldr	r3, [pc, #368]	; (8003210 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80030a0:	69da      	ldr	r2, [r3, #28]
 80030a2:	4b5b      	ldr	r3, [pc, #364]	; (8003210 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80030a4:	2180      	movs	r1, #128	; 0x80
 80030a6:	0549      	lsls	r1, r1, #21
 80030a8:	430a      	orrs	r2, r1
 80030aa:	61da      	str	r2, [r3, #28]
 80030ac:	4b58      	ldr	r3, [pc, #352]	; (8003210 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80030ae:	69da      	ldr	r2, [r3, #28]
 80030b0:	2380      	movs	r3, #128	; 0x80
 80030b2:	055b      	lsls	r3, r3, #21
 80030b4:	4013      	ands	r3, r2
 80030b6:	60bb      	str	r3, [r7, #8]
 80030b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030ba:	2317      	movs	r3, #23
 80030bc:	18fb      	adds	r3, r7, r3
 80030be:	2201      	movs	r2, #1
 80030c0:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030c2:	4b54      	ldr	r3, [pc, #336]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	2380      	movs	r3, #128	; 0x80
 80030c8:	005b      	lsls	r3, r3, #1
 80030ca:	4013      	ands	r3, r2
 80030cc:	d11a      	bne.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030ce:	4b51      	ldr	r3, [pc, #324]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	4b50      	ldr	r3, [pc, #320]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80030d4:	2180      	movs	r1, #128	; 0x80
 80030d6:	0049      	lsls	r1, r1, #1
 80030d8:	430a      	orrs	r2, r1
 80030da:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030dc:	f7ff f8e2 	bl	80022a4 <HAL_GetTick>
 80030e0:	0003      	movs	r3, r0
 80030e2:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030e4:	e008      	b.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030e6:	f7ff f8dd 	bl	80022a4 <HAL_GetTick>
 80030ea:	0002      	movs	r2, r0
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	2b64      	cmp	r3, #100	; 0x64
 80030f2:	d901      	bls.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 80030f4:	2303      	movs	r3, #3
 80030f6:	e087      	b.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030f8:	4b46      	ldr	r3, [pc, #280]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	2380      	movs	r3, #128	; 0x80
 80030fe:	005b      	lsls	r3, r3, #1
 8003100:	4013      	ands	r3, r2
 8003102:	d0f0      	beq.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003104:	4b42      	ldr	r3, [pc, #264]	; (8003210 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003106:	6a1a      	ldr	r2, [r3, #32]
 8003108:	23c0      	movs	r3, #192	; 0xc0
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	4013      	ands	r3, r2
 800310e:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d034      	beq.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x114>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	685a      	ldr	r2, [r3, #4]
 800311a:	23c0      	movs	r3, #192	; 0xc0
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	4013      	ands	r3, r2
 8003120:	68fa      	ldr	r2, [r7, #12]
 8003122:	429a      	cmp	r2, r3
 8003124:	d02c      	beq.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003126:	4b3a      	ldr	r3, [pc, #232]	; (8003210 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003128:	6a1b      	ldr	r3, [r3, #32]
 800312a:	4a3b      	ldr	r2, [pc, #236]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800312c:	4013      	ands	r3, r2
 800312e:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003130:	4b37      	ldr	r3, [pc, #220]	; (8003210 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003132:	6a1a      	ldr	r2, [r3, #32]
 8003134:	4b36      	ldr	r3, [pc, #216]	; (8003210 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003136:	2180      	movs	r1, #128	; 0x80
 8003138:	0249      	lsls	r1, r1, #9
 800313a:	430a      	orrs	r2, r1
 800313c:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800313e:	4b34      	ldr	r3, [pc, #208]	; (8003210 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003140:	6a1a      	ldr	r2, [r3, #32]
 8003142:	4b33      	ldr	r3, [pc, #204]	; (8003210 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003144:	4935      	ldr	r1, [pc, #212]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003146:	400a      	ands	r2, r1
 8003148:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800314a:	4b31      	ldr	r3, [pc, #196]	; (8003210 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800314c:	68fa      	ldr	r2, [r7, #12]
 800314e:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2201      	movs	r2, #1
 8003154:	4013      	ands	r3, r2
 8003156:	d013      	beq.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003158:	f7ff f8a4 	bl	80022a4 <HAL_GetTick>
 800315c:	0003      	movs	r3, r0
 800315e:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003160:	e009      	b.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003162:	f7ff f89f 	bl	80022a4 <HAL_GetTick>
 8003166:	0002      	movs	r2, r0
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	1ad3      	subs	r3, r2, r3
 800316c:	4a2c      	ldr	r2, [pc, #176]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d901      	bls.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8003172:	2303      	movs	r3, #3
 8003174:	e048      	b.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0x19c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003176:	4b26      	ldr	r3, [pc, #152]	; (8003210 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003178:	6a1b      	ldr	r3, [r3, #32]
 800317a:	2202      	movs	r2, #2
 800317c:	4013      	ands	r3, r2
 800317e:	d0f0      	beq.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003180:	4b23      	ldr	r3, [pc, #140]	; (8003210 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003182:	6a1b      	ldr	r3, [r3, #32]
 8003184:	4a24      	ldr	r2, [pc, #144]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003186:	4013      	ands	r3, r2
 8003188:	0019      	movs	r1, r3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	685a      	ldr	r2, [r3, #4]
 800318e:	4b20      	ldr	r3, [pc, #128]	; (8003210 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003190:	430a      	orrs	r2, r1
 8003192:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003194:	2317      	movs	r3, #23
 8003196:	18fb      	adds	r3, r7, r3
 8003198:	781b      	ldrb	r3, [r3, #0]
 800319a:	2b01      	cmp	r3, #1
 800319c:	d105      	bne.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800319e:	4b1c      	ldr	r3, [pc, #112]	; (8003210 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80031a0:	69da      	ldr	r2, [r3, #28]
 80031a2:	4b1b      	ldr	r3, [pc, #108]	; (8003210 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80031a4:	491f      	ldr	r1, [pc, #124]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80031a6:	400a      	ands	r2, r1
 80031a8:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	2201      	movs	r2, #1
 80031b0:	4013      	ands	r3, r2
 80031b2:	d009      	beq.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80031b4:	4b16      	ldr	r3, [pc, #88]	; (8003210 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80031b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b8:	2203      	movs	r2, #3
 80031ba:	4393      	bics	r3, r2
 80031bc:	0019      	movs	r1, r3
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	689a      	ldr	r2, [r3, #8]
 80031c2:	4b13      	ldr	r3, [pc, #76]	; (8003210 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80031c4:	430a      	orrs	r2, r1
 80031c6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	2220      	movs	r2, #32
 80031ce:	4013      	ands	r3, r2
 80031d0:	d009      	beq.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80031d2:	4b0f      	ldr	r3, [pc, #60]	; (8003210 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80031d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d6:	2210      	movs	r2, #16
 80031d8:	4393      	bics	r3, r2
 80031da:	0019      	movs	r1, r3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	68da      	ldr	r2, [r3, #12]
 80031e0:	4b0b      	ldr	r3, [pc, #44]	; (8003210 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80031e2:	430a      	orrs	r2, r1
 80031e4:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	2380      	movs	r3, #128	; 0x80
 80031ec:	00db      	lsls	r3, r3, #3
 80031ee:	4013      	ands	r3, r2
 80031f0:	d009      	beq.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80031f2:	4b07      	ldr	r3, [pc, #28]	; (8003210 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80031f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f6:	2240      	movs	r2, #64	; 0x40
 80031f8:	4393      	bics	r3, r2
 80031fa:	0019      	movs	r1, r3
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	691a      	ldr	r2, [r3, #16]
 8003200:	4b03      	ldr	r3, [pc, #12]	; (8003210 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003202:	430a      	orrs	r2, r1
 8003204:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8003206:	2300      	movs	r3, #0
}
 8003208:	0018      	movs	r0, r3
 800320a:	46bd      	mov	sp, r7
 800320c:	b006      	add	sp, #24
 800320e:	bd80      	pop	{r7, pc}
 8003210:	40021000 	.word	0x40021000
 8003214:	40007000 	.word	0x40007000
 8003218:	fffffcff 	.word	0xfffffcff
 800321c:	fffeffff 	.word	0xfffeffff
 8003220:	00001388 	.word	0x00001388
 8003224:	efffffff 	.word	0xefffffff

08003228 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b082      	sub	sp, #8
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d101      	bne.n	800323a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e042      	b.n	80032c0 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	223d      	movs	r2, #61	; 0x3d
 800323e:	5c9b      	ldrb	r3, [r3, r2]
 8003240:	b2db      	uxtb	r3, r3
 8003242:	2b00      	cmp	r3, #0
 8003244:	d107      	bne.n	8003256 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	223c      	movs	r2, #60	; 0x3c
 800324a:	2100      	movs	r1, #0
 800324c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	0018      	movs	r0, r3
 8003252:	f7fe fe6b 	bl	8001f2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	223d      	movs	r2, #61	; 0x3d
 800325a:	2102      	movs	r1, #2
 800325c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	3304      	adds	r3, #4
 8003266:	0019      	movs	r1, r3
 8003268:	0010      	movs	r0, r2
 800326a:	f000 fc53 	bl	8003b14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2246      	movs	r2, #70	; 0x46
 8003272:	2101      	movs	r1, #1
 8003274:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	223e      	movs	r2, #62	; 0x3e
 800327a:	2101      	movs	r1, #1
 800327c:	5499      	strb	r1, [r3, r2]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	223f      	movs	r2, #63	; 0x3f
 8003282:	2101      	movs	r1, #1
 8003284:	5499      	strb	r1, [r3, r2]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2240      	movs	r2, #64	; 0x40
 800328a:	2101      	movs	r1, #1
 800328c:	5499      	strb	r1, [r3, r2]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2241      	movs	r2, #65	; 0x41
 8003292:	2101      	movs	r1, #1
 8003294:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2242      	movs	r2, #66	; 0x42
 800329a:	2101      	movs	r1, #1
 800329c:	5499      	strb	r1, [r3, r2]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2243      	movs	r2, #67	; 0x43
 80032a2:	2101      	movs	r1, #1
 80032a4:	5499      	strb	r1, [r3, r2]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2244      	movs	r2, #68	; 0x44
 80032aa:	2101      	movs	r1, #1
 80032ac:	5499      	strb	r1, [r3, r2]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2245      	movs	r2, #69	; 0x45
 80032b2:	2101      	movs	r1, #1
 80032b4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	223d      	movs	r2, #61	; 0x3d
 80032ba:	2101      	movs	r1, #1
 80032bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80032be:	2300      	movs	r3, #0
}
 80032c0:	0018      	movs	r0, r3
 80032c2:	46bd      	mov	sp, r7
 80032c4:	b002      	add	sp, #8
 80032c6:	bd80      	pop	{r7, pc}

080032c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b084      	sub	sp, #16
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	223d      	movs	r2, #61	; 0x3d
 80032d4:	5c9b      	ldrb	r3, [r3, r2]
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d001      	beq.n	80032e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	e03b      	b.n	8003358 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	223d      	movs	r2, #61	; 0x3d
 80032e4:	2102      	movs	r1, #2
 80032e6:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	68da      	ldr	r2, [r3, #12]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	2101      	movs	r1, #1
 80032f4:	430a      	orrs	r2, r1
 80032f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a18      	ldr	r2, [pc, #96]	; (8003360 <HAL_TIM_Base_Start_IT+0x98>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d00f      	beq.n	8003322 <HAL_TIM_Base_Start_IT+0x5a>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	2380      	movs	r3, #128	; 0x80
 8003308:	05db      	lsls	r3, r3, #23
 800330a:	429a      	cmp	r2, r3
 800330c:	d009      	beq.n	8003322 <HAL_TIM_Base_Start_IT+0x5a>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a14      	ldr	r2, [pc, #80]	; (8003364 <HAL_TIM_Base_Start_IT+0x9c>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d004      	beq.n	8003322 <HAL_TIM_Base_Start_IT+0x5a>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a12      	ldr	r2, [pc, #72]	; (8003368 <HAL_TIM_Base_Start_IT+0xa0>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d111      	bne.n	8003346 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	2207      	movs	r2, #7
 800332a:	4013      	ands	r3, r2
 800332c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2b06      	cmp	r3, #6
 8003332:	d010      	beq.n	8003356 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	2101      	movs	r1, #1
 8003340:	430a      	orrs	r2, r1
 8003342:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003344:	e007      	b.n	8003356 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	2101      	movs	r1, #1
 8003352:	430a      	orrs	r2, r1
 8003354:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003356:	2300      	movs	r3, #0
}
 8003358:	0018      	movs	r0, r3
 800335a:	46bd      	mov	sp, r7
 800335c:	b004      	add	sp, #16
 800335e:	bd80      	pop	{r7, pc}
 8003360:	40012c00 	.word	0x40012c00
 8003364:	40000400 	.word	0x40000400
 8003368:	40014000 	.word	0x40014000

0800336c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b082      	sub	sp, #8
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d101      	bne.n	800337e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e042      	b.n	8003404 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	223d      	movs	r2, #61	; 0x3d
 8003382:	5c9b      	ldrb	r3, [r3, r2]
 8003384:	b2db      	uxtb	r3, r3
 8003386:	2b00      	cmp	r3, #0
 8003388:	d107      	bne.n	800339a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	223c      	movs	r2, #60	; 0x3c
 800338e:	2100      	movs	r1, #0
 8003390:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	0018      	movs	r0, r3
 8003396:	f000 f839 	bl	800340c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	223d      	movs	r2, #61	; 0x3d
 800339e:	2102      	movs	r1, #2
 80033a0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	3304      	adds	r3, #4
 80033aa:	0019      	movs	r1, r3
 80033ac:	0010      	movs	r0, r2
 80033ae:	f000 fbb1 	bl	8003b14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2246      	movs	r2, #70	; 0x46
 80033b6:	2101      	movs	r1, #1
 80033b8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	223e      	movs	r2, #62	; 0x3e
 80033be:	2101      	movs	r1, #1
 80033c0:	5499      	strb	r1, [r3, r2]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	223f      	movs	r2, #63	; 0x3f
 80033c6:	2101      	movs	r1, #1
 80033c8:	5499      	strb	r1, [r3, r2]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2240      	movs	r2, #64	; 0x40
 80033ce:	2101      	movs	r1, #1
 80033d0:	5499      	strb	r1, [r3, r2]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2241      	movs	r2, #65	; 0x41
 80033d6:	2101      	movs	r1, #1
 80033d8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2242      	movs	r2, #66	; 0x42
 80033de:	2101      	movs	r1, #1
 80033e0:	5499      	strb	r1, [r3, r2]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2243      	movs	r2, #67	; 0x43
 80033e6:	2101      	movs	r1, #1
 80033e8:	5499      	strb	r1, [r3, r2]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2244      	movs	r2, #68	; 0x44
 80033ee:	2101      	movs	r1, #1
 80033f0:	5499      	strb	r1, [r3, r2]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2245      	movs	r2, #69	; 0x45
 80033f6:	2101      	movs	r1, #1
 80033f8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	223d      	movs	r2, #61	; 0x3d
 80033fe:	2101      	movs	r1, #1
 8003400:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003402:	2300      	movs	r3, #0
}
 8003404:	0018      	movs	r0, r3
 8003406:	46bd      	mov	sp, r7
 8003408:	b002      	add	sp, #8
 800340a:	bd80      	pop	{r7, pc}

0800340c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b082      	sub	sp, #8
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003414:	46c0      	nop			; (mov r8, r8)
 8003416:	46bd      	mov	sp, r7
 8003418:	b002      	add	sp, #8
 800341a:	bd80      	pop	{r7, pc}

0800341c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b084      	sub	sp, #16
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d108      	bne.n	800343e <HAL_TIM_PWM_Start+0x22>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	223e      	movs	r2, #62	; 0x3e
 8003430:	5c9b      	ldrb	r3, [r3, r2]
 8003432:	b2db      	uxtb	r3, r3
 8003434:	3b01      	subs	r3, #1
 8003436:	1e5a      	subs	r2, r3, #1
 8003438:	4193      	sbcs	r3, r2
 800343a:	b2db      	uxtb	r3, r3
 800343c:	e01f      	b.n	800347e <HAL_TIM_PWM_Start+0x62>
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	2b04      	cmp	r3, #4
 8003442:	d108      	bne.n	8003456 <HAL_TIM_PWM_Start+0x3a>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	223f      	movs	r2, #63	; 0x3f
 8003448:	5c9b      	ldrb	r3, [r3, r2]
 800344a:	b2db      	uxtb	r3, r3
 800344c:	3b01      	subs	r3, #1
 800344e:	1e5a      	subs	r2, r3, #1
 8003450:	4193      	sbcs	r3, r2
 8003452:	b2db      	uxtb	r3, r3
 8003454:	e013      	b.n	800347e <HAL_TIM_PWM_Start+0x62>
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	2b08      	cmp	r3, #8
 800345a:	d108      	bne.n	800346e <HAL_TIM_PWM_Start+0x52>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2240      	movs	r2, #64	; 0x40
 8003460:	5c9b      	ldrb	r3, [r3, r2]
 8003462:	b2db      	uxtb	r3, r3
 8003464:	3b01      	subs	r3, #1
 8003466:	1e5a      	subs	r2, r3, #1
 8003468:	4193      	sbcs	r3, r2
 800346a:	b2db      	uxtb	r3, r3
 800346c:	e007      	b.n	800347e <HAL_TIM_PWM_Start+0x62>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2241      	movs	r2, #65	; 0x41
 8003472:	5c9b      	ldrb	r3, [r3, r2]
 8003474:	b2db      	uxtb	r3, r3
 8003476:	3b01      	subs	r3, #1
 8003478:	1e5a      	subs	r2, r3, #1
 800347a:	4193      	sbcs	r3, r2
 800347c:	b2db      	uxtb	r3, r3
 800347e:	2b00      	cmp	r3, #0
 8003480:	d001      	beq.n	8003486 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e074      	b.n	8003570 <HAL_TIM_PWM_Start+0x154>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d104      	bne.n	8003496 <HAL_TIM_PWM_Start+0x7a>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	223e      	movs	r2, #62	; 0x3e
 8003490:	2102      	movs	r1, #2
 8003492:	5499      	strb	r1, [r3, r2]
 8003494:	e013      	b.n	80034be <HAL_TIM_PWM_Start+0xa2>
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	2b04      	cmp	r3, #4
 800349a:	d104      	bne.n	80034a6 <HAL_TIM_PWM_Start+0x8a>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	223f      	movs	r2, #63	; 0x3f
 80034a0:	2102      	movs	r1, #2
 80034a2:	5499      	strb	r1, [r3, r2]
 80034a4:	e00b      	b.n	80034be <HAL_TIM_PWM_Start+0xa2>
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	2b08      	cmp	r3, #8
 80034aa:	d104      	bne.n	80034b6 <HAL_TIM_PWM_Start+0x9a>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2240      	movs	r2, #64	; 0x40
 80034b0:	2102      	movs	r1, #2
 80034b2:	5499      	strb	r1, [r3, r2]
 80034b4:	e003      	b.n	80034be <HAL_TIM_PWM_Start+0xa2>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2241      	movs	r2, #65	; 0x41
 80034ba:	2102      	movs	r1, #2
 80034bc:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	6839      	ldr	r1, [r7, #0]
 80034c4:	2201      	movs	r2, #1
 80034c6:	0018      	movs	r0, r3
 80034c8:	f000 fe3a 	bl	8004140 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a29      	ldr	r2, [pc, #164]	; (8003578 <HAL_TIM_PWM_Start+0x15c>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d00e      	beq.n	80034f4 <HAL_TIM_PWM_Start+0xd8>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a28      	ldr	r2, [pc, #160]	; (800357c <HAL_TIM_PWM_Start+0x160>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d009      	beq.n	80034f4 <HAL_TIM_PWM_Start+0xd8>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a26      	ldr	r2, [pc, #152]	; (8003580 <HAL_TIM_PWM_Start+0x164>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d004      	beq.n	80034f4 <HAL_TIM_PWM_Start+0xd8>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a25      	ldr	r2, [pc, #148]	; (8003584 <HAL_TIM_PWM_Start+0x168>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d101      	bne.n	80034f8 <HAL_TIM_PWM_Start+0xdc>
 80034f4:	2301      	movs	r3, #1
 80034f6:	e000      	b.n	80034fa <HAL_TIM_PWM_Start+0xde>
 80034f8:	2300      	movs	r3, #0
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d008      	beq.n	8003510 <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	2180      	movs	r1, #128	; 0x80
 800350a:	0209      	lsls	r1, r1, #8
 800350c:	430a      	orrs	r2, r1
 800350e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a18      	ldr	r2, [pc, #96]	; (8003578 <HAL_TIM_PWM_Start+0x15c>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d00f      	beq.n	800353a <HAL_TIM_PWM_Start+0x11e>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	2380      	movs	r3, #128	; 0x80
 8003520:	05db      	lsls	r3, r3, #23
 8003522:	429a      	cmp	r2, r3
 8003524:	d009      	beq.n	800353a <HAL_TIM_PWM_Start+0x11e>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a17      	ldr	r2, [pc, #92]	; (8003588 <HAL_TIM_PWM_Start+0x16c>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d004      	beq.n	800353a <HAL_TIM_PWM_Start+0x11e>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a11      	ldr	r2, [pc, #68]	; (800357c <HAL_TIM_PWM_Start+0x160>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d111      	bne.n	800355e <HAL_TIM_PWM_Start+0x142>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	2207      	movs	r2, #7
 8003542:	4013      	ands	r3, r2
 8003544:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2b06      	cmp	r3, #6
 800354a:	d010      	beq.n	800356e <HAL_TIM_PWM_Start+0x152>
    {
      __HAL_TIM_ENABLE(htim);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	2101      	movs	r1, #1
 8003558:	430a      	orrs	r2, r1
 800355a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800355c:	e007      	b.n	800356e <HAL_TIM_PWM_Start+0x152>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	2101      	movs	r1, #1
 800356a:	430a      	orrs	r2, r1
 800356c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800356e:	2300      	movs	r3, #0
}
 8003570:	0018      	movs	r0, r3
 8003572:	46bd      	mov	sp, r7
 8003574:	b004      	add	sp, #16
 8003576:	bd80      	pop	{r7, pc}
 8003578:	40012c00 	.word	0x40012c00
 800357c:	40014000 	.word	0x40014000
 8003580:	40014400 	.word	0x40014400
 8003584:	40014800 	.word	0x40014800
 8003588:	40000400 	.word	0x40000400

0800358c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b082      	sub	sp, #8
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	691b      	ldr	r3, [r3, #16]
 800359a:	2202      	movs	r2, #2
 800359c:	4013      	ands	r3, r2
 800359e:	2b02      	cmp	r3, #2
 80035a0:	d124      	bne.n	80035ec <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	2202      	movs	r2, #2
 80035aa:	4013      	ands	r3, r2
 80035ac:	2b02      	cmp	r3, #2
 80035ae:	d11d      	bne.n	80035ec <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	2203      	movs	r2, #3
 80035b6:	4252      	negs	r2, r2
 80035b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2201      	movs	r2, #1
 80035be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	699b      	ldr	r3, [r3, #24]
 80035c6:	2203      	movs	r2, #3
 80035c8:	4013      	ands	r3, r2
 80035ca:	d004      	beq.n	80035d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	0018      	movs	r0, r3
 80035d0:	f000 fa88 	bl	8003ae4 <HAL_TIM_IC_CaptureCallback>
 80035d4:	e007      	b.n	80035e6 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	0018      	movs	r0, r3
 80035da:	f000 fa7b 	bl	8003ad4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	0018      	movs	r0, r3
 80035e2:	f000 fa87 	bl	8003af4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2200      	movs	r2, #0
 80035ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	691b      	ldr	r3, [r3, #16]
 80035f2:	2204      	movs	r2, #4
 80035f4:	4013      	ands	r3, r2
 80035f6:	2b04      	cmp	r3, #4
 80035f8:	d125      	bne.n	8003646 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	2204      	movs	r2, #4
 8003602:	4013      	ands	r3, r2
 8003604:	2b04      	cmp	r3, #4
 8003606:	d11e      	bne.n	8003646 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	2205      	movs	r2, #5
 800360e:	4252      	negs	r2, r2
 8003610:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2202      	movs	r2, #2
 8003616:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	699a      	ldr	r2, [r3, #24]
 800361e:	23c0      	movs	r3, #192	; 0xc0
 8003620:	009b      	lsls	r3, r3, #2
 8003622:	4013      	ands	r3, r2
 8003624:	d004      	beq.n	8003630 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	0018      	movs	r0, r3
 800362a:	f000 fa5b 	bl	8003ae4 <HAL_TIM_IC_CaptureCallback>
 800362e:	e007      	b.n	8003640 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	0018      	movs	r0, r3
 8003634:	f000 fa4e 	bl	8003ad4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	0018      	movs	r0, r3
 800363c:	f000 fa5a 	bl	8003af4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2200      	movs	r2, #0
 8003644:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	691b      	ldr	r3, [r3, #16]
 800364c:	2208      	movs	r2, #8
 800364e:	4013      	ands	r3, r2
 8003650:	2b08      	cmp	r3, #8
 8003652:	d124      	bne.n	800369e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	2208      	movs	r2, #8
 800365c:	4013      	ands	r3, r2
 800365e:	2b08      	cmp	r3, #8
 8003660:	d11d      	bne.n	800369e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	2209      	movs	r2, #9
 8003668:	4252      	negs	r2, r2
 800366a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2204      	movs	r2, #4
 8003670:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	69db      	ldr	r3, [r3, #28]
 8003678:	2203      	movs	r2, #3
 800367a:	4013      	ands	r3, r2
 800367c:	d004      	beq.n	8003688 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	0018      	movs	r0, r3
 8003682:	f000 fa2f 	bl	8003ae4 <HAL_TIM_IC_CaptureCallback>
 8003686:	e007      	b.n	8003698 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	0018      	movs	r0, r3
 800368c:	f000 fa22 	bl	8003ad4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	0018      	movs	r0, r3
 8003694:	f000 fa2e 	bl	8003af4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2200      	movs	r2, #0
 800369c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	691b      	ldr	r3, [r3, #16]
 80036a4:	2210      	movs	r2, #16
 80036a6:	4013      	ands	r3, r2
 80036a8:	2b10      	cmp	r3, #16
 80036aa:	d125      	bne.n	80036f8 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	68db      	ldr	r3, [r3, #12]
 80036b2:	2210      	movs	r2, #16
 80036b4:	4013      	ands	r3, r2
 80036b6:	2b10      	cmp	r3, #16
 80036b8:	d11e      	bne.n	80036f8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	2211      	movs	r2, #17
 80036c0:	4252      	negs	r2, r2
 80036c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2208      	movs	r2, #8
 80036c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	69da      	ldr	r2, [r3, #28]
 80036d0:	23c0      	movs	r3, #192	; 0xc0
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	4013      	ands	r3, r2
 80036d6:	d004      	beq.n	80036e2 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	0018      	movs	r0, r3
 80036dc:	f000 fa02 	bl	8003ae4 <HAL_TIM_IC_CaptureCallback>
 80036e0:	e007      	b.n	80036f2 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	0018      	movs	r0, r3
 80036e6:	f000 f9f5 	bl	8003ad4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	0018      	movs	r0, r3
 80036ee:	f000 fa01 	bl	8003af4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2200      	movs	r2, #0
 80036f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	691b      	ldr	r3, [r3, #16]
 80036fe:	2201      	movs	r2, #1
 8003700:	4013      	ands	r3, r2
 8003702:	2b01      	cmp	r3, #1
 8003704:	d10f      	bne.n	8003726 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	2201      	movs	r2, #1
 800370e:	4013      	ands	r3, r2
 8003710:	2b01      	cmp	r3, #1
 8003712:	d108      	bne.n	8003726 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	2202      	movs	r2, #2
 800371a:	4252      	negs	r2, r2
 800371c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	0018      	movs	r0, r3
 8003722:	f000 f9cf 	bl	8003ac4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	691b      	ldr	r3, [r3, #16]
 800372c:	2280      	movs	r2, #128	; 0x80
 800372e:	4013      	ands	r3, r2
 8003730:	2b80      	cmp	r3, #128	; 0x80
 8003732:	d10f      	bne.n	8003754 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	68db      	ldr	r3, [r3, #12]
 800373a:	2280      	movs	r2, #128	; 0x80
 800373c:	4013      	ands	r3, r2
 800373e:	2b80      	cmp	r3, #128	; 0x80
 8003740:	d108      	bne.n	8003754 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	2281      	movs	r2, #129	; 0x81
 8003748:	4252      	negs	r2, r2
 800374a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	0018      	movs	r0, r3
 8003750:	f000 fe7a 	bl	8004448 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	691b      	ldr	r3, [r3, #16]
 800375a:	2240      	movs	r2, #64	; 0x40
 800375c:	4013      	ands	r3, r2
 800375e:	2b40      	cmp	r3, #64	; 0x40
 8003760:	d10f      	bne.n	8003782 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	2240      	movs	r2, #64	; 0x40
 800376a:	4013      	ands	r3, r2
 800376c:	2b40      	cmp	r3, #64	; 0x40
 800376e:	d108      	bne.n	8003782 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	2241      	movs	r2, #65	; 0x41
 8003776:	4252      	negs	r2, r2
 8003778:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	0018      	movs	r0, r3
 800377e:	f000 f9c1 	bl	8003b04 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	691b      	ldr	r3, [r3, #16]
 8003788:	2220      	movs	r2, #32
 800378a:	4013      	ands	r3, r2
 800378c:	2b20      	cmp	r3, #32
 800378e:	d10f      	bne.n	80037b0 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	68db      	ldr	r3, [r3, #12]
 8003796:	2220      	movs	r2, #32
 8003798:	4013      	ands	r3, r2
 800379a:	2b20      	cmp	r3, #32
 800379c:	d108      	bne.n	80037b0 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	2221      	movs	r2, #33	; 0x21
 80037a4:	4252      	negs	r2, r2
 80037a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	0018      	movs	r0, r3
 80037ac:	f000 fe44 	bl	8004438 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80037b0:	46c0      	nop			; (mov r8, r8)
 80037b2:	46bd      	mov	sp, r7
 80037b4:	b002      	add	sp, #8
 80037b6:	bd80      	pop	{r7, pc}

080037b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b086      	sub	sp, #24
 80037bc:	af00      	add	r7, sp, #0
 80037be:	60f8      	str	r0, [r7, #12]
 80037c0:	60b9      	str	r1, [r7, #8]
 80037c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037c4:	2317      	movs	r3, #23
 80037c6:	18fb      	adds	r3, r7, r3
 80037c8:	2200      	movs	r2, #0
 80037ca:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	223c      	movs	r2, #60	; 0x3c
 80037d0:	5c9b      	ldrb	r3, [r3, r2]
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d101      	bne.n	80037da <HAL_TIM_PWM_ConfigChannel+0x22>
 80037d6:	2302      	movs	r3, #2
 80037d8:	e0a3      	b.n	8003922 <HAL_TIM_PWM_ConfigChannel+0x16a>
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	223c      	movs	r2, #60	; 0x3c
 80037de:	2101      	movs	r1, #1
 80037e0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2b04      	cmp	r3, #4
 80037e6:	d029      	beq.n	800383c <HAL_TIM_PWM_ConfigChannel+0x84>
 80037e8:	d802      	bhi.n	80037f0 <HAL_TIM_PWM_ConfigChannel+0x38>
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d005      	beq.n	80037fa <HAL_TIM_PWM_ConfigChannel+0x42>
 80037ee:	e08c      	b.n	800390a <HAL_TIM_PWM_ConfigChannel+0x152>
 80037f0:	2b08      	cmp	r3, #8
 80037f2:	d046      	beq.n	8003882 <HAL_TIM_PWM_ConfigChannel+0xca>
 80037f4:	2b0c      	cmp	r3, #12
 80037f6:	d065      	beq.n	80038c4 <HAL_TIM_PWM_ConfigChannel+0x10c>
 80037f8:	e087      	b.n	800390a <HAL_TIM_PWM_ConfigChannel+0x152>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	68ba      	ldr	r2, [r7, #8]
 8003800:	0011      	movs	r1, r2
 8003802:	0018      	movs	r0, r3
 8003804:	f000 fa06 	bl	8003c14 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	699a      	ldr	r2, [r3, #24]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	2108      	movs	r1, #8
 8003814:	430a      	orrs	r2, r1
 8003816:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	699a      	ldr	r2, [r3, #24]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	2104      	movs	r1, #4
 8003824:	438a      	bics	r2, r1
 8003826:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	6999      	ldr	r1, [r3, #24]
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	691a      	ldr	r2, [r3, #16]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	430a      	orrs	r2, r1
 8003838:	619a      	str	r2, [r3, #24]
      break;
 800383a:	e06b      	b.n	8003914 <HAL_TIM_PWM_ConfigChannel+0x15c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	68ba      	ldr	r2, [r7, #8]
 8003842:	0011      	movs	r1, r2
 8003844:	0018      	movs	r0, r3
 8003846:	f000 fa6d 	bl	8003d24 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	699a      	ldr	r2, [r3, #24]
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	2180      	movs	r1, #128	; 0x80
 8003856:	0109      	lsls	r1, r1, #4
 8003858:	430a      	orrs	r2, r1
 800385a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	699a      	ldr	r2, [r3, #24]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4931      	ldr	r1, [pc, #196]	; (800392c <HAL_TIM_PWM_ConfigChannel+0x174>)
 8003868:	400a      	ands	r2, r1
 800386a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	6999      	ldr	r1, [r3, #24]
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	691b      	ldr	r3, [r3, #16]
 8003876:	021a      	lsls	r2, r3, #8
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	430a      	orrs	r2, r1
 800387e:	619a      	str	r2, [r3, #24]
      break;
 8003880:	e048      	b.n	8003914 <HAL_TIM_PWM_ConfigChannel+0x15c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	68ba      	ldr	r2, [r7, #8]
 8003888:	0011      	movs	r1, r2
 800388a:	0018      	movs	r0, r3
 800388c:	f000 face 	bl	8003e2c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	69da      	ldr	r2, [r3, #28]
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	2108      	movs	r1, #8
 800389c:	430a      	orrs	r2, r1
 800389e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	69da      	ldr	r2, [r3, #28]
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	2104      	movs	r1, #4
 80038ac:	438a      	bics	r2, r1
 80038ae:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	69d9      	ldr	r1, [r3, #28]
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	691a      	ldr	r2, [r3, #16]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	430a      	orrs	r2, r1
 80038c0:	61da      	str	r2, [r3, #28]
      break;
 80038c2:	e027      	b.n	8003914 <HAL_TIM_PWM_ConfigChannel+0x15c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	68ba      	ldr	r2, [r7, #8]
 80038ca:	0011      	movs	r1, r2
 80038cc:	0018      	movs	r0, r3
 80038ce:	f000 fb33 	bl	8003f38 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	69da      	ldr	r2, [r3, #28]
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	2180      	movs	r1, #128	; 0x80
 80038de:	0109      	lsls	r1, r1, #4
 80038e0:	430a      	orrs	r2, r1
 80038e2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	69da      	ldr	r2, [r3, #28]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	490f      	ldr	r1, [pc, #60]	; (800392c <HAL_TIM_PWM_ConfigChannel+0x174>)
 80038f0:	400a      	ands	r2, r1
 80038f2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	69d9      	ldr	r1, [r3, #28]
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	691b      	ldr	r3, [r3, #16]
 80038fe:	021a      	lsls	r2, r3, #8
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	430a      	orrs	r2, r1
 8003906:	61da      	str	r2, [r3, #28]
      break;
 8003908:	e004      	b.n	8003914 <HAL_TIM_PWM_ConfigChannel+0x15c>
    }

    default:
      status = HAL_ERROR;
 800390a:	2317      	movs	r3, #23
 800390c:	18fb      	adds	r3, r7, r3
 800390e:	2201      	movs	r2, #1
 8003910:	701a      	strb	r2, [r3, #0]
      break;
 8003912:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	223c      	movs	r2, #60	; 0x3c
 8003918:	2100      	movs	r1, #0
 800391a:	5499      	strb	r1, [r3, r2]

  return status;
 800391c:	2317      	movs	r3, #23
 800391e:	18fb      	adds	r3, r7, r3
 8003920:	781b      	ldrb	r3, [r3, #0]
}
 8003922:	0018      	movs	r0, r3
 8003924:	46bd      	mov	sp, r7
 8003926:	b006      	add	sp, #24
 8003928:	bd80      	pop	{r7, pc}
 800392a:	46c0      	nop			; (mov r8, r8)
 800392c:	fffffbff 	.word	0xfffffbff

08003930 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b084      	sub	sp, #16
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800393a:	230f      	movs	r3, #15
 800393c:	18fb      	adds	r3, r7, r3
 800393e:	2200      	movs	r2, #0
 8003940:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	223c      	movs	r2, #60	; 0x3c
 8003946:	5c9b      	ldrb	r3, [r3, r2]
 8003948:	2b01      	cmp	r3, #1
 800394a:	d101      	bne.n	8003950 <HAL_TIM_ConfigClockSource+0x20>
 800394c:	2302      	movs	r3, #2
 800394e:	e0b2      	b.n	8003ab6 <HAL_TIM_ConfigClockSource+0x186>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	223c      	movs	r2, #60	; 0x3c
 8003954:	2101      	movs	r1, #1
 8003956:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	223d      	movs	r2, #61	; 0x3d
 800395c:	2102      	movs	r1, #2
 800395e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	2277      	movs	r2, #119	; 0x77
 800396c:	4393      	bics	r3, r2
 800396e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	4a53      	ldr	r2, [pc, #332]	; (8003ac0 <HAL_TIM_ConfigClockSource+0x190>)
 8003974:	4013      	ands	r3, r2
 8003976:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	68ba      	ldr	r2, [r7, #8]
 800397e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	2b40      	cmp	r3, #64	; 0x40
 8003986:	d100      	bne.n	800398a <HAL_TIM_ConfigClockSource+0x5a>
 8003988:	e06b      	b.n	8003a62 <HAL_TIM_ConfigClockSource+0x132>
 800398a:	d80e      	bhi.n	80039aa <HAL_TIM_ConfigClockSource+0x7a>
 800398c:	2b10      	cmp	r3, #16
 800398e:	d100      	bne.n	8003992 <HAL_TIM_ConfigClockSource+0x62>
 8003990:	e077      	b.n	8003a82 <HAL_TIM_ConfigClockSource+0x152>
 8003992:	d803      	bhi.n	800399c <HAL_TIM_ConfigClockSource+0x6c>
 8003994:	2b00      	cmp	r3, #0
 8003996:	d100      	bne.n	800399a <HAL_TIM_ConfigClockSource+0x6a>
 8003998:	e073      	b.n	8003a82 <HAL_TIM_ConfigClockSource+0x152>
 800399a:	e07b      	b.n	8003a94 <HAL_TIM_ConfigClockSource+0x164>
 800399c:	2b20      	cmp	r3, #32
 800399e:	d100      	bne.n	80039a2 <HAL_TIM_ConfigClockSource+0x72>
 80039a0:	e06f      	b.n	8003a82 <HAL_TIM_ConfigClockSource+0x152>
 80039a2:	2b30      	cmp	r3, #48	; 0x30
 80039a4:	d100      	bne.n	80039a8 <HAL_TIM_ConfigClockSource+0x78>
 80039a6:	e06c      	b.n	8003a82 <HAL_TIM_ConfigClockSource+0x152>
 80039a8:	e074      	b.n	8003a94 <HAL_TIM_ConfigClockSource+0x164>
 80039aa:	2b70      	cmp	r3, #112	; 0x70
 80039ac:	d00e      	beq.n	80039cc <HAL_TIM_ConfigClockSource+0x9c>
 80039ae:	d804      	bhi.n	80039ba <HAL_TIM_ConfigClockSource+0x8a>
 80039b0:	2b50      	cmp	r3, #80	; 0x50
 80039b2:	d036      	beq.n	8003a22 <HAL_TIM_ConfigClockSource+0xf2>
 80039b4:	2b60      	cmp	r3, #96	; 0x60
 80039b6:	d044      	beq.n	8003a42 <HAL_TIM_ConfigClockSource+0x112>
 80039b8:	e06c      	b.n	8003a94 <HAL_TIM_ConfigClockSource+0x164>
 80039ba:	2280      	movs	r2, #128	; 0x80
 80039bc:	0152      	lsls	r2, r2, #5
 80039be:	4293      	cmp	r3, r2
 80039c0:	d06d      	beq.n	8003a9e <HAL_TIM_ConfigClockSource+0x16e>
 80039c2:	2280      	movs	r2, #128	; 0x80
 80039c4:	0192      	lsls	r2, r2, #6
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d017      	beq.n	80039fa <HAL_TIM_ConfigClockSource+0xca>
 80039ca:	e063      	b.n	8003a94 <HAL_TIM_ConfigClockSource+0x164>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6818      	ldr	r0, [r3, #0]
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	6899      	ldr	r1, [r3, #8]
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	685a      	ldr	r2, [r3, #4]
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	68db      	ldr	r3, [r3, #12]
 80039dc:	f000 fb90 	bl	8004100 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	2277      	movs	r2, #119	; 0x77
 80039ec:	4313      	orrs	r3, r2
 80039ee:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	68ba      	ldr	r2, [r7, #8]
 80039f6:	609a      	str	r2, [r3, #8]
      break;
 80039f8:	e052      	b.n	8003aa0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6818      	ldr	r0, [r3, #0]
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	6899      	ldr	r1, [r3, #8]
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	685a      	ldr	r2, [r3, #4]
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	68db      	ldr	r3, [r3, #12]
 8003a0a:	f000 fb79 	bl	8004100 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	689a      	ldr	r2, [r3, #8]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	2180      	movs	r1, #128	; 0x80
 8003a1a:	01c9      	lsls	r1, r1, #7
 8003a1c:	430a      	orrs	r2, r1
 8003a1e:	609a      	str	r2, [r3, #8]
      break;
 8003a20:	e03e      	b.n	8003aa0 <HAL_TIM_ConfigClockSource+0x170>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6818      	ldr	r0, [r3, #0]
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	6859      	ldr	r1, [r3, #4]
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	68db      	ldr	r3, [r3, #12]
 8003a2e:	001a      	movs	r2, r3
 8003a30:	f000 faec 	bl	800400c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	2150      	movs	r1, #80	; 0x50
 8003a3a:	0018      	movs	r0, r3
 8003a3c:	f000 fb46 	bl	80040cc <TIM_ITRx_SetConfig>
      break;
 8003a40:	e02e      	b.n	8003aa0 <HAL_TIM_ConfigClockSource+0x170>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6818      	ldr	r0, [r3, #0]
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	6859      	ldr	r1, [r3, #4]
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	68db      	ldr	r3, [r3, #12]
 8003a4e:	001a      	movs	r2, r3
 8003a50:	f000 fb0a 	bl	8004068 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	2160      	movs	r1, #96	; 0x60
 8003a5a:	0018      	movs	r0, r3
 8003a5c:	f000 fb36 	bl	80040cc <TIM_ITRx_SetConfig>
      break;
 8003a60:	e01e      	b.n	8003aa0 <HAL_TIM_ConfigClockSource+0x170>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6818      	ldr	r0, [r3, #0]
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	6859      	ldr	r1, [r3, #4]
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	68db      	ldr	r3, [r3, #12]
 8003a6e:	001a      	movs	r2, r3
 8003a70:	f000 facc 	bl	800400c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	2140      	movs	r1, #64	; 0x40
 8003a7a:	0018      	movs	r0, r3
 8003a7c:	f000 fb26 	bl	80040cc <TIM_ITRx_SetConfig>
      break;
 8003a80:	e00e      	b.n	8003aa0 <HAL_TIM_ConfigClockSource+0x170>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	0019      	movs	r1, r3
 8003a8c:	0010      	movs	r0, r2
 8003a8e:	f000 fb1d 	bl	80040cc <TIM_ITRx_SetConfig>
      break;
 8003a92:	e005      	b.n	8003aa0 <HAL_TIM_ConfigClockSource+0x170>
    }

    default:
      status = HAL_ERROR;
 8003a94:	230f      	movs	r3, #15
 8003a96:	18fb      	adds	r3, r7, r3
 8003a98:	2201      	movs	r2, #1
 8003a9a:	701a      	strb	r2, [r3, #0]
      break;
 8003a9c:	e000      	b.n	8003aa0 <HAL_TIM_ConfigClockSource+0x170>
      break;
 8003a9e:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	223d      	movs	r2, #61	; 0x3d
 8003aa4:	2101      	movs	r1, #1
 8003aa6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	223c      	movs	r2, #60	; 0x3c
 8003aac:	2100      	movs	r1, #0
 8003aae:	5499      	strb	r1, [r3, r2]

  return status;
 8003ab0:	230f      	movs	r3, #15
 8003ab2:	18fb      	adds	r3, r7, r3
 8003ab4:	781b      	ldrb	r3, [r3, #0]
}
 8003ab6:	0018      	movs	r0, r3
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	b004      	add	sp, #16
 8003abc:	bd80      	pop	{r7, pc}
 8003abe:	46c0      	nop			; (mov r8, r8)
 8003ac0:	ffff00ff 	.word	0xffff00ff

08003ac4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b082      	sub	sp, #8
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003acc:	46c0      	nop			; (mov r8, r8)
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	b002      	add	sp, #8
 8003ad2:	bd80      	pop	{r7, pc}

08003ad4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b082      	sub	sp, #8
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003adc:	46c0      	nop			; (mov r8, r8)
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	b002      	add	sp, #8
 8003ae2:	bd80      	pop	{r7, pc}

08003ae4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b082      	sub	sp, #8
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003aec:	46c0      	nop			; (mov r8, r8)
 8003aee:	46bd      	mov	sp, r7
 8003af0:	b002      	add	sp, #8
 8003af2:	bd80      	pop	{r7, pc}

08003af4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b082      	sub	sp, #8
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003afc:	46c0      	nop			; (mov r8, r8)
 8003afe:	46bd      	mov	sp, r7
 8003b00:	b002      	add	sp, #8
 8003b02:	bd80      	pop	{r7, pc}

08003b04 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b082      	sub	sp, #8
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b0c:	46c0      	nop			; (mov r8, r8)
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	b002      	add	sp, #8
 8003b12:	bd80      	pop	{r7, pc}

08003b14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b084      	sub	sp, #16
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	4a34      	ldr	r2, [pc, #208]	; (8003bf8 <TIM_Base_SetConfig+0xe4>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d008      	beq.n	8003b3e <TIM_Base_SetConfig+0x2a>
 8003b2c:	687a      	ldr	r2, [r7, #4]
 8003b2e:	2380      	movs	r3, #128	; 0x80
 8003b30:	05db      	lsls	r3, r3, #23
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d003      	beq.n	8003b3e <TIM_Base_SetConfig+0x2a>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	4a30      	ldr	r2, [pc, #192]	; (8003bfc <TIM_Base_SetConfig+0xe8>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d108      	bne.n	8003b50 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2270      	movs	r2, #112	; 0x70
 8003b42:	4393      	bics	r3, r2
 8003b44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	68fa      	ldr	r2, [r7, #12]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	4a29      	ldr	r2, [pc, #164]	; (8003bf8 <TIM_Base_SetConfig+0xe4>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d018      	beq.n	8003b8a <TIM_Base_SetConfig+0x76>
 8003b58:	687a      	ldr	r2, [r7, #4]
 8003b5a:	2380      	movs	r3, #128	; 0x80
 8003b5c:	05db      	lsls	r3, r3, #23
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	d013      	beq.n	8003b8a <TIM_Base_SetConfig+0x76>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	4a25      	ldr	r2, [pc, #148]	; (8003bfc <TIM_Base_SetConfig+0xe8>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d00f      	beq.n	8003b8a <TIM_Base_SetConfig+0x76>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	4a24      	ldr	r2, [pc, #144]	; (8003c00 <TIM_Base_SetConfig+0xec>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d00b      	beq.n	8003b8a <TIM_Base_SetConfig+0x76>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4a23      	ldr	r2, [pc, #140]	; (8003c04 <TIM_Base_SetConfig+0xf0>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d007      	beq.n	8003b8a <TIM_Base_SetConfig+0x76>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	4a22      	ldr	r2, [pc, #136]	; (8003c08 <TIM_Base_SetConfig+0xf4>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d003      	beq.n	8003b8a <TIM_Base_SetConfig+0x76>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	4a21      	ldr	r2, [pc, #132]	; (8003c0c <TIM_Base_SetConfig+0xf8>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d108      	bne.n	8003b9c <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	4a20      	ldr	r2, [pc, #128]	; (8003c10 <TIM_Base_SetConfig+0xfc>)
 8003b8e:	4013      	ands	r3, r2
 8003b90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	68db      	ldr	r3, [r3, #12]
 8003b96:	68fa      	ldr	r2, [r7, #12]
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2280      	movs	r2, #128	; 0x80
 8003ba0:	4393      	bics	r3, r2
 8003ba2:	001a      	movs	r2, r3
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	695b      	ldr	r3, [r3, #20]
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	68fa      	ldr	r2, [r7, #12]
 8003bb0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	689a      	ldr	r2, [r3, #8]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	4a0c      	ldr	r2, [pc, #48]	; (8003bf8 <TIM_Base_SetConfig+0xe4>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d00b      	beq.n	8003be2 <TIM_Base_SetConfig+0xce>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	4a0d      	ldr	r2, [pc, #52]	; (8003c04 <TIM_Base_SetConfig+0xf0>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d007      	beq.n	8003be2 <TIM_Base_SetConfig+0xce>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4a0c      	ldr	r2, [pc, #48]	; (8003c08 <TIM_Base_SetConfig+0xf4>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d003      	beq.n	8003be2 <TIM_Base_SetConfig+0xce>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4a0b      	ldr	r2, [pc, #44]	; (8003c0c <TIM_Base_SetConfig+0xf8>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d103      	bne.n	8003bea <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	691a      	ldr	r2, [r3, #16]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2201      	movs	r2, #1
 8003bee:	615a      	str	r2, [r3, #20]
}
 8003bf0:	46c0      	nop			; (mov r8, r8)
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	b004      	add	sp, #16
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	40012c00 	.word	0x40012c00
 8003bfc:	40000400 	.word	0x40000400
 8003c00:	40002000 	.word	0x40002000
 8003c04:	40014000 	.word	0x40014000
 8003c08:	40014400 	.word	0x40014400
 8003c0c:	40014800 	.word	0x40014800
 8003c10:	fffffcff 	.word	0xfffffcff

08003c14 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b086      	sub	sp, #24
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6a1b      	ldr	r3, [r3, #32]
 8003c22:	2201      	movs	r2, #1
 8003c24:	4393      	bics	r3, r2
 8003c26:	001a      	movs	r2, r3
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6a1b      	ldr	r3, [r3, #32]
 8003c30:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	699b      	ldr	r3, [r3, #24]
 8003c3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2270      	movs	r2, #112	; 0x70
 8003c42:	4393      	bics	r3, r2
 8003c44:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2203      	movs	r2, #3
 8003c4a:	4393      	bics	r3, r2
 8003c4c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	68fa      	ldr	r2, [r7, #12]
 8003c54:	4313      	orrs	r3, r2
 8003c56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	2202      	movs	r2, #2
 8003c5c:	4393      	bics	r3, r2
 8003c5e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	697a      	ldr	r2, [r7, #20]
 8003c66:	4313      	orrs	r3, r2
 8003c68:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	4a27      	ldr	r2, [pc, #156]	; (8003d0c <TIM_OC1_SetConfig+0xf8>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d00b      	beq.n	8003c8a <TIM_OC1_SetConfig+0x76>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	4a26      	ldr	r2, [pc, #152]	; (8003d10 <TIM_OC1_SetConfig+0xfc>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d007      	beq.n	8003c8a <TIM_OC1_SetConfig+0x76>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	4a25      	ldr	r2, [pc, #148]	; (8003d14 <TIM_OC1_SetConfig+0x100>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d003      	beq.n	8003c8a <TIM_OC1_SetConfig+0x76>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	4a24      	ldr	r2, [pc, #144]	; (8003d18 <TIM_OC1_SetConfig+0x104>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d10c      	bne.n	8003ca4 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	2208      	movs	r2, #8
 8003c8e:	4393      	bics	r3, r2
 8003c90:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	68db      	ldr	r3, [r3, #12]
 8003c96:	697a      	ldr	r2, [r7, #20]
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	2204      	movs	r2, #4
 8003ca0:	4393      	bics	r3, r2
 8003ca2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	4a19      	ldr	r2, [pc, #100]	; (8003d0c <TIM_OC1_SetConfig+0xf8>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d00b      	beq.n	8003cc4 <TIM_OC1_SetConfig+0xb0>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	4a18      	ldr	r2, [pc, #96]	; (8003d10 <TIM_OC1_SetConfig+0xfc>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d007      	beq.n	8003cc4 <TIM_OC1_SetConfig+0xb0>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	4a17      	ldr	r2, [pc, #92]	; (8003d14 <TIM_OC1_SetConfig+0x100>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d003      	beq.n	8003cc4 <TIM_OC1_SetConfig+0xb0>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	4a16      	ldr	r2, [pc, #88]	; (8003d18 <TIM_OC1_SetConfig+0x104>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d111      	bne.n	8003ce8 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	4a15      	ldr	r2, [pc, #84]	; (8003d1c <TIM_OC1_SetConfig+0x108>)
 8003cc8:	4013      	ands	r3, r2
 8003cca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	4a14      	ldr	r2, [pc, #80]	; (8003d20 <TIM_OC1_SetConfig+0x10c>)
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	695b      	ldr	r3, [r3, #20]
 8003cd8:	693a      	ldr	r2, [r7, #16]
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	699b      	ldr	r3, [r3, #24]
 8003ce2:	693a      	ldr	r2, [r7, #16]
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	693a      	ldr	r2, [r7, #16]
 8003cec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	68fa      	ldr	r2, [r7, #12]
 8003cf2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	685a      	ldr	r2, [r3, #4]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	697a      	ldr	r2, [r7, #20]
 8003d00:	621a      	str	r2, [r3, #32]
}
 8003d02:	46c0      	nop			; (mov r8, r8)
 8003d04:	46bd      	mov	sp, r7
 8003d06:	b006      	add	sp, #24
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	46c0      	nop			; (mov r8, r8)
 8003d0c:	40012c00 	.word	0x40012c00
 8003d10:	40014000 	.word	0x40014000
 8003d14:	40014400 	.word	0x40014400
 8003d18:	40014800 	.word	0x40014800
 8003d1c:	fffffeff 	.word	0xfffffeff
 8003d20:	fffffdff 	.word	0xfffffdff

08003d24 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b086      	sub	sp, #24
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6a1b      	ldr	r3, [r3, #32]
 8003d32:	2210      	movs	r2, #16
 8003d34:	4393      	bics	r3, r2
 8003d36:	001a      	movs	r2, r3
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6a1b      	ldr	r3, [r3, #32]
 8003d40:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	699b      	ldr	r3, [r3, #24]
 8003d4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	4a2e      	ldr	r2, [pc, #184]	; (8003e0c <TIM_OC2_SetConfig+0xe8>)
 8003d52:	4013      	ands	r3, r2
 8003d54:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	4a2d      	ldr	r2, [pc, #180]	; (8003e10 <TIM_OC2_SetConfig+0xec>)
 8003d5a:	4013      	ands	r3, r2
 8003d5c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	021b      	lsls	r3, r3, #8
 8003d64:	68fa      	ldr	r2, [r7, #12]
 8003d66:	4313      	orrs	r3, r2
 8003d68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	2220      	movs	r2, #32
 8003d6e:	4393      	bics	r3, r2
 8003d70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	011b      	lsls	r3, r3, #4
 8003d78:	697a      	ldr	r2, [r7, #20]
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	4a24      	ldr	r2, [pc, #144]	; (8003e14 <TIM_OC2_SetConfig+0xf0>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d10d      	bne.n	8003da2 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	2280      	movs	r2, #128	; 0x80
 8003d8a:	4393      	bics	r3, r2
 8003d8c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	68db      	ldr	r3, [r3, #12]
 8003d92:	011b      	lsls	r3, r3, #4
 8003d94:	697a      	ldr	r2, [r7, #20]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	2240      	movs	r2, #64	; 0x40
 8003d9e:	4393      	bics	r3, r2
 8003da0:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4a1b      	ldr	r2, [pc, #108]	; (8003e14 <TIM_OC2_SetConfig+0xf0>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d00b      	beq.n	8003dc2 <TIM_OC2_SetConfig+0x9e>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4a1a      	ldr	r2, [pc, #104]	; (8003e18 <TIM_OC2_SetConfig+0xf4>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d007      	beq.n	8003dc2 <TIM_OC2_SetConfig+0x9e>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4a19      	ldr	r2, [pc, #100]	; (8003e1c <TIM_OC2_SetConfig+0xf8>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d003      	beq.n	8003dc2 <TIM_OC2_SetConfig+0x9e>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	4a18      	ldr	r2, [pc, #96]	; (8003e20 <TIM_OC2_SetConfig+0xfc>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d113      	bne.n	8003dea <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	4a17      	ldr	r2, [pc, #92]	; (8003e24 <TIM_OC2_SetConfig+0x100>)
 8003dc6:	4013      	ands	r3, r2
 8003dc8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	4a16      	ldr	r2, [pc, #88]	; (8003e28 <TIM_OC2_SetConfig+0x104>)
 8003dce:	4013      	ands	r3, r2
 8003dd0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	695b      	ldr	r3, [r3, #20]
 8003dd6:	009b      	lsls	r3, r3, #2
 8003dd8:	693a      	ldr	r2, [r7, #16]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	699b      	ldr	r3, [r3, #24]
 8003de2:	009b      	lsls	r3, r3, #2
 8003de4:	693a      	ldr	r2, [r7, #16]
 8003de6:	4313      	orrs	r3, r2
 8003de8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	693a      	ldr	r2, [r7, #16]
 8003dee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	68fa      	ldr	r2, [r7, #12]
 8003df4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	685a      	ldr	r2, [r3, #4]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	697a      	ldr	r2, [r7, #20]
 8003e02:	621a      	str	r2, [r3, #32]
}
 8003e04:	46c0      	nop			; (mov r8, r8)
 8003e06:	46bd      	mov	sp, r7
 8003e08:	b006      	add	sp, #24
 8003e0a:	bd80      	pop	{r7, pc}
 8003e0c:	ffff8fff 	.word	0xffff8fff
 8003e10:	fffffcff 	.word	0xfffffcff
 8003e14:	40012c00 	.word	0x40012c00
 8003e18:	40014000 	.word	0x40014000
 8003e1c:	40014400 	.word	0x40014400
 8003e20:	40014800 	.word	0x40014800
 8003e24:	fffffbff 	.word	0xfffffbff
 8003e28:	fffff7ff 	.word	0xfffff7ff

08003e2c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b086      	sub	sp, #24
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
 8003e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6a1b      	ldr	r3, [r3, #32]
 8003e3a:	4a35      	ldr	r2, [pc, #212]	; (8003f10 <TIM_OC3_SetConfig+0xe4>)
 8003e3c:	401a      	ands	r2, r3
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6a1b      	ldr	r3, [r3, #32]
 8003e46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	69db      	ldr	r3, [r3, #28]
 8003e52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2270      	movs	r2, #112	; 0x70
 8003e58:	4393      	bics	r3, r2
 8003e5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2203      	movs	r2, #3
 8003e60:	4393      	bics	r3, r2
 8003e62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	68fa      	ldr	r2, [r7, #12]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	4a28      	ldr	r2, [pc, #160]	; (8003f14 <TIM_OC3_SetConfig+0xe8>)
 8003e72:	4013      	ands	r3, r2
 8003e74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	021b      	lsls	r3, r3, #8
 8003e7c:	697a      	ldr	r2, [r7, #20]
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	4a24      	ldr	r2, [pc, #144]	; (8003f18 <TIM_OC3_SetConfig+0xec>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d10d      	bne.n	8003ea6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	4a23      	ldr	r2, [pc, #140]	; (8003f1c <TIM_OC3_SetConfig+0xf0>)
 8003e8e:	4013      	ands	r3, r2
 8003e90:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	68db      	ldr	r3, [r3, #12]
 8003e96:	021b      	lsls	r3, r3, #8
 8003e98:	697a      	ldr	r2, [r7, #20]
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	4a1f      	ldr	r2, [pc, #124]	; (8003f20 <TIM_OC3_SetConfig+0xf4>)
 8003ea2:	4013      	ands	r3, r2
 8003ea4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4a1b      	ldr	r2, [pc, #108]	; (8003f18 <TIM_OC3_SetConfig+0xec>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d00b      	beq.n	8003ec6 <TIM_OC3_SetConfig+0x9a>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	4a1c      	ldr	r2, [pc, #112]	; (8003f24 <TIM_OC3_SetConfig+0xf8>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d007      	beq.n	8003ec6 <TIM_OC3_SetConfig+0x9a>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	4a1b      	ldr	r2, [pc, #108]	; (8003f28 <TIM_OC3_SetConfig+0xfc>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d003      	beq.n	8003ec6 <TIM_OC3_SetConfig+0x9a>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	4a1a      	ldr	r2, [pc, #104]	; (8003f2c <TIM_OC3_SetConfig+0x100>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d113      	bne.n	8003eee <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	4a19      	ldr	r2, [pc, #100]	; (8003f30 <TIM_OC3_SetConfig+0x104>)
 8003eca:	4013      	ands	r3, r2
 8003ecc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	4a18      	ldr	r2, [pc, #96]	; (8003f34 <TIM_OC3_SetConfig+0x108>)
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	695b      	ldr	r3, [r3, #20]
 8003eda:	011b      	lsls	r3, r3, #4
 8003edc:	693a      	ldr	r2, [r7, #16]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	699b      	ldr	r3, [r3, #24]
 8003ee6:	011b      	lsls	r3, r3, #4
 8003ee8:	693a      	ldr	r2, [r7, #16]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	693a      	ldr	r2, [r7, #16]
 8003ef2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	68fa      	ldr	r2, [r7, #12]
 8003ef8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	685a      	ldr	r2, [r3, #4]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	697a      	ldr	r2, [r7, #20]
 8003f06:	621a      	str	r2, [r3, #32]
}
 8003f08:	46c0      	nop			; (mov r8, r8)
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	b006      	add	sp, #24
 8003f0e:	bd80      	pop	{r7, pc}
 8003f10:	fffffeff 	.word	0xfffffeff
 8003f14:	fffffdff 	.word	0xfffffdff
 8003f18:	40012c00 	.word	0x40012c00
 8003f1c:	fffff7ff 	.word	0xfffff7ff
 8003f20:	fffffbff 	.word	0xfffffbff
 8003f24:	40014000 	.word	0x40014000
 8003f28:	40014400 	.word	0x40014400
 8003f2c:	40014800 	.word	0x40014800
 8003f30:	ffffefff 	.word	0xffffefff
 8003f34:	ffffdfff 	.word	0xffffdfff

08003f38 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b086      	sub	sp, #24
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
 8003f40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6a1b      	ldr	r3, [r3, #32]
 8003f46:	4a28      	ldr	r2, [pc, #160]	; (8003fe8 <TIM_OC4_SetConfig+0xb0>)
 8003f48:	401a      	ands	r2, r3
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6a1b      	ldr	r3, [r3, #32]
 8003f52:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	69db      	ldr	r3, [r3, #28]
 8003f5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	4a22      	ldr	r2, [pc, #136]	; (8003fec <TIM_OC4_SetConfig+0xb4>)
 8003f64:	4013      	ands	r3, r2
 8003f66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	4a21      	ldr	r2, [pc, #132]	; (8003ff0 <TIM_OC4_SetConfig+0xb8>)
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	021b      	lsls	r3, r3, #8
 8003f76:	68fa      	ldr	r2, [r7, #12]
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	4a1d      	ldr	r2, [pc, #116]	; (8003ff4 <TIM_OC4_SetConfig+0xbc>)
 8003f80:	4013      	ands	r3, r2
 8003f82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	031b      	lsls	r3, r3, #12
 8003f8a:	693a      	ldr	r2, [r7, #16]
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	4a19      	ldr	r2, [pc, #100]	; (8003ff8 <TIM_OC4_SetConfig+0xc0>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d00b      	beq.n	8003fb0 <TIM_OC4_SetConfig+0x78>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	4a18      	ldr	r2, [pc, #96]	; (8003ffc <TIM_OC4_SetConfig+0xc4>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d007      	beq.n	8003fb0 <TIM_OC4_SetConfig+0x78>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	4a17      	ldr	r2, [pc, #92]	; (8004000 <TIM_OC4_SetConfig+0xc8>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d003      	beq.n	8003fb0 <TIM_OC4_SetConfig+0x78>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	4a16      	ldr	r2, [pc, #88]	; (8004004 <TIM_OC4_SetConfig+0xcc>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d109      	bne.n	8003fc4 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	4a15      	ldr	r2, [pc, #84]	; (8004008 <TIM_OC4_SetConfig+0xd0>)
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	695b      	ldr	r3, [r3, #20]
 8003fbc:	019b      	lsls	r3, r3, #6
 8003fbe:	697a      	ldr	r2, [r7, #20]
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	697a      	ldr	r2, [r7, #20]
 8003fc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	68fa      	ldr	r2, [r7, #12]
 8003fce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	685a      	ldr	r2, [r3, #4]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	693a      	ldr	r2, [r7, #16]
 8003fdc:	621a      	str	r2, [r3, #32]
}
 8003fde:	46c0      	nop			; (mov r8, r8)
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	b006      	add	sp, #24
 8003fe4:	bd80      	pop	{r7, pc}
 8003fe6:	46c0      	nop			; (mov r8, r8)
 8003fe8:	ffffefff 	.word	0xffffefff
 8003fec:	ffff8fff 	.word	0xffff8fff
 8003ff0:	fffffcff 	.word	0xfffffcff
 8003ff4:	ffffdfff 	.word	0xffffdfff
 8003ff8:	40012c00 	.word	0x40012c00
 8003ffc:	40014000 	.word	0x40014000
 8004000:	40014400 	.word	0x40014400
 8004004:	40014800 	.word	0x40014800
 8004008:	ffffbfff 	.word	0xffffbfff

0800400c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b086      	sub	sp, #24
 8004010:	af00      	add	r7, sp, #0
 8004012:	60f8      	str	r0, [r7, #12]
 8004014:	60b9      	str	r1, [r7, #8]
 8004016:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	6a1b      	ldr	r3, [r3, #32]
 800401c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	6a1b      	ldr	r3, [r3, #32]
 8004022:	2201      	movs	r2, #1
 8004024:	4393      	bics	r3, r2
 8004026:	001a      	movs	r2, r3
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	699b      	ldr	r3, [r3, #24]
 8004030:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	22f0      	movs	r2, #240	; 0xf0
 8004036:	4393      	bics	r3, r2
 8004038:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	011b      	lsls	r3, r3, #4
 800403e:	693a      	ldr	r2, [r7, #16]
 8004040:	4313      	orrs	r3, r2
 8004042:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	220a      	movs	r2, #10
 8004048:	4393      	bics	r3, r2
 800404a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800404c:	697a      	ldr	r2, [r7, #20]
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	4313      	orrs	r3, r2
 8004052:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	693a      	ldr	r2, [r7, #16]
 8004058:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	697a      	ldr	r2, [r7, #20]
 800405e:	621a      	str	r2, [r3, #32]
}
 8004060:	46c0      	nop			; (mov r8, r8)
 8004062:	46bd      	mov	sp, r7
 8004064:	b006      	add	sp, #24
 8004066:	bd80      	pop	{r7, pc}

08004068 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b086      	sub	sp, #24
 800406c:	af00      	add	r7, sp, #0
 800406e:	60f8      	str	r0, [r7, #12]
 8004070:	60b9      	str	r1, [r7, #8]
 8004072:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	6a1b      	ldr	r3, [r3, #32]
 8004078:	2210      	movs	r2, #16
 800407a:	4393      	bics	r3, r2
 800407c:	001a      	movs	r2, r3
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	699b      	ldr	r3, [r3, #24]
 8004086:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	6a1b      	ldr	r3, [r3, #32]
 800408c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	4a0d      	ldr	r2, [pc, #52]	; (80040c8 <TIM_TI2_ConfigInputStage+0x60>)
 8004092:	4013      	ands	r3, r2
 8004094:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	031b      	lsls	r3, r3, #12
 800409a:	697a      	ldr	r2, [r7, #20]
 800409c:	4313      	orrs	r3, r2
 800409e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	22a0      	movs	r2, #160	; 0xa0
 80040a4:	4393      	bics	r3, r2
 80040a6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	011b      	lsls	r3, r3, #4
 80040ac:	693a      	ldr	r2, [r7, #16]
 80040ae:	4313      	orrs	r3, r2
 80040b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	697a      	ldr	r2, [r7, #20]
 80040b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	693a      	ldr	r2, [r7, #16]
 80040bc:	621a      	str	r2, [r3, #32]
}
 80040be:	46c0      	nop			; (mov r8, r8)
 80040c0:	46bd      	mov	sp, r7
 80040c2:	b006      	add	sp, #24
 80040c4:	bd80      	pop	{r7, pc}
 80040c6:	46c0      	nop			; (mov r8, r8)
 80040c8:	ffff0fff 	.word	0xffff0fff

080040cc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b084      	sub	sp, #16
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2270      	movs	r2, #112	; 0x70
 80040e0:	4393      	bics	r3, r2
 80040e2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80040e4:	683a      	ldr	r2, [r7, #0]
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	2207      	movs	r2, #7
 80040ec:	4313      	orrs	r3, r2
 80040ee:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	68fa      	ldr	r2, [r7, #12]
 80040f4:	609a      	str	r2, [r3, #8]
}
 80040f6:	46c0      	nop			; (mov r8, r8)
 80040f8:	46bd      	mov	sp, r7
 80040fa:	b004      	add	sp, #16
 80040fc:	bd80      	pop	{r7, pc}
	...

08004100 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b086      	sub	sp, #24
 8004104:	af00      	add	r7, sp, #0
 8004106:	60f8      	str	r0, [r7, #12]
 8004108:	60b9      	str	r1, [r7, #8]
 800410a:	607a      	str	r2, [r7, #4]
 800410c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	4a09      	ldr	r2, [pc, #36]	; (800413c <TIM_ETR_SetConfig+0x3c>)
 8004118:	4013      	ands	r3, r2
 800411a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	021a      	lsls	r2, r3, #8
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	431a      	orrs	r2, r3
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	4313      	orrs	r3, r2
 8004128:	697a      	ldr	r2, [r7, #20]
 800412a:	4313      	orrs	r3, r2
 800412c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	697a      	ldr	r2, [r7, #20]
 8004132:	609a      	str	r2, [r3, #8]
}
 8004134:	46c0      	nop			; (mov r8, r8)
 8004136:	46bd      	mov	sp, r7
 8004138:	b006      	add	sp, #24
 800413a:	bd80      	pop	{r7, pc}
 800413c:	ffff00ff 	.word	0xffff00ff

08004140 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b086      	sub	sp, #24
 8004144:	af00      	add	r7, sp, #0
 8004146:	60f8      	str	r0, [r7, #12]
 8004148:	60b9      	str	r1, [r7, #8]
 800414a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	221f      	movs	r2, #31
 8004150:	4013      	ands	r3, r2
 8004152:	2201      	movs	r2, #1
 8004154:	409a      	lsls	r2, r3
 8004156:	0013      	movs	r3, r2
 8004158:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	6a1b      	ldr	r3, [r3, #32]
 800415e:	697a      	ldr	r2, [r7, #20]
 8004160:	43d2      	mvns	r2, r2
 8004162:	401a      	ands	r2, r3
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6a1a      	ldr	r2, [r3, #32]
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	211f      	movs	r1, #31
 8004170:	400b      	ands	r3, r1
 8004172:	6879      	ldr	r1, [r7, #4]
 8004174:	4099      	lsls	r1, r3
 8004176:	000b      	movs	r3, r1
 8004178:	431a      	orrs	r2, r3
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	621a      	str	r2, [r3, #32]
}
 800417e:	46c0      	nop			; (mov r8, r8)
 8004180:	46bd      	mov	sp, r7
 8004182:	b006      	add	sp, #24
 8004184:	bd80      	pop	{r7, pc}
	...

08004188 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b084      	sub	sp, #16
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d108      	bne.n	80041aa <HAL_TIMEx_PWMN_Start+0x22>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2242      	movs	r2, #66	; 0x42
 800419c:	5c9b      	ldrb	r3, [r3, r2]
 800419e:	b2db      	uxtb	r3, r3
 80041a0:	3b01      	subs	r3, #1
 80041a2:	1e5a      	subs	r2, r3, #1
 80041a4:	4193      	sbcs	r3, r2
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	e01f      	b.n	80041ea <HAL_TIMEx_PWMN_Start+0x62>
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	2b04      	cmp	r3, #4
 80041ae:	d108      	bne.n	80041c2 <HAL_TIMEx_PWMN_Start+0x3a>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2243      	movs	r2, #67	; 0x43
 80041b4:	5c9b      	ldrb	r3, [r3, r2]
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	3b01      	subs	r3, #1
 80041ba:	1e5a      	subs	r2, r3, #1
 80041bc:	4193      	sbcs	r3, r2
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	e013      	b.n	80041ea <HAL_TIMEx_PWMN_Start+0x62>
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	2b08      	cmp	r3, #8
 80041c6:	d108      	bne.n	80041da <HAL_TIMEx_PWMN_Start+0x52>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2244      	movs	r2, #68	; 0x44
 80041cc:	5c9b      	ldrb	r3, [r3, r2]
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	3b01      	subs	r3, #1
 80041d2:	1e5a      	subs	r2, r3, #1
 80041d4:	4193      	sbcs	r3, r2
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	e007      	b.n	80041ea <HAL_TIMEx_PWMN_Start+0x62>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2245      	movs	r2, #69	; 0x45
 80041de:	5c9b      	ldrb	r3, [r3, r2]
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	3b01      	subs	r3, #1
 80041e4:	1e5a      	subs	r2, r3, #1
 80041e6:	4193      	sbcs	r3, r2
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d001      	beq.n	80041f2 <HAL_TIMEx_PWMN_Start+0x6a>
  {
    return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e05b      	b.n	80042aa <HAL_TIMEx_PWMN_Start+0x122>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d104      	bne.n	8004202 <HAL_TIMEx_PWMN_Start+0x7a>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2242      	movs	r2, #66	; 0x42
 80041fc:	2102      	movs	r1, #2
 80041fe:	5499      	strb	r1, [r3, r2]
 8004200:	e013      	b.n	800422a <HAL_TIMEx_PWMN_Start+0xa2>
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	2b04      	cmp	r3, #4
 8004206:	d104      	bne.n	8004212 <HAL_TIMEx_PWMN_Start+0x8a>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2243      	movs	r2, #67	; 0x43
 800420c:	2102      	movs	r1, #2
 800420e:	5499      	strb	r1, [r3, r2]
 8004210:	e00b      	b.n	800422a <HAL_TIMEx_PWMN_Start+0xa2>
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	2b08      	cmp	r3, #8
 8004216:	d104      	bne.n	8004222 <HAL_TIMEx_PWMN_Start+0x9a>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2244      	movs	r2, #68	; 0x44
 800421c:	2102      	movs	r1, #2
 800421e:	5499      	strb	r1, [r3, r2]
 8004220:	e003      	b.n	800422a <HAL_TIMEx_PWMN_Start+0xa2>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2245      	movs	r2, #69	; 0x45
 8004226:	2102      	movs	r1, #2
 8004228:	5499      	strb	r1, [r3, r2]

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	6839      	ldr	r1, [r7, #0]
 8004230:	2204      	movs	r2, #4
 8004232:	0018      	movs	r0, r3
 8004234:	f000 f910 	bl	8004458 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	2180      	movs	r1, #128	; 0x80
 8004244:	0209      	lsls	r1, r1, #8
 8004246:	430a      	orrs	r2, r1
 8004248:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a19      	ldr	r2, [pc, #100]	; (80042b4 <HAL_TIMEx_PWMN_Start+0x12c>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d00f      	beq.n	8004274 <HAL_TIMEx_PWMN_Start+0xec>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	2380      	movs	r3, #128	; 0x80
 800425a:	05db      	lsls	r3, r3, #23
 800425c:	429a      	cmp	r2, r3
 800425e:	d009      	beq.n	8004274 <HAL_TIMEx_PWMN_Start+0xec>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a14      	ldr	r2, [pc, #80]	; (80042b8 <HAL_TIMEx_PWMN_Start+0x130>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d004      	beq.n	8004274 <HAL_TIMEx_PWMN_Start+0xec>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a13      	ldr	r2, [pc, #76]	; (80042bc <HAL_TIMEx_PWMN_Start+0x134>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d111      	bne.n	8004298 <HAL_TIMEx_PWMN_Start+0x110>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	2207      	movs	r2, #7
 800427c:	4013      	ands	r3, r2
 800427e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2b06      	cmp	r3, #6
 8004284:	d010      	beq.n	80042a8 <HAL_TIMEx_PWMN_Start+0x120>
    {
      __HAL_TIM_ENABLE(htim);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	2101      	movs	r1, #1
 8004292:	430a      	orrs	r2, r1
 8004294:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004296:	e007      	b.n	80042a8 <HAL_TIMEx_PWMN_Start+0x120>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	2101      	movs	r1, #1
 80042a4:	430a      	orrs	r2, r1
 80042a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80042a8:	2300      	movs	r3, #0
}
 80042aa:	0018      	movs	r0, r3
 80042ac:	46bd      	mov	sp, r7
 80042ae:	b004      	add	sp, #16
 80042b0:	bd80      	pop	{r7, pc}
 80042b2:	46c0      	nop			; (mov r8, r8)
 80042b4:	40012c00 	.word	0x40012c00
 80042b8:	40000400 	.word	0x40000400
 80042bc:	40014000 	.word	0x40014000

080042c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b084      	sub	sp, #16
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	223c      	movs	r2, #60	; 0x3c
 80042ce:	5c9b      	ldrb	r3, [r3, r2]
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d101      	bne.n	80042d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80042d4:	2302      	movs	r3, #2
 80042d6:	e047      	b.n	8004368 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	223c      	movs	r2, #60	; 0x3c
 80042dc:	2101      	movs	r1, #1
 80042de:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	223d      	movs	r2, #61	; 0x3d
 80042e4:	2102      	movs	r1, #2
 80042e6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2270      	movs	r2, #112	; 0x70
 80042fc:	4393      	bics	r3, r2
 80042fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	68fa      	ldr	r2, [r7, #12]
 8004306:	4313      	orrs	r3, r2
 8004308:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	68fa      	ldr	r2, [r7, #12]
 8004310:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a16      	ldr	r2, [pc, #88]	; (8004370 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d00f      	beq.n	800433c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	2380      	movs	r3, #128	; 0x80
 8004322:	05db      	lsls	r3, r3, #23
 8004324:	429a      	cmp	r2, r3
 8004326:	d009      	beq.n	800433c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a11      	ldr	r2, [pc, #68]	; (8004374 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d004      	beq.n	800433c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a10      	ldr	r2, [pc, #64]	; (8004378 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d10c      	bne.n	8004356 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	2280      	movs	r2, #128	; 0x80
 8004340:	4393      	bics	r3, r2
 8004342:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	68ba      	ldr	r2, [r7, #8]
 800434a:	4313      	orrs	r3, r2
 800434c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	68ba      	ldr	r2, [r7, #8]
 8004354:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	223d      	movs	r2, #61	; 0x3d
 800435a:	2101      	movs	r1, #1
 800435c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	223c      	movs	r2, #60	; 0x3c
 8004362:	2100      	movs	r1, #0
 8004364:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004366:	2300      	movs	r3, #0
}
 8004368:	0018      	movs	r0, r3
 800436a:	46bd      	mov	sp, r7
 800436c:	b004      	add	sp, #16
 800436e:	bd80      	pop	{r7, pc}
 8004370:	40012c00 	.word	0x40012c00
 8004374:	40000400 	.word	0x40000400
 8004378:	40014000 	.word	0x40014000

0800437c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b084      	sub	sp, #16
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
 8004384:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004386:	2300      	movs	r3, #0
 8004388:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	223c      	movs	r2, #60	; 0x3c
 800438e:	5c9b      	ldrb	r3, [r3, r2]
 8004390:	2b01      	cmp	r3, #1
 8004392:	d101      	bne.n	8004398 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004394:	2302      	movs	r3, #2
 8004396:	e03e      	b.n	8004416 <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	223c      	movs	r2, #60	; 0x3c
 800439c:	2101      	movs	r1, #1
 800439e:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	22ff      	movs	r2, #255	; 0xff
 80043a4:	4393      	bics	r3, r2
 80043a6:	001a      	movs	r2, r3
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	4313      	orrs	r3, r2
 80043ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	4a1b      	ldr	r2, [pc, #108]	; (8004420 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 80043b4:	401a      	ands	r2, r3
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	4313      	orrs	r3, r2
 80043bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	4a18      	ldr	r2, [pc, #96]	; (8004424 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 80043c2:	401a      	ands	r2, r3
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	4313      	orrs	r3, r2
 80043ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	4a16      	ldr	r2, [pc, #88]	; (8004428 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 80043d0:	401a      	ands	r2, r3
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4313      	orrs	r3, r2
 80043d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	4a13      	ldr	r2, [pc, #76]	; (800442c <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 80043de:	401a      	ands	r2, r3
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	691b      	ldr	r3, [r3, #16]
 80043e4:	4313      	orrs	r3, r2
 80043e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	4a11      	ldr	r2, [pc, #68]	; (8004430 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 80043ec:	401a      	ands	r2, r3
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	695b      	ldr	r3, [r3, #20]
 80043f2:	4313      	orrs	r3, r2
 80043f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	4a0e      	ldr	r2, [pc, #56]	; (8004434 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 80043fa:	401a      	ands	r2, r3
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	69db      	ldr	r3, [r3, #28]
 8004400:	4313      	orrs	r3, r2
 8004402:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	68fa      	ldr	r2, [r7, #12]
 800440a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	223c      	movs	r2, #60	; 0x3c
 8004410:	2100      	movs	r1, #0
 8004412:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004414:	2300      	movs	r3, #0
}
 8004416:	0018      	movs	r0, r3
 8004418:	46bd      	mov	sp, r7
 800441a:	b004      	add	sp, #16
 800441c:	bd80      	pop	{r7, pc}
 800441e:	46c0      	nop			; (mov r8, r8)
 8004420:	fffffcff 	.word	0xfffffcff
 8004424:	fffffbff 	.word	0xfffffbff
 8004428:	fffff7ff 	.word	0xfffff7ff
 800442c:	ffffefff 	.word	0xffffefff
 8004430:	ffffdfff 	.word	0xffffdfff
 8004434:	ffffbfff 	.word	0xffffbfff

08004438 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b082      	sub	sp, #8
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004440:	46c0      	nop			; (mov r8, r8)
 8004442:	46bd      	mov	sp, r7
 8004444:	b002      	add	sp, #8
 8004446:	bd80      	pop	{r7, pc}

08004448 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b082      	sub	sp, #8
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004450:	46c0      	nop			; (mov r8, r8)
 8004452:	46bd      	mov	sp, r7
 8004454:	b002      	add	sp, #8
 8004456:	bd80      	pop	{r7, pc}

08004458 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b086      	sub	sp, #24
 800445c:	af00      	add	r7, sp, #0
 800445e:	60f8      	str	r0, [r7, #12]
 8004460:	60b9      	str	r1, [r7, #8]
 8004462:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	221f      	movs	r2, #31
 8004468:	4013      	ands	r3, r2
 800446a:	2204      	movs	r2, #4
 800446c:	409a      	lsls	r2, r3
 800446e:	0013      	movs	r3, r2
 8004470:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	6a1b      	ldr	r3, [r3, #32]
 8004476:	697a      	ldr	r2, [r7, #20]
 8004478:	43d2      	mvns	r2, r2
 800447a:	401a      	ands	r2, r3
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	6a1a      	ldr	r2, [r3, #32]
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	211f      	movs	r1, #31
 8004488:	400b      	ands	r3, r1
 800448a:	6879      	ldr	r1, [r7, #4]
 800448c:	4099      	lsls	r1, r3
 800448e:	000b      	movs	r3, r1
 8004490:	431a      	orrs	r2, r3
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	621a      	str	r2, [r3, #32]
}
 8004496:	46c0      	nop			; (mov r8, r8)
 8004498:	46bd      	mov	sp, r7
 800449a:	b006      	add	sp, #24
 800449c:	bd80      	pop	{r7, pc}
	...

080044a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b082      	sub	sp, #8
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d101      	bne.n	80044b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e044      	b.n	800453c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d107      	bne.n	80044ca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2274      	movs	r2, #116	; 0x74
 80044be:	2100      	movs	r1, #0
 80044c0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	0018      	movs	r0, r3
 80044c6:	f7fd fdf5 	bl	80020b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2224      	movs	r2, #36	; 0x24
 80044ce:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	681a      	ldr	r2, [r3, #0]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	2101      	movs	r1, #1
 80044dc:	438a      	bics	r2, r1
 80044de:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	0018      	movs	r0, r3
 80044e4:	f000 f830 	bl	8004548 <UART_SetConfig>
 80044e8:	0003      	movs	r3, r0
 80044ea:	2b01      	cmp	r3, #1
 80044ec:	d101      	bne.n	80044f2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e024      	b.n	800453c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d003      	beq.n	8004502 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	0018      	movs	r0, r3
 80044fe:	f000 f961 	bl	80047c4 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	685a      	ldr	r2, [r3, #4]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	490d      	ldr	r1, [pc, #52]	; (8004544 <HAL_UART_Init+0xa4>)
 800450e:	400a      	ands	r2, r1
 8004510:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	689a      	ldr	r2, [r3, #8]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	212a      	movs	r1, #42	; 0x2a
 800451e:	438a      	bics	r2, r1
 8004520:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	681a      	ldr	r2, [r3, #0]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	2101      	movs	r1, #1
 800452e:	430a      	orrs	r2, r1
 8004530:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	0018      	movs	r0, r3
 8004536:	f000 f9f9 	bl	800492c <UART_CheckIdleState>
 800453a:	0003      	movs	r3, r0
}
 800453c:	0018      	movs	r0, r3
 800453e:	46bd      	mov	sp, r7
 8004540:	b002      	add	sp, #8
 8004542:	bd80      	pop	{r7, pc}
 8004544:	ffffb7ff 	.word	0xffffb7ff

08004548 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b088      	sub	sp, #32
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004550:	231e      	movs	r3, #30
 8004552:	18fb      	adds	r3, r7, r3
 8004554:	2200      	movs	r2, #0
 8004556:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	689a      	ldr	r2, [r3, #8]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	691b      	ldr	r3, [r3, #16]
 8004560:	431a      	orrs	r2, r3
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	695b      	ldr	r3, [r3, #20]
 8004566:	431a      	orrs	r2, r3
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	69db      	ldr	r3, [r3, #28]
 800456c:	4313      	orrs	r3, r2
 800456e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a8b      	ldr	r2, [pc, #556]	; (80047a4 <UART_SetConfig+0x25c>)
 8004578:	4013      	ands	r3, r2
 800457a:	0019      	movs	r1, r3
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	697a      	ldr	r2, [r7, #20]
 8004582:	430a      	orrs	r2, r1
 8004584:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	4a86      	ldr	r2, [pc, #536]	; (80047a8 <UART_SetConfig+0x260>)
 800458e:	4013      	ands	r3, r2
 8004590:	0019      	movs	r1, r3
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	68da      	ldr	r2, [r3, #12]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	430a      	orrs	r2, r1
 800459c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	699b      	ldr	r3, [r3, #24]
 80045a2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6a1b      	ldr	r3, [r3, #32]
 80045a8:	697a      	ldr	r2, [r7, #20]
 80045aa:	4313      	orrs	r3, r2
 80045ac:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	4a7d      	ldr	r2, [pc, #500]	; (80047ac <UART_SetConfig+0x264>)
 80045b6:	4013      	ands	r3, r2
 80045b8:	0019      	movs	r1, r3
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	697a      	ldr	r2, [r7, #20]
 80045c0:	430a      	orrs	r2, r1
 80045c2:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a79      	ldr	r2, [pc, #484]	; (80047b0 <UART_SetConfig+0x268>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d125      	bne.n	800461a <UART_SetConfig+0xd2>
 80045ce:	4b79      	ldr	r3, [pc, #484]	; (80047b4 <UART_SetConfig+0x26c>)
 80045d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d2:	2203      	movs	r2, #3
 80045d4:	4013      	ands	r3, r2
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d00f      	beq.n	80045fa <UART_SetConfig+0xb2>
 80045da:	d304      	bcc.n	80045e6 <UART_SetConfig+0x9e>
 80045dc:	2b02      	cmp	r3, #2
 80045de:	d011      	beq.n	8004604 <UART_SetConfig+0xbc>
 80045e0:	2b03      	cmp	r3, #3
 80045e2:	d005      	beq.n	80045f0 <UART_SetConfig+0xa8>
 80045e4:	e013      	b.n	800460e <UART_SetConfig+0xc6>
 80045e6:	231f      	movs	r3, #31
 80045e8:	18fb      	adds	r3, r7, r3
 80045ea:	2200      	movs	r2, #0
 80045ec:	701a      	strb	r2, [r3, #0]
 80045ee:	e022      	b.n	8004636 <UART_SetConfig+0xee>
 80045f0:	231f      	movs	r3, #31
 80045f2:	18fb      	adds	r3, r7, r3
 80045f4:	2202      	movs	r2, #2
 80045f6:	701a      	strb	r2, [r3, #0]
 80045f8:	e01d      	b.n	8004636 <UART_SetConfig+0xee>
 80045fa:	231f      	movs	r3, #31
 80045fc:	18fb      	adds	r3, r7, r3
 80045fe:	2204      	movs	r2, #4
 8004600:	701a      	strb	r2, [r3, #0]
 8004602:	e018      	b.n	8004636 <UART_SetConfig+0xee>
 8004604:	231f      	movs	r3, #31
 8004606:	18fb      	adds	r3, r7, r3
 8004608:	2208      	movs	r2, #8
 800460a:	701a      	strb	r2, [r3, #0]
 800460c:	e013      	b.n	8004636 <UART_SetConfig+0xee>
 800460e:	231f      	movs	r3, #31
 8004610:	18fb      	adds	r3, r7, r3
 8004612:	2210      	movs	r2, #16
 8004614:	701a      	strb	r2, [r3, #0]
 8004616:	46c0      	nop			; (mov r8, r8)
 8004618:	e00d      	b.n	8004636 <UART_SetConfig+0xee>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a66      	ldr	r2, [pc, #408]	; (80047b8 <UART_SetConfig+0x270>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d104      	bne.n	800462e <UART_SetConfig+0xe6>
 8004624:	231f      	movs	r3, #31
 8004626:	18fb      	adds	r3, r7, r3
 8004628:	2200      	movs	r2, #0
 800462a:	701a      	strb	r2, [r3, #0]
 800462c:	e003      	b.n	8004636 <UART_SetConfig+0xee>
 800462e:	231f      	movs	r3, #31
 8004630:	18fb      	adds	r3, r7, r3
 8004632:	2210      	movs	r2, #16
 8004634:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	69da      	ldr	r2, [r3, #28]
 800463a:	2380      	movs	r3, #128	; 0x80
 800463c:	021b      	lsls	r3, r3, #8
 800463e:	429a      	cmp	r2, r3
 8004640:	d15c      	bne.n	80046fc <UART_SetConfig+0x1b4>
  {
    switch (clocksource)
 8004642:	231f      	movs	r3, #31
 8004644:	18fb      	adds	r3, r7, r3
 8004646:	781b      	ldrb	r3, [r3, #0]
 8004648:	2b02      	cmp	r3, #2
 800464a:	d00d      	beq.n	8004668 <UART_SetConfig+0x120>
 800464c:	dc02      	bgt.n	8004654 <UART_SetConfig+0x10c>
 800464e:	2b00      	cmp	r3, #0
 8004650:	d005      	beq.n	800465e <UART_SetConfig+0x116>
 8004652:	e015      	b.n	8004680 <UART_SetConfig+0x138>
 8004654:	2b04      	cmp	r3, #4
 8004656:	d00a      	beq.n	800466e <UART_SetConfig+0x126>
 8004658:	2b08      	cmp	r3, #8
 800465a:	d00d      	beq.n	8004678 <UART_SetConfig+0x130>
 800465c:	e010      	b.n	8004680 <UART_SetConfig+0x138>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800465e:	f7fe fcef 	bl	8003040 <HAL_RCC_GetPCLK1Freq>
 8004662:	0003      	movs	r3, r0
 8004664:	61bb      	str	r3, [r7, #24]
        break;
 8004666:	e012      	b.n	800468e <UART_SetConfig+0x146>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004668:	4b54      	ldr	r3, [pc, #336]	; (80047bc <UART_SetConfig+0x274>)
 800466a:	61bb      	str	r3, [r7, #24]
        break;
 800466c:	e00f      	b.n	800468e <UART_SetConfig+0x146>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800466e:	f7fe fc79 	bl	8002f64 <HAL_RCC_GetSysClockFreq>
 8004672:	0003      	movs	r3, r0
 8004674:	61bb      	str	r3, [r7, #24]
        break;
 8004676:	e00a      	b.n	800468e <UART_SetConfig+0x146>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004678:	2380      	movs	r3, #128	; 0x80
 800467a:	021b      	lsls	r3, r3, #8
 800467c:	61bb      	str	r3, [r7, #24]
        break;
 800467e:	e006      	b.n	800468e <UART_SetConfig+0x146>
      default:
        pclk = 0U;
 8004680:	2300      	movs	r3, #0
 8004682:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004684:	231e      	movs	r3, #30
 8004686:	18fb      	adds	r3, r7, r3
 8004688:	2201      	movs	r2, #1
 800468a:	701a      	strb	r2, [r3, #0]
        break;
 800468c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800468e:	69bb      	ldr	r3, [r7, #24]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d100      	bne.n	8004696 <UART_SetConfig+0x14e>
 8004694:	e079      	b.n	800478a <UART_SetConfig+0x242>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004696:	69bb      	ldr	r3, [r7, #24]
 8004698:	005a      	lsls	r2, r3, #1
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	085b      	lsrs	r3, r3, #1
 80046a0:	18d2      	adds	r2, r2, r3
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	0019      	movs	r1, r3
 80046a8:	0010      	movs	r0, r2
 80046aa:	f7fb fd37 	bl	800011c <__udivsi3>
 80046ae:	0003      	movs	r3, r0
 80046b0:	b29b      	uxth	r3, r3
 80046b2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	2b0f      	cmp	r3, #15
 80046b8:	d91b      	bls.n	80046f2 <UART_SetConfig+0x1aa>
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	4a40      	ldr	r2, [pc, #256]	; (80047c0 <UART_SetConfig+0x278>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d817      	bhi.n	80046f2 <UART_SetConfig+0x1aa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	b29a      	uxth	r2, r3
 80046c6:	200e      	movs	r0, #14
 80046c8:	183b      	adds	r3, r7, r0
 80046ca:	210f      	movs	r1, #15
 80046cc:	438a      	bics	r2, r1
 80046ce:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	085b      	lsrs	r3, r3, #1
 80046d4:	b29b      	uxth	r3, r3
 80046d6:	2207      	movs	r2, #7
 80046d8:	4013      	ands	r3, r2
 80046da:	b299      	uxth	r1, r3
 80046dc:	183b      	adds	r3, r7, r0
 80046de:	183a      	adds	r2, r7, r0
 80046e0:	8812      	ldrh	r2, [r2, #0]
 80046e2:	430a      	orrs	r2, r1
 80046e4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	183a      	adds	r2, r7, r0
 80046ec:	8812      	ldrh	r2, [r2, #0]
 80046ee:	60da      	str	r2, [r3, #12]
 80046f0:	e04b      	b.n	800478a <UART_SetConfig+0x242>
      }
      else
      {
        ret = HAL_ERROR;
 80046f2:	231e      	movs	r3, #30
 80046f4:	18fb      	adds	r3, r7, r3
 80046f6:	2201      	movs	r2, #1
 80046f8:	701a      	strb	r2, [r3, #0]
 80046fa:	e046      	b.n	800478a <UART_SetConfig+0x242>
      }
    }
  }
  else
  {
    switch (clocksource)
 80046fc:	231f      	movs	r3, #31
 80046fe:	18fb      	adds	r3, r7, r3
 8004700:	781b      	ldrb	r3, [r3, #0]
 8004702:	2b02      	cmp	r3, #2
 8004704:	d00d      	beq.n	8004722 <UART_SetConfig+0x1da>
 8004706:	dc02      	bgt.n	800470e <UART_SetConfig+0x1c6>
 8004708:	2b00      	cmp	r3, #0
 800470a:	d005      	beq.n	8004718 <UART_SetConfig+0x1d0>
 800470c:	e015      	b.n	800473a <UART_SetConfig+0x1f2>
 800470e:	2b04      	cmp	r3, #4
 8004710:	d00a      	beq.n	8004728 <UART_SetConfig+0x1e0>
 8004712:	2b08      	cmp	r3, #8
 8004714:	d00d      	beq.n	8004732 <UART_SetConfig+0x1ea>
 8004716:	e010      	b.n	800473a <UART_SetConfig+0x1f2>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004718:	f7fe fc92 	bl	8003040 <HAL_RCC_GetPCLK1Freq>
 800471c:	0003      	movs	r3, r0
 800471e:	61bb      	str	r3, [r7, #24]
        break;
 8004720:	e012      	b.n	8004748 <UART_SetConfig+0x200>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004722:	4b26      	ldr	r3, [pc, #152]	; (80047bc <UART_SetConfig+0x274>)
 8004724:	61bb      	str	r3, [r7, #24]
        break;
 8004726:	e00f      	b.n	8004748 <UART_SetConfig+0x200>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004728:	f7fe fc1c 	bl	8002f64 <HAL_RCC_GetSysClockFreq>
 800472c:	0003      	movs	r3, r0
 800472e:	61bb      	str	r3, [r7, #24]
        break;
 8004730:	e00a      	b.n	8004748 <UART_SetConfig+0x200>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004732:	2380      	movs	r3, #128	; 0x80
 8004734:	021b      	lsls	r3, r3, #8
 8004736:	61bb      	str	r3, [r7, #24]
        break;
 8004738:	e006      	b.n	8004748 <UART_SetConfig+0x200>
      default:
        pclk = 0U;
 800473a:	2300      	movs	r3, #0
 800473c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800473e:	231e      	movs	r3, #30
 8004740:	18fb      	adds	r3, r7, r3
 8004742:	2201      	movs	r2, #1
 8004744:	701a      	strb	r2, [r3, #0]
        break;
 8004746:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004748:	69bb      	ldr	r3, [r7, #24]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d01d      	beq.n	800478a <UART_SetConfig+0x242>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	085a      	lsrs	r2, r3, #1
 8004754:	69bb      	ldr	r3, [r7, #24]
 8004756:	18d2      	adds	r2, r2, r3
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	0019      	movs	r1, r3
 800475e:	0010      	movs	r0, r2
 8004760:	f7fb fcdc 	bl	800011c <__udivsi3>
 8004764:	0003      	movs	r3, r0
 8004766:	b29b      	uxth	r3, r3
 8004768:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	2b0f      	cmp	r3, #15
 800476e:	d908      	bls.n	8004782 <UART_SetConfig+0x23a>
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	4a13      	ldr	r2, [pc, #76]	; (80047c0 <UART_SetConfig+0x278>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d804      	bhi.n	8004782 <UART_SetConfig+0x23a>
      {
        huart->Instance->BRR = usartdiv;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	693a      	ldr	r2, [r7, #16]
 800477e:	60da      	str	r2, [r3, #12]
 8004780:	e003      	b.n	800478a <UART_SetConfig+0x242>
      }
      else
      {
        ret = HAL_ERROR;
 8004782:	231e      	movs	r3, #30
 8004784:	18fb      	adds	r3, r7, r3
 8004786:	2201      	movs	r2, #1
 8004788:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2200      	movs	r2, #0
 800478e:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2200      	movs	r2, #0
 8004794:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004796:	231e      	movs	r3, #30
 8004798:	18fb      	adds	r3, r7, r3
 800479a:	781b      	ldrb	r3, [r3, #0]
}
 800479c:	0018      	movs	r0, r3
 800479e:	46bd      	mov	sp, r7
 80047a0:	b008      	add	sp, #32
 80047a2:	bd80      	pop	{r7, pc}
 80047a4:	ffff69f3 	.word	0xffff69f3
 80047a8:	ffffcfff 	.word	0xffffcfff
 80047ac:	fffff4ff 	.word	0xfffff4ff
 80047b0:	40013800 	.word	0x40013800
 80047b4:	40021000 	.word	0x40021000
 80047b8:	40004400 	.word	0x40004400
 80047bc:	007a1200 	.word	0x007a1200
 80047c0:	0000ffff 	.word	0x0000ffff

080047c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b082      	sub	sp, #8
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d0:	2201      	movs	r2, #1
 80047d2:	4013      	ands	r3, r2
 80047d4:	d00b      	beq.n	80047ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	4a4a      	ldr	r2, [pc, #296]	; (8004908 <UART_AdvFeatureConfig+0x144>)
 80047de:	4013      	ands	r3, r2
 80047e0:	0019      	movs	r1, r3
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	430a      	orrs	r2, r1
 80047ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f2:	2202      	movs	r2, #2
 80047f4:	4013      	ands	r3, r2
 80047f6:	d00b      	beq.n	8004810 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	4a43      	ldr	r2, [pc, #268]	; (800490c <UART_AdvFeatureConfig+0x148>)
 8004800:	4013      	ands	r3, r2
 8004802:	0019      	movs	r1, r3
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	430a      	orrs	r2, r1
 800480e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004814:	2204      	movs	r2, #4
 8004816:	4013      	ands	r3, r2
 8004818:	d00b      	beq.n	8004832 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	4a3b      	ldr	r2, [pc, #236]	; (8004910 <UART_AdvFeatureConfig+0x14c>)
 8004822:	4013      	ands	r3, r2
 8004824:	0019      	movs	r1, r3
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	430a      	orrs	r2, r1
 8004830:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004836:	2208      	movs	r2, #8
 8004838:	4013      	ands	r3, r2
 800483a:	d00b      	beq.n	8004854 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	4a34      	ldr	r2, [pc, #208]	; (8004914 <UART_AdvFeatureConfig+0x150>)
 8004844:	4013      	ands	r3, r2
 8004846:	0019      	movs	r1, r3
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	430a      	orrs	r2, r1
 8004852:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004858:	2210      	movs	r2, #16
 800485a:	4013      	ands	r3, r2
 800485c:	d00b      	beq.n	8004876 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	4a2c      	ldr	r2, [pc, #176]	; (8004918 <UART_AdvFeatureConfig+0x154>)
 8004866:	4013      	ands	r3, r2
 8004868:	0019      	movs	r1, r3
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	430a      	orrs	r2, r1
 8004874:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487a:	2220      	movs	r2, #32
 800487c:	4013      	ands	r3, r2
 800487e:	d00b      	beq.n	8004898 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	4a25      	ldr	r2, [pc, #148]	; (800491c <UART_AdvFeatureConfig+0x158>)
 8004888:	4013      	ands	r3, r2
 800488a:	0019      	movs	r1, r3
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	430a      	orrs	r2, r1
 8004896:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800489c:	2240      	movs	r2, #64	; 0x40
 800489e:	4013      	ands	r3, r2
 80048a0:	d01d      	beq.n	80048de <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	4a1d      	ldr	r2, [pc, #116]	; (8004920 <UART_AdvFeatureConfig+0x15c>)
 80048aa:	4013      	ands	r3, r2
 80048ac:	0019      	movs	r1, r3
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	430a      	orrs	r2, r1
 80048b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80048be:	2380      	movs	r3, #128	; 0x80
 80048c0:	035b      	lsls	r3, r3, #13
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d10b      	bne.n	80048de <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	4a15      	ldr	r2, [pc, #84]	; (8004924 <UART_AdvFeatureConfig+0x160>)
 80048ce:	4013      	ands	r3, r2
 80048d0:	0019      	movs	r1, r3
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	430a      	orrs	r2, r1
 80048dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e2:	2280      	movs	r2, #128	; 0x80
 80048e4:	4013      	ands	r3, r2
 80048e6:	d00b      	beq.n	8004900 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	4a0e      	ldr	r2, [pc, #56]	; (8004928 <UART_AdvFeatureConfig+0x164>)
 80048f0:	4013      	ands	r3, r2
 80048f2:	0019      	movs	r1, r3
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	430a      	orrs	r2, r1
 80048fe:	605a      	str	r2, [r3, #4]
  }
}
 8004900:	46c0      	nop			; (mov r8, r8)
 8004902:	46bd      	mov	sp, r7
 8004904:	b002      	add	sp, #8
 8004906:	bd80      	pop	{r7, pc}
 8004908:	fffdffff 	.word	0xfffdffff
 800490c:	fffeffff 	.word	0xfffeffff
 8004910:	fffbffff 	.word	0xfffbffff
 8004914:	ffff7fff 	.word	0xffff7fff
 8004918:	ffffefff 	.word	0xffffefff
 800491c:	ffffdfff 	.word	0xffffdfff
 8004920:	ffefffff 	.word	0xffefffff
 8004924:	ff9fffff 	.word	0xff9fffff
 8004928:	fff7ffff 	.word	0xfff7ffff

0800492c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b086      	sub	sp, #24
 8004930:	af02      	add	r7, sp, #8
 8004932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2280      	movs	r2, #128	; 0x80
 8004938:	2100      	movs	r1, #0
 800493a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800493c:	f7fd fcb2 	bl	80022a4 <HAL_GetTick>
 8004940:	0003      	movs	r3, r0
 8004942:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	2208      	movs	r2, #8
 800494c:	4013      	ands	r3, r2
 800494e:	2b08      	cmp	r3, #8
 8004950:	d10d      	bne.n	800496e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004952:	68fa      	ldr	r2, [r7, #12]
 8004954:	2380      	movs	r3, #128	; 0x80
 8004956:	0399      	lsls	r1, r3, #14
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	4b18      	ldr	r3, [pc, #96]	; (80049bc <UART_CheckIdleState+0x90>)
 800495c:	9300      	str	r3, [sp, #0]
 800495e:	0013      	movs	r3, r2
 8004960:	2200      	movs	r2, #0
 8004962:	f000 f82d 	bl	80049c0 <UART_WaitOnFlagUntilTimeout>
 8004966:	1e03      	subs	r3, r0, #0
 8004968:	d001      	beq.n	800496e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800496a:	2303      	movs	r3, #3
 800496c:	e022      	b.n	80049b4 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	2204      	movs	r2, #4
 8004976:	4013      	ands	r3, r2
 8004978:	2b04      	cmp	r3, #4
 800497a:	d10d      	bne.n	8004998 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800497c:	68fa      	ldr	r2, [r7, #12]
 800497e:	2380      	movs	r3, #128	; 0x80
 8004980:	03d9      	lsls	r1, r3, #15
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	4b0d      	ldr	r3, [pc, #52]	; (80049bc <UART_CheckIdleState+0x90>)
 8004986:	9300      	str	r3, [sp, #0]
 8004988:	0013      	movs	r3, r2
 800498a:	2200      	movs	r2, #0
 800498c:	f000 f818 	bl	80049c0 <UART_WaitOnFlagUntilTimeout>
 8004990:	1e03      	subs	r3, r0, #0
 8004992:	d001      	beq.n	8004998 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004994:	2303      	movs	r3, #3
 8004996:	e00d      	b.n	80049b4 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2220      	movs	r2, #32
 800499c:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2220      	movs	r2, #32
 80049a2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2200      	movs	r2, #0
 80049a8:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2274      	movs	r2, #116	; 0x74
 80049ae:	2100      	movs	r1, #0
 80049b0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80049b2:	2300      	movs	r3, #0
}
 80049b4:	0018      	movs	r0, r3
 80049b6:	46bd      	mov	sp, r7
 80049b8:	b004      	add	sp, #16
 80049ba:	bd80      	pop	{r7, pc}
 80049bc:	01ffffff 	.word	0x01ffffff

080049c0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b094      	sub	sp, #80	; 0x50
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	60f8      	str	r0, [r7, #12]
 80049c8:	60b9      	str	r1, [r7, #8]
 80049ca:	603b      	str	r3, [r7, #0]
 80049cc:	1dfb      	adds	r3, r7, #7
 80049ce:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049d0:	e09b      	b.n	8004b0a <UART_WaitOnFlagUntilTimeout+0x14a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80049d4:	3301      	adds	r3, #1
 80049d6:	d100      	bne.n	80049da <UART_WaitOnFlagUntilTimeout+0x1a>
 80049d8:	e097      	b.n	8004b0a <UART_WaitOnFlagUntilTimeout+0x14a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049da:	f7fd fc63 	bl	80022a4 <HAL_GetTick>
 80049de:	0002      	movs	r2, r0
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	1ad3      	subs	r3, r2, r3
 80049e4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d302      	bcc.n	80049f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80049ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d139      	bne.n	8004a64 <UART_WaitOnFlagUntilTimeout+0xa4>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049f0:	f3ef 8310 	mrs	r3, PRIMASK
 80049f4:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80049f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80049f8:	647b      	str	r3, [r7, #68]	; 0x44
 80049fa:	2301      	movs	r3, #1
 80049fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a00:	f383 8810 	msr	PRIMASK, r3
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	681a      	ldr	r2, [r3, #0]
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4949      	ldr	r1, [pc, #292]	; (8004b34 <UART_WaitOnFlagUntilTimeout+0x174>)
 8004a10:	400a      	ands	r2, r1
 8004a12:	601a      	str	r2, [r3, #0]
 8004a14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a16:	633b      	str	r3, [r7, #48]	; 0x30
 8004a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a1a:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a1e:	f3ef 8310 	mrs	r3, PRIMASK
 8004a22:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8004a24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a26:	643b      	str	r3, [r7, #64]	; 0x40
 8004a28:	2301      	movs	r3, #1
 8004a2a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a2e:	f383 8810 	msr	PRIMASK, r3
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	689a      	ldr	r2, [r3, #8]
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	2101      	movs	r1, #1
 8004a3e:	438a      	bics	r2, r1
 8004a40:	609a      	str	r2, [r3, #8]
 8004a42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a44:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a48:	f383 8810 	msr	PRIMASK, r3

        huart->gState = HAL_UART_STATE_READY;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2220      	movs	r2, #32
 8004a50:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2220      	movs	r2, #32
 8004a56:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2274      	movs	r2, #116	; 0x74
 8004a5c:	2100      	movs	r1, #0
 8004a5e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004a60:	2303      	movs	r3, #3
 8004a62:	e063      	b.n	8004b2c <UART_WaitOnFlagUntilTimeout+0x16c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	2204      	movs	r2, #4
 8004a6c:	4013      	ands	r3, r2
 8004a6e:	d04c      	beq.n	8004b0a <UART_WaitOnFlagUntilTimeout+0x14a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	69da      	ldr	r2, [r3, #28]
 8004a76:	2380      	movs	r3, #128	; 0x80
 8004a78:	011b      	lsls	r3, r3, #4
 8004a7a:	401a      	ands	r2, r3
 8004a7c:	2380      	movs	r3, #128	; 0x80
 8004a7e:	011b      	lsls	r3, r3, #4
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d142      	bne.n	8004b0a <UART_WaitOnFlagUntilTimeout+0x14a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	2280      	movs	r2, #128	; 0x80
 8004a8a:	0112      	lsls	r2, r2, #4
 8004a8c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a8e:	f3ef 8310 	mrs	r3, PRIMASK
 8004a92:	613b      	str	r3, [r7, #16]
  return(result);
 8004a94:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a98:	2301      	movs	r3, #1
 8004a9a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	f383 8810 	msr	PRIMASK, r3
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4921      	ldr	r1, [pc, #132]	; (8004b34 <UART_WaitOnFlagUntilTimeout+0x174>)
 8004aae:	400a      	ands	r2, r1
 8004ab0:	601a      	str	r2, [r3, #0]
 8004ab2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ab4:	61bb      	str	r3, [r7, #24]
 8004ab6:	69bb      	ldr	r3, [r7, #24]
 8004ab8:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004abc:	f3ef 8310 	mrs	r3, PRIMASK
 8004ac0:	61fb      	str	r3, [r7, #28]
  return(result);
 8004ac2:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ac4:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004aca:	6a3b      	ldr	r3, [r7, #32]
 8004acc:	f383 8810 	msr	PRIMASK, r3
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	689a      	ldr	r2, [r3, #8]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	2101      	movs	r1, #1
 8004adc:	438a      	bics	r2, r1
 8004ade:	609a      	str	r2, [r3, #8]
 8004ae0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ae2:	627b      	str	r3, [r7, #36]	; 0x24
 8004ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae6:	f383 8810 	msr	PRIMASK, r3

          huart->gState = HAL_UART_STATE_READY;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	2220      	movs	r2, #32
 8004aee:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2220      	movs	r2, #32
 8004af4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2280      	movs	r2, #128	; 0x80
 8004afa:	2120      	movs	r1, #32
 8004afc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2274      	movs	r2, #116	; 0x74
 8004b02:	2100      	movs	r1, #0
 8004b04:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004b06:	2303      	movs	r3, #3
 8004b08:	e010      	b.n	8004b2c <UART_WaitOnFlagUntilTimeout+0x16c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	69db      	ldr	r3, [r3, #28]
 8004b10:	68ba      	ldr	r2, [r7, #8]
 8004b12:	4013      	ands	r3, r2
 8004b14:	68ba      	ldr	r2, [r7, #8]
 8004b16:	1ad3      	subs	r3, r2, r3
 8004b18:	425a      	negs	r2, r3
 8004b1a:	4153      	adcs	r3, r2
 8004b1c:	b2db      	uxtb	r3, r3
 8004b1e:	001a      	movs	r2, r3
 8004b20:	1dfb      	adds	r3, r7, #7
 8004b22:	781b      	ldrb	r3, [r3, #0]
 8004b24:	429a      	cmp	r2, r3
 8004b26:	d100      	bne.n	8004b2a <UART_WaitOnFlagUntilTimeout+0x16a>
 8004b28:	e753      	b.n	80049d2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b2a:	2300      	movs	r3, #0
}
 8004b2c:	0018      	movs	r0, r3
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	b014      	add	sp, #80	; 0x50
 8004b32:	bd80      	pop	{r7, pc}
 8004b34:	fffffe5f 	.word	0xfffffe5f

08004b38 <__libc_init_array>:
 8004b38:	b570      	push	{r4, r5, r6, lr}
 8004b3a:	2600      	movs	r6, #0
 8004b3c:	4d0c      	ldr	r5, [pc, #48]	; (8004b70 <__libc_init_array+0x38>)
 8004b3e:	4c0d      	ldr	r4, [pc, #52]	; (8004b74 <__libc_init_array+0x3c>)
 8004b40:	1b64      	subs	r4, r4, r5
 8004b42:	10a4      	asrs	r4, r4, #2
 8004b44:	42a6      	cmp	r6, r4
 8004b46:	d109      	bne.n	8004b5c <__libc_init_array+0x24>
 8004b48:	2600      	movs	r6, #0
 8004b4a:	f001 f817 	bl	8005b7c <_init>
 8004b4e:	4d0a      	ldr	r5, [pc, #40]	; (8004b78 <__libc_init_array+0x40>)
 8004b50:	4c0a      	ldr	r4, [pc, #40]	; (8004b7c <__libc_init_array+0x44>)
 8004b52:	1b64      	subs	r4, r4, r5
 8004b54:	10a4      	asrs	r4, r4, #2
 8004b56:	42a6      	cmp	r6, r4
 8004b58:	d105      	bne.n	8004b66 <__libc_init_array+0x2e>
 8004b5a:	bd70      	pop	{r4, r5, r6, pc}
 8004b5c:	00b3      	lsls	r3, r6, #2
 8004b5e:	58eb      	ldr	r3, [r5, r3]
 8004b60:	4798      	blx	r3
 8004b62:	3601      	adds	r6, #1
 8004b64:	e7ee      	b.n	8004b44 <__libc_init_array+0xc>
 8004b66:	00b3      	lsls	r3, r6, #2
 8004b68:	58eb      	ldr	r3, [r5, r3]
 8004b6a:	4798      	blx	r3
 8004b6c:	3601      	adds	r6, #1
 8004b6e:	e7f2      	b.n	8004b56 <__libc_init_array+0x1e>
 8004b70:	08005de8 	.word	0x08005de8
 8004b74:	08005de8 	.word	0x08005de8
 8004b78:	08005de8 	.word	0x08005de8
 8004b7c:	08005dec 	.word	0x08005dec

08004b80 <memset>:
 8004b80:	0003      	movs	r3, r0
 8004b82:	1812      	adds	r2, r2, r0
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d100      	bne.n	8004b8a <memset+0xa>
 8004b88:	4770      	bx	lr
 8004b8a:	7019      	strb	r1, [r3, #0]
 8004b8c:	3301      	adds	r3, #1
 8004b8e:	e7f9      	b.n	8004b84 <memset+0x4>

08004b90 <sin>:
 8004b90:	b530      	push	{r4, r5, lr}
 8004b92:	4a20      	ldr	r2, [pc, #128]	; (8004c14 <sin+0x84>)
 8004b94:	004b      	lsls	r3, r1, #1
 8004b96:	b087      	sub	sp, #28
 8004b98:	085b      	lsrs	r3, r3, #1
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	dc06      	bgt.n	8004bac <sin+0x1c>
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	9300      	str	r3, [sp, #0]
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	f000 fe49 	bl	800583c <__kernel_sin>
 8004baa:	e006      	b.n	8004bba <sin+0x2a>
 8004bac:	4a1a      	ldr	r2, [pc, #104]	; (8004c18 <sin+0x88>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	dd05      	ble.n	8004bbe <sin+0x2e>
 8004bb2:	0002      	movs	r2, r0
 8004bb4:	000b      	movs	r3, r1
 8004bb6:	f7fc fb19 	bl	80011ec <__aeabi_dsub>
 8004bba:	b007      	add	sp, #28
 8004bbc:	bd30      	pop	{r4, r5, pc}
 8004bbe:	aa02      	add	r2, sp, #8
 8004bc0:	f000 f82c 	bl	8004c1c <__ieee754_rem_pio2>
 8004bc4:	9c04      	ldr	r4, [sp, #16]
 8004bc6:	9d05      	ldr	r5, [sp, #20]
 8004bc8:	2303      	movs	r3, #3
 8004bca:	4003      	ands	r3, r0
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d00a      	beq.n	8004be6 <sin+0x56>
 8004bd0:	9802      	ldr	r0, [sp, #8]
 8004bd2:	9903      	ldr	r1, [sp, #12]
 8004bd4:	2b02      	cmp	r3, #2
 8004bd6:	d00d      	beq.n	8004bf4 <sin+0x64>
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d115      	bne.n	8004c08 <sin+0x78>
 8004bdc:	3301      	adds	r3, #1
 8004bde:	9300      	str	r3, [sp, #0]
 8004be0:	0022      	movs	r2, r4
 8004be2:	002b      	movs	r3, r5
 8004be4:	e7df      	b.n	8004ba6 <sin+0x16>
 8004be6:	0022      	movs	r2, r4
 8004be8:	9802      	ldr	r0, [sp, #8]
 8004bea:	9903      	ldr	r1, [sp, #12]
 8004bec:	002b      	movs	r3, r5
 8004bee:	f000 f9fd 	bl	8004fec <__kernel_cos>
 8004bf2:	e7e2      	b.n	8004bba <sin+0x2a>
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	0022      	movs	r2, r4
 8004bf8:	9300      	str	r3, [sp, #0]
 8004bfa:	002b      	movs	r3, r5
 8004bfc:	f000 fe1e 	bl	800583c <__kernel_sin>
 8004c00:	2380      	movs	r3, #128	; 0x80
 8004c02:	061b      	lsls	r3, r3, #24
 8004c04:	18c9      	adds	r1, r1, r3
 8004c06:	e7d8      	b.n	8004bba <sin+0x2a>
 8004c08:	0022      	movs	r2, r4
 8004c0a:	002b      	movs	r3, r5
 8004c0c:	f000 f9ee 	bl	8004fec <__kernel_cos>
 8004c10:	e7f6      	b.n	8004c00 <sin+0x70>
 8004c12:	46c0      	nop			; (mov r8, r8)
 8004c14:	3fe921fb 	.word	0x3fe921fb
 8004c18:	7fefffff 	.word	0x7fefffff

08004c1c <__ieee754_rem_pio2>:
 8004c1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c1e:	004b      	lsls	r3, r1, #1
 8004c20:	b091      	sub	sp, #68	; 0x44
 8004c22:	085b      	lsrs	r3, r3, #1
 8004c24:	9302      	str	r3, [sp, #8]
 8004c26:	0017      	movs	r7, r2
 8004c28:	4bb3      	ldr	r3, [pc, #716]	; (8004ef8 <__ieee754_rem_pio2+0x2dc>)
 8004c2a:	9a02      	ldr	r2, [sp, #8]
 8004c2c:	0004      	movs	r4, r0
 8004c2e:	9109      	str	r1, [sp, #36]	; 0x24
 8004c30:	429a      	cmp	r2, r3
 8004c32:	dc09      	bgt.n	8004c48 <__ieee754_rem_pio2+0x2c>
 8004c34:	0002      	movs	r2, r0
 8004c36:	000b      	movs	r3, r1
 8004c38:	603a      	str	r2, [r7, #0]
 8004c3a:	607b      	str	r3, [r7, #4]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	2300      	movs	r3, #0
 8004c40:	60ba      	str	r2, [r7, #8]
 8004c42:	60fb      	str	r3, [r7, #12]
 8004c44:	2600      	movs	r6, #0
 8004c46:	e024      	b.n	8004c92 <__ieee754_rem_pio2+0x76>
 8004c48:	4bac      	ldr	r3, [pc, #688]	; (8004efc <__ieee754_rem_pio2+0x2e0>)
 8004c4a:	9a02      	ldr	r2, [sp, #8]
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	dd00      	ble.n	8004c52 <__ieee754_rem_pio2+0x36>
 8004c50:	e06d      	b.n	8004d2e <__ieee754_rem_pio2+0x112>
 8004c52:	4aab      	ldr	r2, [pc, #684]	; (8004f00 <__ieee754_rem_pio2+0x2e4>)
 8004c54:	2900      	cmp	r1, #0
 8004c56:	dd35      	ble.n	8004cc4 <__ieee754_rem_pio2+0xa8>
 8004c58:	4baa      	ldr	r3, [pc, #680]	; (8004f04 <__ieee754_rem_pio2+0x2e8>)
 8004c5a:	f7fc fac7 	bl	80011ec <__aeabi_dsub>
 8004c5e:	9b02      	ldr	r3, [sp, #8]
 8004c60:	0004      	movs	r4, r0
 8004c62:	001a      	movs	r2, r3
 8004c64:	4ba7      	ldr	r3, [pc, #668]	; (8004f04 <__ieee754_rem_pio2+0x2e8>)
 8004c66:	000d      	movs	r5, r1
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	d015      	beq.n	8004c98 <__ieee754_rem_pio2+0x7c>
 8004c6c:	4aa6      	ldr	r2, [pc, #664]	; (8004f08 <__ieee754_rem_pio2+0x2ec>)
 8004c6e:	4ba7      	ldr	r3, [pc, #668]	; (8004f0c <__ieee754_rem_pio2+0x2f0>)
 8004c70:	f7fc fabc 	bl	80011ec <__aeabi_dsub>
 8004c74:	0002      	movs	r2, r0
 8004c76:	000b      	movs	r3, r1
 8004c78:	0020      	movs	r0, r4
 8004c7a:	603a      	str	r2, [r7, #0]
 8004c7c:	607b      	str	r3, [r7, #4]
 8004c7e:	0029      	movs	r1, r5
 8004c80:	f7fc fab4 	bl	80011ec <__aeabi_dsub>
 8004c84:	4aa0      	ldr	r2, [pc, #640]	; (8004f08 <__ieee754_rem_pio2+0x2ec>)
 8004c86:	4ba1      	ldr	r3, [pc, #644]	; (8004f0c <__ieee754_rem_pio2+0x2f0>)
 8004c88:	f7fc fab0 	bl	80011ec <__aeabi_dsub>
 8004c8c:	2601      	movs	r6, #1
 8004c8e:	60b8      	str	r0, [r7, #8]
 8004c90:	60f9      	str	r1, [r7, #12]
 8004c92:	0030      	movs	r0, r6
 8004c94:	b011      	add	sp, #68	; 0x44
 8004c96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c98:	22d3      	movs	r2, #211	; 0xd3
 8004c9a:	4b9c      	ldr	r3, [pc, #624]	; (8004f0c <__ieee754_rem_pio2+0x2f0>)
 8004c9c:	0552      	lsls	r2, r2, #21
 8004c9e:	f7fc faa5 	bl	80011ec <__aeabi_dsub>
 8004ca2:	4a9b      	ldr	r2, [pc, #620]	; (8004f10 <__ieee754_rem_pio2+0x2f4>)
 8004ca4:	4b9b      	ldr	r3, [pc, #620]	; (8004f14 <__ieee754_rem_pio2+0x2f8>)
 8004ca6:	0004      	movs	r4, r0
 8004ca8:	000d      	movs	r5, r1
 8004caa:	f7fc fa9f 	bl	80011ec <__aeabi_dsub>
 8004cae:	0002      	movs	r2, r0
 8004cb0:	000b      	movs	r3, r1
 8004cb2:	0020      	movs	r0, r4
 8004cb4:	603a      	str	r2, [r7, #0]
 8004cb6:	607b      	str	r3, [r7, #4]
 8004cb8:	0029      	movs	r1, r5
 8004cba:	f7fc fa97 	bl	80011ec <__aeabi_dsub>
 8004cbe:	4a94      	ldr	r2, [pc, #592]	; (8004f10 <__ieee754_rem_pio2+0x2f4>)
 8004cc0:	4b94      	ldr	r3, [pc, #592]	; (8004f14 <__ieee754_rem_pio2+0x2f8>)
 8004cc2:	e7e1      	b.n	8004c88 <__ieee754_rem_pio2+0x6c>
 8004cc4:	4b8f      	ldr	r3, [pc, #572]	; (8004f04 <__ieee754_rem_pio2+0x2e8>)
 8004cc6:	f7fb fbfb 	bl	80004c0 <__aeabi_dadd>
 8004cca:	9b02      	ldr	r3, [sp, #8]
 8004ccc:	0004      	movs	r4, r0
 8004cce:	001a      	movs	r2, r3
 8004cd0:	4b8c      	ldr	r3, [pc, #560]	; (8004f04 <__ieee754_rem_pio2+0x2e8>)
 8004cd2:	000d      	movs	r5, r1
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	d014      	beq.n	8004d02 <__ieee754_rem_pio2+0xe6>
 8004cd8:	4a8b      	ldr	r2, [pc, #556]	; (8004f08 <__ieee754_rem_pio2+0x2ec>)
 8004cda:	4b8c      	ldr	r3, [pc, #560]	; (8004f0c <__ieee754_rem_pio2+0x2f0>)
 8004cdc:	f7fb fbf0 	bl	80004c0 <__aeabi_dadd>
 8004ce0:	0002      	movs	r2, r0
 8004ce2:	000b      	movs	r3, r1
 8004ce4:	0020      	movs	r0, r4
 8004ce6:	603a      	str	r2, [r7, #0]
 8004ce8:	607b      	str	r3, [r7, #4]
 8004cea:	0029      	movs	r1, r5
 8004cec:	f7fc fa7e 	bl	80011ec <__aeabi_dsub>
 8004cf0:	4a85      	ldr	r2, [pc, #532]	; (8004f08 <__ieee754_rem_pio2+0x2ec>)
 8004cf2:	4b86      	ldr	r3, [pc, #536]	; (8004f0c <__ieee754_rem_pio2+0x2f0>)
 8004cf4:	f7fb fbe4 	bl	80004c0 <__aeabi_dadd>
 8004cf8:	2601      	movs	r6, #1
 8004cfa:	60b8      	str	r0, [r7, #8]
 8004cfc:	60f9      	str	r1, [r7, #12]
 8004cfe:	4276      	negs	r6, r6
 8004d00:	e7c7      	b.n	8004c92 <__ieee754_rem_pio2+0x76>
 8004d02:	22d3      	movs	r2, #211	; 0xd3
 8004d04:	4b81      	ldr	r3, [pc, #516]	; (8004f0c <__ieee754_rem_pio2+0x2f0>)
 8004d06:	0552      	lsls	r2, r2, #21
 8004d08:	f7fb fbda 	bl	80004c0 <__aeabi_dadd>
 8004d0c:	4a80      	ldr	r2, [pc, #512]	; (8004f10 <__ieee754_rem_pio2+0x2f4>)
 8004d0e:	4b81      	ldr	r3, [pc, #516]	; (8004f14 <__ieee754_rem_pio2+0x2f8>)
 8004d10:	0004      	movs	r4, r0
 8004d12:	000d      	movs	r5, r1
 8004d14:	f7fb fbd4 	bl	80004c0 <__aeabi_dadd>
 8004d18:	0002      	movs	r2, r0
 8004d1a:	000b      	movs	r3, r1
 8004d1c:	0020      	movs	r0, r4
 8004d1e:	603a      	str	r2, [r7, #0]
 8004d20:	607b      	str	r3, [r7, #4]
 8004d22:	0029      	movs	r1, r5
 8004d24:	f7fc fa62 	bl	80011ec <__aeabi_dsub>
 8004d28:	4a79      	ldr	r2, [pc, #484]	; (8004f10 <__ieee754_rem_pio2+0x2f4>)
 8004d2a:	4b7a      	ldr	r3, [pc, #488]	; (8004f14 <__ieee754_rem_pio2+0x2f8>)
 8004d2c:	e7e2      	b.n	8004cf4 <__ieee754_rem_pio2+0xd8>
 8004d2e:	4b7a      	ldr	r3, [pc, #488]	; (8004f18 <__ieee754_rem_pio2+0x2fc>)
 8004d30:	9a02      	ldr	r2, [sp, #8]
 8004d32:	429a      	cmp	r2, r3
 8004d34:	dd00      	ble.n	8004d38 <__ieee754_rem_pio2+0x11c>
 8004d36:	e0d1      	b.n	8004edc <__ieee754_rem_pio2+0x2c0>
 8004d38:	f000 fe2e 	bl	8005998 <fabs>
 8004d3c:	4a77      	ldr	r2, [pc, #476]	; (8004f1c <__ieee754_rem_pio2+0x300>)
 8004d3e:	4b78      	ldr	r3, [pc, #480]	; (8004f20 <__ieee754_rem_pio2+0x304>)
 8004d40:	0004      	movs	r4, r0
 8004d42:	000d      	movs	r5, r1
 8004d44:	f7fb ffe0 	bl	8000d08 <__aeabi_dmul>
 8004d48:	2200      	movs	r2, #0
 8004d4a:	4b76      	ldr	r3, [pc, #472]	; (8004f24 <__ieee754_rem_pio2+0x308>)
 8004d4c:	f7fb fbb8 	bl	80004c0 <__aeabi_dadd>
 8004d50:	f7fc fd94 	bl	800187c <__aeabi_d2iz>
 8004d54:	0006      	movs	r6, r0
 8004d56:	f7fc fdc7 	bl	80018e8 <__aeabi_i2d>
 8004d5a:	4a69      	ldr	r2, [pc, #420]	; (8004f00 <__ieee754_rem_pio2+0x2e4>)
 8004d5c:	4b69      	ldr	r3, [pc, #420]	; (8004f04 <__ieee754_rem_pio2+0x2e8>)
 8004d5e:	9006      	str	r0, [sp, #24]
 8004d60:	9107      	str	r1, [sp, #28]
 8004d62:	f7fb ffd1 	bl	8000d08 <__aeabi_dmul>
 8004d66:	0002      	movs	r2, r0
 8004d68:	000b      	movs	r3, r1
 8004d6a:	0020      	movs	r0, r4
 8004d6c:	0029      	movs	r1, r5
 8004d6e:	f7fc fa3d 	bl	80011ec <__aeabi_dsub>
 8004d72:	4a65      	ldr	r2, [pc, #404]	; (8004f08 <__ieee754_rem_pio2+0x2ec>)
 8004d74:	9004      	str	r0, [sp, #16]
 8004d76:	9105      	str	r1, [sp, #20]
 8004d78:	9806      	ldr	r0, [sp, #24]
 8004d7a:	9907      	ldr	r1, [sp, #28]
 8004d7c:	4b63      	ldr	r3, [pc, #396]	; (8004f0c <__ieee754_rem_pio2+0x2f0>)
 8004d7e:	f7fb ffc3 	bl	8000d08 <__aeabi_dmul>
 8004d82:	0004      	movs	r4, r0
 8004d84:	000d      	movs	r5, r1
 8004d86:	2e1f      	cmp	r6, #31
 8004d88:	dc0f      	bgt.n	8004daa <__ieee754_rem_pio2+0x18e>
 8004d8a:	4a67      	ldr	r2, [pc, #412]	; (8004f28 <__ieee754_rem_pio2+0x30c>)
 8004d8c:	1e73      	subs	r3, r6, #1
 8004d8e:	009b      	lsls	r3, r3, #2
 8004d90:	589b      	ldr	r3, [r3, r2]
 8004d92:	9a02      	ldr	r2, [sp, #8]
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d008      	beq.n	8004daa <__ieee754_rem_pio2+0x18e>
 8004d98:	9804      	ldr	r0, [sp, #16]
 8004d9a:	9905      	ldr	r1, [sp, #20]
 8004d9c:	0022      	movs	r2, r4
 8004d9e:	002b      	movs	r3, r5
 8004da0:	f7fc fa24 	bl	80011ec <__aeabi_dsub>
 8004da4:	6038      	str	r0, [r7, #0]
 8004da6:	6079      	str	r1, [r7, #4]
 8004da8:	e012      	b.n	8004dd0 <__ieee754_rem_pio2+0x1b4>
 8004daa:	0022      	movs	r2, r4
 8004dac:	9804      	ldr	r0, [sp, #16]
 8004dae:	9905      	ldr	r1, [sp, #20]
 8004db0:	002b      	movs	r3, r5
 8004db2:	f7fc fa1b 	bl	80011ec <__aeabi_dsub>
 8004db6:	9b02      	ldr	r3, [sp, #8]
 8004db8:	151b      	asrs	r3, r3, #20
 8004dba:	9308      	str	r3, [sp, #32]
 8004dbc:	9a08      	ldr	r2, [sp, #32]
 8004dbe:	004b      	lsls	r3, r1, #1
 8004dc0:	0d5b      	lsrs	r3, r3, #21
 8004dc2:	1ad3      	subs	r3, r2, r3
 8004dc4:	2b10      	cmp	r3, #16
 8004dc6:	dc21      	bgt.n	8004e0c <__ieee754_rem_pio2+0x1f0>
 8004dc8:	0002      	movs	r2, r0
 8004dca:	000b      	movs	r3, r1
 8004dcc:	603a      	str	r2, [r7, #0]
 8004dce:	607b      	str	r3, [r7, #4]
 8004dd0:	9804      	ldr	r0, [sp, #16]
 8004dd2:	9905      	ldr	r1, [sp, #20]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	683a      	ldr	r2, [r7, #0]
 8004dd8:	9302      	str	r3, [sp, #8]
 8004dda:	9b02      	ldr	r3, [sp, #8]
 8004ddc:	f7fc fa06 	bl	80011ec <__aeabi_dsub>
 8004de0:	0022      	movs	r2, r4
 8004de2:	002b      	movs	r3, r5
 8004de4:	f7fc fa02 	bl	80011ec <__aeabi_dsub>
 8004de8:	000b      	movs	r3, r1
 8004dea:	0002      	movs	r2, r0
 8004dec:	60ba      	str	r2, [r7, #8]
 8004dee:	60fb      	str	r3, [r7, #12]
 8004df0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	db00      	blt.n	8004df8 <__ieee754_rem_pio2+0x1dc>
 8004df6:	e74c      	b.n	8004c92 <__ieee754_rem_pio2+0x76>
 8004df8:	2280      	movs	r2, #128	; 0x80
 8004dfa:	0612      	lsls	r2, r2, #24
 8004dfc:	4694      	mov	ip, r2
 8004dfe:	9b02      	ldr	r3, [sp, #8]
 8004e00:	1889      	adds	r1, r1, r2
 8004e02:	4463      	add	r3, ip
 8004e04:	607b      	str	r3, [r7, #4]
 8004e06:	60b8      	str	r0, [r7, #8]
 8004e08:	60f9      	str	r1, [r7, #12]
 8004e0a:	e778      	b.n	8004cfe <__ieee754_rem_pio2+0xe2>
 8004e0c:	22d3      	movs	r2, #211	; 0xd3
 8004e0e:	9806      	ldr	r0, [sp, #24]
 8004e10:	9907      	ldr	r1, [sp, #28]
 8004e12:	0552      	lsls	r2, r2, #21
 8004e14:	4b3d      	ldr	r3, [pc, #244]	; (8004f0c <__ieee754_rem_pio2+0x2f0>)
 8004e16:	f7fb ff77 	bl	8000d08 <__aeabi_dmul>
 8004e1a:	0004      	movs	r4, r0
 8004e1c:	000d      	movs	r5, r1
 8004e1e:	0002      	movs	r2, r0
 8004e20:	000b      	movs	r3, r1
 8004e22:	9804      	ldr	r0, [sp, #16]
 8004e24:	9905      	ldr	r1, [sp, #20]
 8004e26:	f7fc f9e1 	bl	80011ec <__aeabi_dsub>
 8004e2a:	0002      	movs	r2, r0
 8004e2c:	000b      	movs	r3, r1
 8004e2e:	9002      	str	r0, [sp, #8]
 8004e30:	9103      	str	r1, [sp, #12]
 8004e32:	9804      	ldr	r0, [sp, #16]
 8004e34:	9905      	ldr	r1, [sp, #20]
 8004e36:	f7fc f9d9 	bl	80011ec <__aeabi_dsub>
 8004e3a:	0022      	movs	r2, r4
 8004e3c:	002b      	movs	r3, r5
 8004e3e:	f7fc f9d5 	bl	80011ec <__aeabi_dsub>
 8004e42:	0004      	movs	r4, r0
 8004e44:	000d      	movs	r5, r1
 8004e46:	9806      	ldr	r0, [sp, #24]
 8004e48:	9907      	ldr	r1, [sp, #28]
 8004e4a:	4a31      	ldr	r2, [pc, #196]	; (8004f10 <__ieee754_rem_pio2+0x2f4>)
 8004e4c:	4b31      	ldr	r3, [pc, #196]	; (8004f14 <__ieee754_rem_pio2+0x2f8>)
 8004e4e:	f7fb ff5b 	bl	8000d08 <__aeabi_dmul>
 8004e52:	0022      	movs	r2, r4
 8004e54:	002b      	movs	r3, r5
 8004e56:	f7fc f9c9 	bl	80011ec <__aeabi_dsub>
 8004e5a:	0002      	movs	r2, r0
 8004e5c:	000b      	movs	r3, r1
 8004e5e:	0004      	movs	r4, r0
 8004e60:	000d      	movs	r5, r1
 8004e62:	9802      	ldr	r0, [sp, #8]
 8004e64:	9903      	ldr	r1, [sp, #12]
 8004e66:	f7fc f9c1 	bl	80011ec <__aeabi_dsub>
 8004e6a:	9a08      	ldr	r2, [sp, #32]
 8004e6c:	004b      	lsls	r3, r1, #1
 8004e6e:	0d5b      	lsrs	r3, r3, #21
 8004e70:	1ad3      	subs	r3, r2, r3
 8004e72:	2b31      	cmp	r3, #49	; 0x31
 8004e74:	dc08      	bgt.n	8004e88 <__ieee754_rem_pio2+0x26c>
 8004e76:	0002      	movs	r2, r0
 8004e78:	000b      	movs	r3, r1
 8004e7a:	603a      	str	r2, [r7, #0]
 8004e7c:	607b      	str	r3, [r7, #4]
 8004e7e:	9a02      	ldr	r2, [sp, #8]
 8004e80:	9b03      	ldr	r3, [sp, #12]
 8004e82:	9204      	str	r2, [sp, #16]
 8004e84:	9305      	str	r3, [sp, #20]
 8004e86:	e7a3      	b.n	8004dd0 <__ieee754_rem_pio2+0x1b4>
 8004e88:	22b8      	movs	r2, #184	; 0xb8
 8004e8a:	9806      	ldr	r0, [sp, #24]
 8004e8c:	9907      	ldr	r1, [sp, #28]
 8004e8e:	0592      	lsls	r2, r2, #22
 8004e90:	4b20      	ldr	r3, [pc, #128]	; (8004f14 <__ieee754_rem_pio2+0x2f8>)
 8004e92:	f7fb ff39 	bl	8000d08 <__aeabi_dmul>
 8004e96:	0004      	movs	r4, r0
 8004e98:	000d      	movs	r5, r1
 8004e9a:	0002      	movs	r2, r0
 8004e9c:	000b      	movs	r3, r1
 8004e9e:	9802      	ldr	r0, [sp, #8]
 8004ea0:	9903      	ldr	r1, [sp, #12]
 8004ea2:	f7fc f9a3 	bl	80011ec <__aeabi_dsub>
 8004ea6:	0002      	movs	r2, r0
 8004ea8:	000b      	movs	r3, r1
 8004eaa:	9004      	str	r0, [sp, #16]
 8004eac:	9105      	str	r1, [sp, #20]
 8004eae:	9802      	ldr	r0, [sp, #8]
 8004eb0:	9903      	ldr	r1, [sp, #12]
 8004eb2:	f7fc f99b 	bl	80011ec <__aeabi_dsub>
 8004eb6:	0022      	movs	r2, r4
 8004eb8:	002b      	movs	r3, r5
 8004eba:	f7fc f997 	bl	80011ec <__aeabi_dsub>
 8004ebe:	0004      	movs	r4, r0
 8004ec0:	000d      	movs	r5, r1
 8004ec2:	9806      	ldr	r0, [sp, #24]
 8004ec4:	9907      	ldr	r1, [sp, #28]
 8004ec6:	4a19      	ldr	r2, [pc, #100]	; (8004f2c <__ieee754_rem_pio2+0x310>)
 8004ec8:	4b19      	ldr	r3, [pc, #100]	; (8004f30 <__ieee754_rem_pio2+0x314>)
 8004eca:	f7fb ff1d 	bl	8000d08 <__aeabi_dmul>
 8004ece:	0022      	movs	r2, r4
 8004ed0:	002b      	movs	r3, r5
 8004ed2:	f7fc f98b 	bl	80011ec <__aeabi_dsub>
 8004ed6:	0004      	movs	r4, r0
 8004ed8:	000d      	movs	r5, r1
 8004eda:	e75d      	b.n	8004d98 <__ieee754_rem_pio2+0x17c>
 8004edc:	4b15      	ldr	r3, [pc, #84]	; (8004f34 <__ieee754_rem_pio2+0x318>)
 8004ede:	9a02      	ldr	r2, [sp, #8]
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	dd29      	ble.n	8004f38 <__ieee754_rem_pio2+0x31c>
 8004ee4:	0002      	movs	r2, r0
 8004ee6:	000b      	movs	r3, r1
 8004ee8:	f7fc f980 	bl	80011ec <__aeabi_dsub>
 8004eec:	60b8      	str	r0, [r7, #8]
 8004eee:	60f9      	str	r1, [r7, #12]
 8004ef0:	6038      	str	r0, [r7, #0]
 8004ef2:	6079      	str	r1, [r7, #4]
 8004ef4:	e6a6      	b.n	8004c44 <__ieee754_rem_pio2+0x28>
 8004ef6:	46c0      	nop			; (mov r8, r8)
 8004ef8:	3fe921fb 	.word	0x3fe921fb
 8004efc:	4002d97b 	.word	0x4002d97b
 8004f00:	54400000 	.word	0x54400000
 8004f04:	3ff921fb 	.word	0x3ff921fb
 8004f08:	1a626331 	.word	0x1a626331
 8004f0c:	3dd0b461 	.word	0x3dd0b461
 8004f10:	2e037073 	.word	0x2e037073
 8004f14:	3ba3198a 	.word	0x3ba3198a
 8004f18:	413921fb 	.word	0x413921fb
 8004f1c:	6dc9c883 	.word	0x6dc9c883
 8004f20:	3fe45f30 	.word	0x3fe45f30
 8004f24:	3fe00000 	.word	0x3fe00000
 8004f28:	08005c10 	.word	0x08005c10
 8004f2c:	252049c1 	.word	0x252049c1
 8004f30:	397b839a 	.word	0x397b839a
 8004f34:	7fefffff 	.word	0x7fefffff
 8004f38:	9b02      	ldr	r3, [sp, #8]
 8004f3a:	4a29      	ldr	r2, [pc, #164]	; (8004fe0 <__ieee754_rem_pio2+0x3c4>)
 8004f3c:	151b      	asrs	r3, r3, #20
 8004f3e:	189b      	adds	r3, r3, r2
 8004f40:	9a02      	ldr	r2, [sp, #8]
 8004f42:	9304      	str	r3, [sp, #16]
 8004f44:	051b      	lsls	r3, r3, #20
 8004f46:	1ad5      	subs	r5, r2, r3
 8004f48:	0029      	movs	r1, r5
 8004f4a:	f7fc fc97 	bl	800187c <__aeabi_d2iz>
 8004f4e:	f7fc fccb 	bl	80018e8 <__aeabi_i2d>
 8004f52:	0002      	movs	r2, r0
 8004f54:	000b      	movs	r3, r1
 8004f56:	0020      	movs	r0, r4
 8004f58:	0029      	movs	r1, r5
 8004f5a:	920a      	str	r2, [sp, #40]	; 0x28
 8004f5c:	930b      	str	r3, [sp, #44]	; 0x2c
 8004f5e:	f7fc f945 	bl	80011ec <__aeabi_dsub>
 8004f62:	2200      	movs	r2, #0
 8004f64:	4b1f      	ldr	r3, [pc, #124]	; (8004fe4 <__ieee754_rem_pio2+0x3c8>)
 8004f66:	f7fb fecf 	bl	8000d08 <__aeabi_dmul>
 8004f6a:	0004      	movs	r4, r0
 8004f6c:	000d      	movs	r5, r1
 8004f6e:	f7fc fc85 	bl	800187c <__aeabi_d2iz>
 8004f72:	f7fc fcb9 	bl	80018e8 <__aeabi_i2d>
 8004f76:	0002      	movs	r2, r0
 8004f78:	000b      	movs	r3, r1
 8004f7a:	ae0a      	add	r6, sp, #40	; 0x28
 8004f7c:	60b2      	str	r2, [r6, #8]
 8004f7e:	60f3      	str	r3, [r6, #12]
 8004f80:	0020      	movs	r0, r4
 8004f82:	0029      	movs	r1, r5
 8004f84:	f7fc f932 	bl	80011ec <__aeabi_dsub>
 8004f88:	2200      	movs	r2, #0
 8004f8a:	4b16      	ldr	r3, [pc, #88]	; (8004fe4 <__ieee754_rem_pio2+0x3c8>)
 8004f8c:	f7fb febc 	bl	8000d08 <__aeabi_dmul>
 8004f90:	2403      	movs	r4, #3
 8004f92:	6130      	str	r0, [r6, #16]
 8004f94:	6171      	str	r1, [r6, #20]
 8004f96:	1e65      	subs	r5, r4, #1
 8004f98:	00eb      	lsls	r3, r5, #3
 8004f9a:	18f3      	adds	r3, r6, r3
 8004f9c:	6818      	ldr	r0, [r3, #0]
 8004f9e:	6859      	ldr	r1, [r3, #4]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	f7fb fa40 	bl	8000428 <__aeabi_dcmpeq>
 8004fa8:	2800      	cmp	r0, #0
 8004faa:	d117      	bne.n	8004fdc <__ieee754_rem_pio2+0x3c0>
 8004fac:	4b0e      	ldr	r3, [pc, #56]	; (8004fe8 <__ieee754_rem_pio2+0x3cc>)
 8004fae:	0030      	movs	r0, r6
 8004fb0:	9301      	str	r3, [sp, #4]
 8004fb2:	2302      	movs	r3, #2
 8004fb4:	9a04      	ldr	r2, [sp, #16]
 8004fb6:	9300      	str	r3, [sp, #0]
 8004fb8:	0039      	movs	r1, r7
 8004fba:	0023      	movs	r3, r4
 8004fbc:	f000 f8d6 	bl	800516c <__kernel_rem_pio2>
 8004fc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fc2:	0006      	movs	r6, r0
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	db00      	blt.n	8004fca <__ieee754_rem_pio2+0x3ae>
 8004fc8:	e663      	b.n	8004c92 <__ieee754_rem_pio2+0x76>
 8004fca:	2280      	movs	r2, #128	; 0x80
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	0612      	lsls	r2, r2, #24
 8004fd0:	189b      	adds	r3, r3, r2
 8004fd2:	607b      	str	r3, [r7, #4]
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	189b      	adds	r3, r3, r2
 8004fd8:	60fb      	str	r3, [r7, #12]
 8004fda:	e690      	b.n	8004cfe <__ieee754_rem_pio2+0xe2>
 8004fdc:	002c      	movs	r4, r5
 8004fde:	e7da      	b.n	8004f96 <__ieee754_rem_pio2+0x37a>
 8004fe0:	fffffbea 	.word	0xfffffbea
 8004fe4:	41700000 	.word	0x41700000
 8004fe8:	08005c90 	.word	0x08005c90

08004fec <__kernel_cos>:
 8004fec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fee:	b087      	sub	sp, #28
 8004ff0:	9204      	str	r2, [sp, #16]
 8004ff2:	9305      	str	r3, [sp, #20]
 8004ff4:	004b      	lsls	r3, r1, #1
 8004ff6:	085b      	lsrs	r3, r3, #1
 8004ff8:	9300      	str	r3, [sp, #0]
 8004ffa:	9a00      	ldr	r2, [sp, #0]
 8004ffc:	4b48      	ldr	r3, [pc, #288]	; (8005120 <__kernel_cos+0x134>)
 8004ffe:	0005      	movs	r5, r0
 8005000:	000c      	movs	r4, r1
 8005002:	429a      	cmp	r2, r3
 8005004:	dc04      	bgt.n	8005010 <__kernel_cos+0x24>
 8005006:	f7fc fc39 	bl	800187c <__aeabi_d2iz>
 800500a:	2800      	cmp	r0, #0
 800500c:	d100      	bne.n	8005010 <__kernel_cos+0x24>
 800500e:	e084      	b.n	800511a <__kernel_cos+0x12e>
 8005010:	002a      	movs	r2, r5
 8005012:	0023      	movs	r3, r4
 8005014:	0028      	movs	r0, r5
 8005016:	0021      	movs	r1, r4
 8005018:	f7fb fe76 	bl	8000d08 <__aeabi_dmul>
 800501c:	2200      	movs	r2, #0
 800501e:	4b41      	ldr	r3, [pc, #260]	; (8005124 <__kernel_cos+0x138>)
 8005020:	0006      	movs	r6, r0
 8005022:	000f      	movs	r7, r1
 8005024:	f7fb fe70 	bl	8000d08 <__aeabi_dmul>
 8005028:	4a3f      	ldr	r2, [pc, #252]	; (8005128 <__kernel_cos+0x13c>)
 800502a:	9002      	str	r0, [sp, #8]
 800502c:	9103      	str	r1, [sp, #12]
 800502e:	4b3f      	ldr	r3, [pc, #252]	; (800512c <__kernel_cos+0x140>)
 8005030:	0030      	movs	r0, r6
 8005032:	0039      	movs	r1, r7
 8005034:	f7fb fe68 	bl	8000d08 <__aeabi_dmul>
 8005038:	4a3d      	ldr	r2, [pc, #244]	; (8005130 <__kernel_cos+0x144>)
 800503a:	4b3e      	ldr	r3, [pc, #248]	; (8005134 <__kernel_cos+0x148>)
 800503c:	f7fb fa40 	bl	80004c0 <__aeabi_dadd>
 8005040:	0032      	movs	r2, r6
 8005042:	003b      	movs	r3, r7
 8005044:	f7fb fe60 	bl	8000d08 <__aeabi_dmul>
 8005048:	4a3b      	ldr	r2, [pc, #236]	; (8005138 <__kernel_cos+0x14c>)
 800504a:	4b3c      	ldr	r3, [pc, #240]	; (800513c <__kernel_cos+0x150>)
 800504c:	f7fc f8ce 	bl	80011ec <__aeabi_dsub>
 8005050:	0032      	movs	r2, r6
 8005052:	003b      	movs	r3, r7
 8005054:	f7fb fe58 	bl	8000d08 <__aeabi_dmul>
 8005058:	4a39      	ldr	r2, [pc, #228]	; (8005140 <__kernel_cos+0x154>)
 800505a:	4b3a      	ldr	r3, [pc, #232]	; (8005144 <__kernel_cos+0x158>)
 800505c:	f7fb fa30 	bl	80004c0 <__aeabi_dadd>
 8005060:	0032      	movs	r2, r6
 8005062:	003b      	movs	r3, r7
 8005064:	f7fb fe50 	bl	8000d08 <__aeabi_dmul>
 8005068:	4a37      	ldr	r2, [pc, #220]	; (8005148 <__kernel_cos+0x15c>)
 800506a:	4b38      	ldr	r3, [pc, #224]	; (800514c <__kernel_cos+0x160>)
 800506c:	f7fc f8be 	bl	80011ec <__aeabi_dsub>
 8005070:	0032      	movs	r2, r6
 8005072:	003b      	movs	r3, r7
 8005074:	f7fb fe48 	bl	8000d08 <__aeabi_dmul>
 8005078:	4a35      	ldr	r2, [pc, #212]	; (8005150 <__kernel_cos+0x164>)
 800507a:	4b36      	ldr	r3, [pc, #216]	; (8005154 <__kernel_cos+0x168>)
 800507c:	f7fb fa20 	bl	80004c0 <__aeabi_dadd>
 8005080:	0032      	movs	r2, r6
 8005082:	003b      	movs	r3, r7
 8005084:	f7fb fe40 	bl	8000d08 <__aeabi_dmul>
 8005088:	0032      	movs	r2, r6
 800508a:	003b      	movs	r3, r7
 800508c:	f7fb fe3c 	bl	8000d08 <__aeabi_dmul>
 8005090:	9a04      	ldr	r2, [sp, #16]
 8005092:	9b05      	ldr	r3, [sp, #20]
 8005094:	0006      	movs	r6, r0
 8005096:	000f      	movs	r7, r1
 8005098:	0028      	movs	r0, r5
 800509a:	0021      	movs	r1, r4
 800509c:	f7fb fe34 	bl	8000d08 <__aeabi_dmul>
 80050a0:	0002      	movs	r2, r0
 80050a2:	000b      	movs	r3, r1
 80050a4:	0030      	movs	r0, r6
 80050a6:	0039      	movs	r1, r7
 80050a8:	f7fc f8a0 	bl	80011ec <__aeabi_dsub>
 80050ac:	4b2a      	ldr	r3, [pc, #168]	; (8005158 <__kernel_cos+0x16c>)
 80050ae:	9a00      	ldr	r2, [sp, #0]
 80050b0:	0004      	movs	r4, r0
 80050b2:	000d      	movs	r5, r1
 80050b4:	429a      	cmp	r2, r3
 80050b6:	dc0d      	bgt.n	80050d4 <__kernel_cos+0xe8>
 80050b8:	0002      	movs	r2, r0
 80050ba:	000b      	movs	r3, r1
 80050bc:	9802      	ldr	r0, [sp, #8]
 80050be:	9903      	ldr	r1, [sp, #12]
 80050c0:	f7fc f894 	bl	80011ec <__aeabi_dsub>
 80050c4:	0002      	movs	r2, r0
 80050c6:	2000      	movs	r0, #0
 80050c8:	000b      	movs	r3, r1
 80050ca:	4924      	ldr	r1, [pc, #144]	; (800515c <__kernel_cos+0x170>)
 80050cc:	f7fc f88e 	bl	80011ec <__aeabi_dsub>
 80050d0:	b007      	add	sp, #28
 80050d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050d4:	4b22      	ldr	r3, [pc, #136]	; (8005160 <__kernel_cos+0x174>)
 80050d6:	9a00      	ldr	r2, [sp, #0]
 80050d8:	2600      	movs	r6, #0
 80050da:	429a      	cmp	r2, r3
 80050dc:	dc1b      	bgt.n	8005116 <__kernel_cos+0x12a>
 80050de:	0013      	movs	r3, r2
 80050e0:	4a20      	ldr	r2, [pc, #128]	; (8005164 <__kernel_cos+0x178>)
 80050e2:	4694      	mov	ip, r2
 80050e4:	4463      	add	r3, ip
 80050e6:	001f      	movs	r7, r3
 80050e8:	0032      	movs	r2, r6
 80050ea:	003b      	movs	r3, r7
 80050ec:	2000      	movs	r0, #0
 80050ee:	491b      	ldr	r1, [pc, #108]	; (800515c <__kernel_cos+0x170>)
 80050f0:	f7fc f87c 	bl	80011ec <__aeabi_dsub>
 80050f4:	0032      	movs	r2, r6
 80050f6:	9000      	str	r0, [sp, #0]
 80050f8:	9101      	str	r1, [sp, #4]
 80050fa:	9802      	ldr	r0, [sp, #8]
 80050fc:	9903      	ldr	r1, [sp, #12]
 80050fe:	003b      	movs	r3, r7
 8005100:	f7fc f874 	bl	80011ec <__aeabi_dsub>
 8005104:	0022      	movs	r2, r4
 8005106:	002b      	movs	r3, r5
 8005108:	f7fc f870 	bl	80011ec <__aeabi_dsub>
 800510c:	0002      	movs	r2, r0
 800510e:	000b      	movs	r3, r1
 8005110:	9800      	ldr	r0, [sp, #0]
 8005112:	9901      	ldr	r1, [sp, #4]
 8005114:	e7da      	b.n	80050cc <__kernel_cos+0xe0>
 8005116:	4f14      	ldr	r7, [pc, #80]	; (8005168 <__kernel_cos+0x17c>)
 8005118:	e7e6      	b.n	80050e8 <__kernel_cos+0xfc>
 800511a:	2000      	movs	r0, #0
 800511c:	490f      	ldr	r1, [pc, #60]	; (800515c <__kernel_cos+0x170>)
 800511e:	e7d7      	b.n	80050d0 <__kernel_cos+0xe4>
 8005120:	3e3fffff 	.word	0x3e3fffff
 8005124:	3fe00000 	.word	0x3fe00000
 8005128:	be8838d4 	.word	0xbe8838d4
 800512c:	bda8fae9 	.word	0xbda8fae9
 8005130:	bdb4b1c4 	.word	0xbdb4b1c4
 8005134:	3e21ee9e 	.word	0x3e21ee9e
 8005138:	809c52ad 	.word	0x809c52ad
 800513c:	3e927e4f 	.word	0x3e927e4f
 8005140:	19cb1590 	.word	0x19cb1590
 8005144:	3efa01a0 	.word	0x3efa01a0
 8005148:	16c15177 	.word	0x16c15177
 800514c:	3f56c16c 	.word	0x3f56c16c
 8005150:	5555554c 	.word	0x5555554c
 8005154:	3fa55555 	.word	0x3fa55555
 8005158:	3fd33332 	.word	0x3fd33332
 800515c:	3ff00000 	.word	0x3ff00000
 8005160:	3fe90000 	.word	0x3fe90000
 8005164:	ffe00000 	.word	0xffe00000
 8005168:	3fd20000 	.word	0x3fd20000

0800516c <__kernel_rem_pio2>:
 800516c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800516e:	0015      	movs	r5, r2
 8005170:	4cdc      	ldr	r4, [pc, #880]	; (80054e4 <__kernel_rem_pio2+0x378>)
 8005172:	44a5      	add	sp, r4
 8005174:	930b      	str	r3, [sp, #44]	; 0x2c
 8005176:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8005178:	900d      	str	r0, [sp, #52]	; 0x34
 800517a:	009a      	lsls	r2, r3, #2
 800517c:	4bda      	ldr	r3, [pc, #872]	; (80054e8 <__kernel_rem_pio2+0x37c>)
 800517e:	9103      	str	r1, [sp, #12]
 8005180:	58d3      	ldr	r3, [r2, r3]
 8005182:	1ee8      	subs	r0, r5, #3
 8005184:	9306      	str	r3, [sp, #24]
 8005186:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005188:	2118      	movs	r1, #24
 800518a:	3b01      	subs	r3, #1
 800518c:	9308      	str	r3, [sp, #32]
 800518e:	f7fb f84f 	bl	8000230 <__divsi3>
 8005192:	43c3      	mvns	r3, r0
 8005194:	0004      	movs	r4, r0
 8005196:	17db      	asrs	r3, r3, #31
 8005198:	401c      	ands	r4, r3
 800519a:	2318      	movs	r3, #24
 800519c:	1c62      	adds	r2, r4, #1
 800519e:	425b      	negs	r3, r3
 80051a0:	4353      	muls	r3, r2
 80051a2:	9a08      	ldr	r2, [sp, #32]
 80051a4:	195b      	adds	r3, r3, r5
 80051a6:	4694      	mov	ip, r2
 80051a8:	2500      	movs	r5, #0
 80051aa:	9300      	str	r3, [sp, #0]
 80051ac:	9b06      	ldr	r3, [sp, #24]
 80051ae:	1aa7      	subs	r7, r4, r2
 80051b0:	4463      	add	r3, ip
 80051b2:	9304      	str	r3, [sp, #16]
 80051b4:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80051b6:	00be      	lsls	r6, r7, #2
 80051b8:	199e      	adds	r6, r3, r6
 80051ba:	9b04      	ldr	r3, [sp, #16]
 80051bc:	429d      	cmp	r5, r3
 80051be:	dc00      	bgt.n	80051c2 <__kernel_rem_pio2+0x56>
 80051c0:	e094      	b.n	80052ec <__kernel_rem_pio2+0x180>
 80051c2:	2600      	movs	r6, #0
 80051c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80051c6:	00dd      	lsls	r5, r3, #3
 80051c8:	ab28      	add	r3, sp, #160	; 0xa0
 80051ca:	195d      	adds	r5, r3, r5
 80051cc:	9b06      	ldr	r3, [sp, #24]
 80051ce:	429e      	cmp	r6, r3
 80051d0:	dc00      	bgt.n	80051d4 <__kernel_rem_pio2+0x68>
 80051d2:	e0bc      	b.n	800534e <__kernel_rem_pio2+0x1e2>
 80051d4:	009b      	lsls	r3, r3, #2
 80051d6:	aa14      	add	r2, sp, #80	; 0x50
 80051d8:	189b      	adds	r3, r3, r2
 80051da:	9312      	str	r3, [sp, #72]	; 0x48
 80051dc:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80051de:	00a4      	lsls	r4, r4, #2
 80051e0:	191b      	adds	r3, r3, r4
 80051e2:	9f06      	ldr	r7, [sp, #24]
 80051e4:	930f      	str	r3, [sp, #60]	; 0x3c
 80051e6:	003c      	movs	r4, r7
 80051e8:	aa78      	add	r2, sp, #480	; 0x1e0
 80051ea:	00fb      	lsls	r3, r7, #3
 80051ec:	18d3      	adds	r3, r2, r3
 80051ee:	681d      	ldr	r5, [r3, #0]
 80051f0:	685e      	ldr	r6, [r3, #4]
 80051f2:	a914      	add	r1, sp, #80	; 0x50
 80051f4:	00bb      	lsls	r3, r7, #2
 80051f6:	185b      	adds	r3, r3, r1
 80051f8:	930a      	str	r3, [sp, #40]	; 0x28
 80051fa:	920e      	str	r2, [sp, #56]	; 0x38
 80051fc:	2c00      	cmp	r4, #0
 80051fe:	dd00      	ble.n	8005202 <__kernel_rem_pio2+0x96>
 8005200:	e0ab      	b.n	800535a <__kernel_rem_pio2+0x1ee>
 8005202:	9a00      	ldr	r2, [sp, #0]
 8005204:	0028      	movs	r0, r5
 8005206:	0031      	movs	r1, r6
 8005208:	f000 fc4c 	bl	8005aa4 <scalbn>
 800520c:	23ff      	movs	r3, #255	; 0xff
 800520e:	2200      	movs	r2, #0
 8005210:	059b      	lsls	r3, r3, #22
 8005212:	0004      	movs	r4, r0
 8005214:	000d      	movs	r5, r1
 8005216:	f7fb fd77 	bl	8000d08 <__aeabi_dmul>
 800521a:	f000 fbc1 	bl	80059a0 <floor>
 800521e:	2200      	movs	r2, #0
 8005220:	4bb2      	ldr	r3, [pc, #712]	; (80054ec <__kernel_rem_pio2+0x380>)
 8005222:	f7fb fd71 	bl	8000d08 <__aeabi_dmul>
 8005226:	0002      	movs	r2, r0
 8005228:	000b      	movs	r3, r1
 800522a:	0020      	movs	r0, r4
 800522c:	0029      	movs	r1, r5
 800522e:	f7fb ffdd 	bl	80011ec <__aeabi_dsub>
 8005232:	000d      	movs	r5, r1
 8005234:	0004      	movs	r4, r0
 8005236:	f7fc fb21 	bl	800187c <__aeabi_d2iz>
 800523a:	900a      	str	r0, [sp, #40]	; 0x28
 800523c:	f7fc fb54 	bl	80018e8 <__aeabi_i2d>
 8005240:	000b      	movs	r3, r1
 8005242:	0002      	movs	r2, r0
 8005244:	0029      	movs	r1, r5
 8005246:	0020      	movs	r0, r4
 8005248:	f7fb ffd0 	bl	80011ec <__aeabi_dsub>
 800524c:	9b00      	ldr	r3, [sp, #0]
 800524e:	0005      	movs	r5, r0
 8005250:	000e      	movs	r6, r1
 8005252:	2b00      	cmp	r3, #0
 8005254:	dc00      	bgt.n	8005258 <__kernel_rem_pio2+0xec>
 8005256:	e0ab      	b.n	80053b0 <__kernel_rem_pio2+0x244>
 8005258:	2118      	movs	r1, #24
 800525a:	1e7b      	subs	r3, r7, #1
 800525c:	009b      	lsls	r3, r3, #2
 800525e:	aa14      	add	r2, sp, #80	; 0x50
 8005260:	589a      	ldr	r2, [r3, r2]
 8005262:	9800      	ldr	r0, [sp, #0]
 8005264:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005266:	1a09      	subs	r1, r1, r0
 8005268:	0010      	movs	r0, r2
 800526a:	4108      	asrs	r0, r1
 800526c:	1824      	adds	r4, r4, r0
 800526e:	4088      	lsls	r0, r1
 8005270:	1a10      	subs	r0, r2, r0
 8005272:	aa14      	add	r2, sp, #80	; 0x50
 8005274:	5098      	str	r0, [r3, r2]
 8005276:	2317      	movs	r3, #23
 8005278:	9a00      	ldr	r2, [sp, #0]
 800527a:	940a      	str	r4, [sp, #40]	; 0x28
 800527c:	1a9b      	subs	r3, r3, r2
 800527e:	4118      	asrs	r0, r3
 8005280:	9004      	str	r0, [sp, #16]
 8005282:	9b04      	ldr	r3, [sp, #16]
 8005284:	2b00      	cmp	r3, #0
 8005286:	dc00      	bgt.n	800528a <__kernel_rem_pio2+0x11e>
 8005288:	e0a3      	b.n	80053d2 <__kernel_rem_pio2+0x266>
 800528a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800528c:	2200      	movs	r2, #0
 800528e:	3301      	adds	r3, #1
 8005290:	930a      	str	r3, [sp, #40]	; 0x28
 8005292:	2380      	movs	r3, #128	; 0x80
 8005294:	045b      	lsls	r3, r3, #17
 8005296:	0014      	movs	r4, r2
 8005298:	469c      	mov	ip, r3
 800529a:	4297      	cmp	r7, r2
 800529c:	dd00      	ble.n	80052a0 <__kernel_rem_pio2+0x134>
 800529e:	e0d6      	b.n	800544e <__kernel_rem_pio2+0x2e2>
 80052a0:	9b00      	ldr	r3, [sp, #0]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	dd05      	ble.n	80052b2 <__kernel_rem_pio2+0x146>
 80052a6:	2b01      	cmp	r3, #1
 80052a8:	d100      	bne.n	80052ac <__kernel_rem_pio2+0x140>
 80052aa:	e0e5      	b.n	8005478 <__kernel_rem_pio2+0x30c>
 80052ac:	2b02      	cmp	r3, #2
 80052ae:	d100      	bne.n	80052b2 <__kernel_rem_pio2+0x146>
 80052b0:	e0ec      	b.n	800548c <__kernel_rem_pio2+0x320>
 80052b2:	9b04      	ldr	r3, [sp, #16]
 80052b4:	2b02      	cmp	r3, #2
 80052b6:	d000      	beq.n	80052ba <__kernel_rem_pio2+0x14e>
 80052b8:	e08b      	b.n	80053d2 <__kernel_rem_pio2+0x266>
 80052ba:	002a      	movs	r2, r5
 80052bc:	0033      	movs	r3, r6
 80052be:	2000      	movs	r0, #0
 80052c0:	498b      	ldr	r1, [pc, #556]	; (80054f0 <__kernel_rem_pio2+0x384>)
 80052c2:	f7fb ff93 	bl	80011ec <__aeabi_dsub>
 80052c6:	0005      	movs	r5, r0
 80052c8:	000e      	movs	r6, r1
 80052ca:	2c00      	cmp	r4, #0
 80052cc:	d100      	bne.n	80052d0 <__kernel_rem_pio2+0x164>
 80052ce:	e080      	b.n	80053d2 <__kernel_rem_pio2+0x266>
 80052d0:	9a00      	ldr	r2, [sp, #0]
 80052d2:	2000      	movs	r0, #0
 80052d4:	4986      	ldr	r1, [pc, #536]	; (80054f0 <__kernel_rem_pio2+0x384>)
 80052d6:	f000 fbe5 	bl	8005aa4 <scalbn>
 80052da:	0002      	movs	r2, r0
 80052dc:	000b      	movs	r3, r1
 80052de:	0028      	movs	r0, r5
 80052e0:	0031      	movs	r1, r6
 80052e2:	f7fb ff83 	bl	80011ec <__aeabi_dsub>
 80052e6:	0005      	movs	r5, r0
 80052e8:	000e      	movs	r6, r1
 80052ea:	e072      	b.n	80053d2 <__kernel_rem_pio2+0x266>
 80052ec:	42ef      	cmn	r7, r5
 80052ee:	d40a      	bmi.n	8005306 <__kernel_rem_pio2+0x19a>
 80052f0:	00ab      	lsls	r3, r5, #2
 80052f2:	58f0      	ldr	r0, [r6, r3]
 80052f4:	f7fc faf8 	bl	80018e8 <__aeabi_i2d>
 80052f8:	00eb      	lsls	r3, r5, #3
 80052fa:	aa28      	add	r2, sp, #160	; 0xa0
 80052fc:	18d3      	adds	r3, r2, r3
 80052fe:	6018      	str	r0, [r3, #0]
 8005300:	6059      	str	r1, [r3, #4]
 8005302:	3501      	adds	r5, #1
 8005304:	e759      	b.n	80051ba <__kernel_rem_pio2+0x4e>
 8005306:	2000      	movs	r0, #0
 8005308:	2100      	movs	r1, #0
 800530a:	e7f5      	b.n	80052f8 <__kernel_rem_pio2+0x18c>
 800530c:	00fb      	lsls	r3, r7, #3
 800530e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005310:	1ae9      	subs	r1, r5, r3
 8005312:	3908      	subs	r1, #8
 8005314:	18d3      	adds	r3, r2, r3
 8005316:	681a      	ldr	r2, [r3, #0]
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	6808      	ldr	r0, [r1, #0]
 800531c:	6849      	ldr	r1, [r1, #4]
 800531e:	f7fb fcf3 	bl	8000d08 <__aeabi_dmul>
 8005322:	0002      	movs	r2, r0
 8005324:	000b      	movs	r3, r1
 8005326:	9804      	ldr	r0, [sp, #16]
 8005328:	9905      	ldr	r1, [sp, #20]
 800532a:	f7fb f8c9 	bl	80004c0 <__aeabi_dadd>
 800532e:	9004      	str	r0, [sp, #16]
 8005330:	9105      	str	r1, [sp, #20]
 8005332:	3701      	adds	r7, #1
 8005334:	9b08      	ldr	r3, [sp, #32]
 8005336:	429f      	cmp	r7, r3
 8005338:	dde8      	ble.n	800530c <__kernel_rem_pio2+0x1a0>
 800533a:	00f3      	lsls	r3, r6, #3
 800533c:	aa78      	add	r2, sp, #480	; 0x1e0
 800533e:	18d3      	adds	r3, r2, r3
 8005340:	3601      	adds	r6, #1
 8005342:	9904      	ldr	r1, [sp, #16]
 8005344:	9a05      	ldr	r2, [sp, #20]
 8005346:	3508      	adds	r5, #8
 8005348:	6019      	str	r1, [r3, #0]
 800534a:	605a      	str	r2, [r3, #4]
 800534c:	e73e      	b.n	80051cc <__kernel_rem_pio2+0x60>
 800534e:	2200      	movs	r2, #0
 8005350:	2300      	movs	r3, #0
 8005352:	2700      	movs	r7, #0
 8005354:	9204      	str	r2, [sp, #16]
 8005356:	9305      	str	r3, [sp, #20]
 8005358:	e7ec      	b.n	8005334 <__kernel_rem_pio2+0x1c8>
 800535a:	2200      	movs	r2, #0
 800535c:	4b65      	ldr	r3, [pc, #404]	; (80054f4 <__kernel_rem_pio2+0x388>)
 800535e:	0028      	movs	r0, r5
 8005360:	0031      	movs	r1, r6
 8005362:	f7fb fcd1 	bl	8000d08 <__aeabi_dmul>
 8005366:	f7fc fa89 	bl	800187c <__aeabi_d2iz>
 800536a:	f7fc fabd 	bl	80018e8 <__aeabi_i2d>
 800536e:	00a3      	lsls	r3, r4, #2
 8005370:	425b      	negs	r3, r3
 8005372:	930c      	str	r3, [sp, #48]	; 0x30
 8005374:	2200      	movs	r2, #0
 8005376:	4b60      	ldr	r3, [pc, #384]	; (80054f8 <__kernel_rem_pio2+0x38c>)
 8005378:	9004      	str	r0, [sp, #16]
 800537a:	9105      	str	r1, [sp, #20]
 800537c:	f7fb fcc4 	bl	8000d08 <__aeabi_dmul>
 8005380:	0002      	movs	r2, r0
 8005382:	000b      	movs	r3, r1
 8005384:	0028      	movs	r0, r5
 8005386:	0031      	movs	r1, r6
 8005388:	f7fb ff30 	bl	80011ec <__aeabi_dsub>
 800538c:	f7fc fa76 	bl	800187c <__aeabi_d2iz>
 8005390:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005392:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005394:	3c01      	subs	r4, #1
 8005396:	5098      	str	r0, [r3, r2]
 8005398:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800539a:	00e3      	lsls	r3, r4, #3
 800539c:	18d3      	adds	r3, r2, r3
 800539e:	681a      	ldr	r2, [r3, #0]
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	9804      	ldr	r0, [sp, #16]
 80053a4:	9905      	ldr	r1, [sp, #20]
 80053a6:	f7fb f88b 	bl	80004c0 <__aeabi_dadd>
 80053aa:	0005      	movs	r5, r0
 80053ac:	000e      	movs	r6, r1
 80053ae:	e725      	b.n	80051fc <__kernel_rem_pio2+0x90>
 80053b0:	9b00      	ldr	r3, [sp, #0]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d106      	bne.n	80053c4 <__kernel_rem_pio2+0x258>
 80053b6:	1e7b      	subs	r3, r7, #1
 80053b8:	009b      	lsls	r3, r3, #2
 80053ba:	aa14      	add	r2, sp, #80	; 0x50
 80053bc:	5898      	ldr	r0, [r3, r2]
 80053be:	15c3      	asrs	r3, r0, #23
 80053c0:	9304      	str	r3, [sp, #16]
 80053c2:	e75e      	b.n	8005282 <__kernel_rem_pio2+0x116>
 80053c4:	2200      	movs	r2, #0
 80053c6:	4b4d      	ldr	r3, [pc, #308]	; (80054fc <__kernel_rem_pio2+0x390>)
 80053c8:	f7fb f852 	bl	8000470 <__aeabi_dcmpge>
 80053cc:	2800      	cmp	r0, #0
 80053ce:	d13b      	bne.n	8005448 <__kernel_rem_pio2+0x2dc>
 80053d0:	9004      	str	r0, [sp, #16]
 80053d2:	2200      	movs	r2, #0
 80053d4:	2300      	movs	r3, #0
 80053d6:	0028      	movs	r0, r5
 80053d8:	0031      	movs	r1, r6
 80053da:	f7fb f825 	bl	8000428 <__aeabi_dcmpeq>
 80053de:	2800      	cmp	r0, #0
 80053e0:	d100      	bne.n	80053e4 <__kernel_rem_pio2+0x278>
 80053e2:	e0c9      	b.n	8005578 <__kernel_rem_pio2+0x40c>
 80053e4:	003b      	movs	r3, r7
 80053e6:	2200      	movs	r2, #0
 80053e8:	1e79      	subs	r1, r7, #1
 80053ea:	9806      	ldr	r0, [sp, #24]
 80053ec:	3b01      	subs	r3, #1
 80053ee:	4298      	cmp	r0, r3
 80053f0:	dd54      	ble.n	800549c <__kernel_rem_pio2+0x330>
 80053f2:	2a00      	cmp	r2, #0
 80053f4:	d074      	beq.n	80054e0 <__kernel_rem_pio2+0x374>
 80053f6:	000f      	movs	r7, r1
 80053f8:	9b00      	ldr	r3, [sp, #0]
 80053fa:	3b18      	subs	r3, #24
 80053fc:	9300      	str	r3, [sp, #0]
 80053fe:	00bb      	lsls	r3, r7, #2
 8005400:	aa14      	add	r2, sp, #80	; 0x50
 8005402:	589b      	ldr	r3, [r3, r2]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d100      	bne.n	800540a <__kernel_rem_pio2+0x29e>
 8005408:	e0b1      	b.n	800556e <__kernel_rem_pio2+0x402>
 800540a:	9a00      	ldr	r2, [sp, #0]
 800540c:	2000      	movs	r0, #0
 800540e:	4938      	ldr	r1, [pc, #224]	; (80054f0 <__kernel_rem_pio2+0x384>)
 8005410:	f000 fb48 	bl	8005aa4 <scalbn>
 8005414:	003c      	movs	r4, r7
 8005416:	0005      	movs	r5, r0
 8005418:	000e      	movs	r6, r1
 800541a:	2c00      	cmp	r4, #0
 800541c:	db00      	blt.n	8005420 <__kernel_rem_pio2+0x2b4>
 800541e:	e0e3      	b.n	80055e8 <__kernel_rem_pio2+0x47c>
 8005420:	2500      	movs	r5, #0
 8005422:	00fb      	lsls	r3, r7, #3
 8005424:	9308      	str	r3, [sp, #32]
 8005426:	00fa      	lsls	r2, r7, #3
 8005428:	ab78      	add	r3, sp, #480	; 0x1e0
 800542a:	189c      	adds	r4, r3, r2
 800542c:	1b7b      	subs	r3, r7, r5
 800542e:	d400      	bmi.n	8005432 <__kernel_rem_pio2+0x2c6>
 8005430:	e116      	b.n	8005660 <__kernel_rem_pio2+0x4f4>
 8005432:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8005434:	2b03      	cmp	r3, #3
 8005436:	d900      	bls.n	800543a <__kernel_rem_pio2+0x2ce>
 8005438:	e15d      	b.n	80056f6 <__kernel_rem_pio2+0x58a>
 800543a:	0018      	movs	r0, r3
 800543c:	f7fa fe64 	bl	8000108 <__gnu_thumb1_case_uhi>
 8005440:	01940163 	.word	0x01940163
 8005444:	01160194 	.word	0x01160194
 8005448:	2302      	movs	r3, #2
 800544a:	9304      	str	r3, [sp, #16]
 800544c:	e71d      	b.n	800528a <__kernel_rem_pio2+0x11e>
 800544e:	0091      	lsls	r1, r2, #2
 8005450:	ab14      	add	r3, sp, #80	; 0x50
 8005452:	58cb      	ldr	r3, [r1, r3]
 8005454:	2c00      	cmp	r4, #0
 8005456:	d109      	bne.n	800546c <__kernel_rem_pio2+0x300>
 8005458:	2b00      	cmp	r3, #0
 800545a:	d004      	beq.n	8005466 <__kernel_rem_pio2+0x2fa>
 800545c:	4664      	mov	r4, ip
 800545e:	1ae3      	subs	r3, r4, r3
 8005460:	ac14      	add	r4, sp, #80	; 0x50
 8005462:	510b      	str	r3, [r1, r4]
 8005464:	2301      	movs	r3, #1
 8005466:	3201      	adds	r2, #1
 8005468:	001c      	movs	r4, r3
 800546a:	e716      	b.n	800529a <__kernel_rem_pio2+0x12e>
 800546c:	4824      	ldr	r0, [pc, #144]	; (8005500 <__kernel_rem_pio2+0x394>)
 800546e:	1ac3      	subs	r3, r0, r3
 8005470:	a814      	add	r0, sp, #80	; 0x50
 8005472:	500b      	str	r3, [r1, r0]
 8005474:	0023      	movs	r3, r4
 8005476:	e7f6      	b.n	8005466 <__kernel_rem_pio2+0x2fa>
 8005478:	1e7b      	subs	r3, r7, #1
 800547a:	009b      	lsls	r3, r3, #2
 800547c:	aa14      	add	r2, sp, #80	; 0x50
 800547e:	589a      	ldr	r2, [r3, r2]
 8005480:	920c      	str	r2, [sp, #48]	; 0x30
 8005482:	0252      	lsls	r2, r2, #9
 8005484:	0a52      	lsrs	r2, r2, #9
 8005486:	a914      	add	r1, sp, #80	; 0x50
 8005488:	505a      	str	r2, [r3, r1]
 800548a:	e712      	b.n	80052b2 <__kernel_rem_pio2+0x146>
 800548c:	1e7b      	subs	r3, r7, #1
 800548e:	009b      	lsls	r3, r3, #2
 8005490:	aa14      	add	r2, sp, #80	; 0x50
 8005492:	589a      	ldr	r2, [r3, r2]
 8005494:	920c      	str	r2, [sp, #48]	; 0x30
 8005496:	0292      	lsls	r2, r2, #10
 8005498:	0a92      	lsrs	r2, r2, #10
 800549a:	e7f4      	b.n	8005486 <__kernel_rem_pio2+0x31a>
 800549c:	0098      	lsls	r0, r3, #2
 800549e:	ac14      	add	r4, sp, #80	; 0x50
 80054a0:	5900      	ldr	r0, [r0, r4]
 80054a2:	4302      	orrs	r2, r0
 80054a4:	e7a1      	b.n	80053ea <__kernel_rem_pio2+0x27e>
 80054a6:	3301      	adds	r3, #1
 80054a8:	009a      	lsls	r2, r3, #2
 80054aa:	9912      	ldr	r1, [sp, #72]	; 0x48
 80054ac:	4252      	negs	r2, r2
 80054ae:	588a      	ldr	r2, [r1, r2]
 80054b0:	2a00      	cmp	r2, #0
 80054b2:	d0f8      	beq.n	80054a6 <__kernel_rem_pio2+0x33a>
 80054b4:	2400      	movs	r4, #0
 80054b6:	1c7a      	adds	r2, r7, #1
 80054b8:	9204      	str	r2, [sp, #16]
 80054ba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80054bc:	18fb      	adds	r3, r7, r3
 80054be:	18ba      	adds	r2, r7, r2
 80054c0:	00d2      	lsls	r2, r2, #3
 80054c2:	920c      	str	r2, [sp, #48]	; 0x30
 80054c4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80054c6:	00fa      	lsls	r2, r7, #3
 80054c8:	920e      	str	r2, [sp, #56]	; 0x38
 80054ca:	aa28      	add	r2, sp, #160	; 0xa0
 80054cc:	1851      	adds	r1, r2, r1
 80054ce:	9110      	str	r1, [sp, #64]	; 0x40
 80054d0:	930a      	str	r3, [sp, #40]	; 0x28
 80054d2:	9213      	str	r2, [sp, #76]	; 0x4c
 80054d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80054d6:	9a04      	ldr	r2, [sp, #16]
 80054d8:	4293      	cmp	r3, r2
 80054da:	da13      	bge.n	8005504 <__kernel_rem_pio2+0x398>
 80054dc:	001f      	movs	r7, r3
 80054de:	e682      	b.n	80051e6 <__kernel_rem_pio2+0x7a>
 80054e0:	2301      	movs	r3, #1
 80054e2:	e7e1      	b.n	80054a8 <__kernel_rem_pio2+0x33c>
 80054e4:	fffffd7c 	.word	0xfffffd7c
 80054e8:	08005dd8 	.word	0x08005dd8
 80054ec:	40200000 	.word	0x40200000
 80054f0:	3ff00000 	.word	0x3ff00000
 80054f4:	3e700000 	.word	0x3e700000
 80054f8:	41700000 	.word	0x41700000
 80054fc:	3fe00000 	.word	0x3fe00000
 8005500:	00ffffff 	.word	0x00ffffff
 8005504:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005506:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005508:	18e5      	adds	r5, r4, r3
 800550a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800550c:	2600      	movs	r6, #0
 800550e:	195d      	adds	r5, r3, r5
 8005510:	9b04      	ldr	r3, [sp, #16]
 8005512:	2700      	movs	r7, #0
 8005514:	009b      	lsls	r3, r3, #2
 8005516:	58d0      	ldr	r0, [r2, r3]
 8005518:	f7fc f9e6 	bl	80018e8 <__aeabi_i2d>
 800551c:	6028      	str	r0, [r5, #0]
 800551e:	6069      	str	r1, [r5, #4]
 8005520:	2500      	movs	r5, #0
 8005522:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005524:	18e3      	adds	r3, r4, r3
 8005526:	9311      	str	r3, [sp, #68]	; 0x44
 8005528:	9b08      	ldr	r3, [sp, #32]
 800552a:	429d      	cmp	r5, r3
 800552c:	dd0a      	ble.n	8005544 <__kernel_rem_pio2+0x3d8>
 800552e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005530:	aa78      	add	r2, sp, #480	; 0x1e0
 8005532:	18e3      	adds	r3, r4, r3
 8005534:	18d3      	adds	r3, r2, r3
 8005536:	609e      	str	r6, [r3, #8]
 8005538:	60df      	str	r7, [r3, #12]
 800553a:	9b04      	ldr	r3, [sp, #16]
 800553c:	3408      	adds	r4, #8
 800553e:	3301      	adds	r3, #1
 8005540:	9304      	str	r3, [sp, #16]
 8005542:	e7c7      	b.n	80054d4 <__kernel_rem_pio2+0x368>
 8005544:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005546:	00eb      	lsls	r3, r5, #3
 8005548:	18d1      	adds	r1, r2, r3
 800554a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800554c:	6808      	ldr	r0, [r1, #0]
 800554e:	6849      	ldr	r1, [r1, #4]
 8005550:	1ad3      	subs	r3, r2, r3
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	f7fb fbd7 	bl	8000d08 <__aeabi_dmul>
 800555a:	0002      	movs	r2, r0
 800555c:	000b      	movs	r3, r1
 800555e:	0030      	movs	r0, r6
 8005560:	0039      	movs	r1, r7
 8005562:	f7fa ffad 	bl	80004c0 <__aeabi_dadd>
 8005566:	3501      	adds	r5, #1
 8005568:	0006      	movs	r6, r0
 800556a:	000f      	movs	r7, r1
 800556c:	e7dc      	b.n	8005528 <__kernel_rem_pio2+0x3bc>
 800556e:	9b00      	ldr	r3, [sp, #0]
 8005570:	3f01      	subs	r7, #1
 8005572:	3b18      	subs	r3, #24
 8005574:	9300      	str	r3, [sp, #0]
 8005576:	e742      	b.n	80053fe <__kernel_rem_pio2+0x292>
 8005578:	9b00      	ldr	r3, [sp, #0]
 800557a:	0028      	movs	r0, r5
 800557c:	425a      	negs	r2, r3
 800557e:	0031      	movs	r1, r6
 8005580:	f000 fa90 	bl	8005aa4 <scalbn>
 8005584:	2200      	movs	r2, #0
 8005586:	4baa      	ldr	r3, [pc, #680]	; (8005830 <__kernel_rem_pio2+0x6c4>)
 8005588:	0004      	movs	r4, r0
 800558a:	000d      	movs	r5, r1
 800558c:	f7fa ff70 	bl	8000470 <__aeabi_dcmpge>
 8005590:	2800      	cmp	r0, #0
 8005592:	d021      	beq.n	80055d8 <__kernel_rem_pio2+0x46c>
 8005594:	2200      	movs	r2, #0
 8005596:	4ba7      	ldr	r3, [pc, #668]	; (8005834 <__kernel_rem_pio2+0x6c8>)
 8005598:	0020      	movs	r0, r4
 800559a:	0029      	movs	r1, r5
 800559c:	f7fb fbb4 	bl	8000d08 <__aeabi_dmul>
 80055a0:	f7fc f96c 	bl	800187c <__aeabi_d2iz>
 80055a4:	0006      	movs	r6, r0
 80055a6:	f7fc f99f 	bl	80018e8 <__aeabi_i2d>
 80055aa:	2200      	movs	r2, #0
 80055ac:	4ba0      	ldr	r3, [pc, #640]	; (8005830 <__kernel_rem_pio2+0x6c4>)
 80055ae:	f7fb fbab 	bl	8000d08 <__aeabi_dmul>
 80055b2:	0002      	movs	r2, r0
 80055b4:	000b      	movs	r3, r1
 80055b6:	0020      	movs	r0, r4
 80055b8:	0029      	movs	r1, r5
 80055ba:	f7fb fe17 	bl	80011ec <__aeabi_dsub>
 80055be:	f7fc f95d 	bl	800187c <__aeabi_d2iz>
 80055c2:	00ba      	lsls	r2, r7, #2
 80055c4:	ab14      	add	r3, sp, #80	; 0x50
 80055c6:	50d0      	str	r0, [r2, r3]
 80055c8:	9b00      	ldr	r3, [sp, #0]
 80055ca:	3701      	adds	r7, #1
 80055cc:	3318      	adds	r3, #24
 80055ce:	9300      	str	r3, [sp, #0]
 80055d0:	aa14      	add	r2, sp, #80	; 0x50
 80055d2:	00bb      	lsls	r3, r7, #2
 80055d4:	509e      	str	r6, [r3, r2]
 80055d6:	e718      	b.n	800540a <__kernel_rem_pio2+0x29e>
 80055d8:	0020      	movs	r0, r4
 80055da:	0029      	movs	r1, r5
 80055dc:	f7fc f94e 	bl	800187c <__aeabi_d2iz>
 80055e0:	00be      	lsls	r6, r7, #2
 80055e2:	ab14      	add	r3, sp, #80	; 0x50
 80055e4:	50f0      	str	r0, [r6, r3]
 80055e6:	e710      	b.n	800540a <__kernel_rem_pio2+0x29e>
 80055e8:	00e3      	lsls	r3, r4, #3
 80055ea:	aa78      	add	r2, sp, #480	; 0x1e0
 80055ec:	18d3      	adds	r3, r2, r3
 80055ee:	9300      	str	r3, [sp, #0]
 80055f0:	aa14      	add	r2, sp, #80	; 0x50
 80055f2:	00a3      	lsls	r3, r4, #2
 80055f4:	5898      	ldr	r0, [r3, r2]
 80055f6:	f7fc f977 	bl	80018e8 <__aeabi_i2d>
 80055fa:	002a      	movs	r2, r5
 80055fc:	0033      	movs	r3, r6
 80055fe:	f7fb fb83 	bl	8000d08 <__aeabi_dmul>
 8005602:	9b00      	ldr	r3, [sp, #0]
 8005604:	2200      	movs	r2, #0
 8005606:	6018      	str	r0, [r3, #0]
 8005608:	6059      	str	r1, [r3, #4]
 800560a:	0028      	movs	r0, r5
 800560c:	0031      	movs	r1, r6
 800560e:	4b89      	ldr	r3, [pc, #548]	; (8005834 <__kernel_rem_pio2+0x6c8>)
 8005610:	f7fb fb7a 	bl	8000d08 <__aeabi_dmul>
 8005614:	3c01      	subs	r4, #1
 8005616:	0005      	movs	r5, r0
 8005618:	000e      	movs	r6, r1
 800561a:	e6fe      	b.n	800541a <__kernel_rem_pio2+0x2ae>
 800561c:	4a86      	ldr	r2, [pc, #536]	; (8005838 <__kernel_rem_pio2+0x6cc>)
 800561e:	00f3      	lsls	r3, r6, #3
 8005620:	18d1      	adds	r1, r2, r3
 8005622:	18e3      	adds	r3, r4, r3
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	6808      	ldr	r0, [r1, #0]
 800562a:	6849      	ldr	r1, [r1, #4]
 800562c:	f7fb fb6c 	bl	8000d08 <__aeabi_dmul>
 8005630:	0002      	movs	r2, r0
 8005632:	000b      	movs	r3, r1
 8005634:	9800      	ldr	r0, [sp, #0]
 8005636:	9901      	ldr	r1, [sp, #4]
 8005638:	f7fa ff42 	bl	80004c0 <__aeabi_dadd>
 800563c:	9000      	str	r0, [sp, #0]
 800563e:	9101      	str	r1, [sp, #4]
 8005640:	3601      	adds	r6, #1
 8005642:	9b06      	ldr	r3, [sp, #24]
 8005644:	429e      	cmp	r6, r3
 8005646:	dc01      	bgt.n	800564c <__kernel_rem_pio2+0x4e0>
 8005648:	42b5      	cmp	r5, r6
 800564a:	dae7      	bge.n	800561c <__kernel_rem_pio2+0x4b0>
 800564c:	00eb      	lsls	r3, r5, #3
 800564e:	aa50      	add	r2, sp, #320	; 0x140
 8005650:	18d3      	adds	r3, r2, r3
 8005652:	3501      	adds	r5, #1
 8005654:	9900      	ldr	r1, [sp, #0]
 8005656:	9a01      	ldr	r2, [sp, #4]
 8005658:	3c08      	subs	r4, #8
 800565a:	6019      	str	r1, [r3, #0]
 800565c:	605a      	str	r2, [r3, #4]
 800565e:	e6e5      	b.n	800542c <__kernel_rem_pio2+0x2c0>
 8005660:	2200      	movs	r2, #0
 8005662:	2300      	movs	r3, #0
 8005664:	2600      	movs	r6, #0
 8005666:	9200      	str	r2, [sp, #0]
 8005668:	9301      	str	r3, [sp, #4]
 800566a:	e7ea      	b.n	8005642 <__kernel_rem_pio2+0x4d6>
 800566c:	aa50      	add	r2, sp, #320	; 0x140
 800566e:	4694      	mov	ip, r2
 8005670:	9b08      	ldr	r3, [sp, #32]
 8005672:	003e      	movs	r6, r7
 8005674:	4463      	add	r3, ip
 8005676:	001c      	movs	r4, r3
 8005678:	001d      	movs	r5, r3
 800567a:	3d08      	subs	r5, #8
 800567c:	2e00      	cmp	r6, #0
 800567e:	dd00      	ble.n	8005682 <__kernel_rem_pio2+0x516>
 8005680:	e07f      	b.n	8005782 <__kernel_rem_pio2+0x616>
 8005682:	9700      	str	r7, [sp, #0]
 8005684:	9b00      	ldr	r3, [sp, #0]
 8005686:	3c08      	subs	r4, #8
 8005688:	2b01      	cmp	r3, #1
 800568a:	dd00      	ble.n	800568e <__kernel_rem_pio2+0x522>
 800568c:	e099      	b.n	80057c2 <__kernel_rem_pio2+0x656>
 800568e:	2000      	movs	r0, #0
 8005690:	0001      	movs	r1, r0
 8005692:	2f01      	cmp	r7, #1
 8005694:	dd00      	ble.n	8005698 <__kernel_rem_pio2+0x52c>
 8005696:	e0b4      	b.n	8005802 <__kernel_rem_pio2+0x696>
 8005698:	9b04      	ldr	r3, [sp, #16]
 800569a:	9f50      	ldr	r7, [sp, #320]	; 0x140
 800569c:	9e51      	ldr	r6, [sp, #324]	; 0x144
 800569e:	9d52      	ldr	r5, [sp, #328]	; 0x148
 80056a0:	9c53      	ldr	r4, [sp, #332]	; 0x14c
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d000      	beq.n	80056a8 <__kernel_rem_pio2+0x53c>
 80056a6:	e0b5      	b.n	8005814 <__kernel_rem_pio2+0x6a8>
 80056a8:	0033      	movs	r3, r6
 80056aa:	003a      	movs	r2, r7
 80056ac:	9e03      	ldr	r6, [sp, #12]
 80056ae:	6032      	str	r2, [r6, #0]
 80056b0:	6073      	str	r3, [r6, #4]
 80056b2:	002a      	movs	r2, r5
 80056b4:	0023      	movs	r3, r4
 80056b6:	60b2      	str	r2, [r6, #8]
 80056b8:	60f3      	str	r3, [r6, #12]
 80056ba:	0002      	movs	r2, r0
 80056bc:	000b      	movs	r3, r1
 80056be:	6132      	str	r2, [r6, #16]
 80056c0:	6173      	str	r3, [r6, #20]
 80056c2:	e018      	b.n	80056f6 <__kernel_rem_pio2+0x58a>
 80056c4:	00fb      	lsls	r3, r7, #3
 80056c6:	aa50      	add	r2, sp, #320	; 0x140
 80056c8:	18d3      	adds	r3, r2, r3
 80056ca:	0028      	movs	r0, r5
 80056cc:	681a      	ldr	r2, [r3, #0]
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	0021      	movs	r1, r4
 80056d2:	f7fa fef5 	bl	80004c0 <__aeabi_dadd>
 80056d6:	0005      	movs	r5, r0
 80056d8:	000c      	movs	r4, r1
 80056da:	3f01      	subs	r7, #1
 80056dc:	2f00      	cmp	r7, #0
 80056de:	daf1      	bge.n	80056c4 <__kernel_rem_pio2+0x558>
 80056e0:	9b04      	ldr	r3, [sp, #16]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d002      	beq.n	80056ec <__kernel_rem_pio2+0x580>
 80056e6:	2380      	movs	r3, #128	; 0x80
 80056e8:	061b      	lsls	r3, r3, #24
 80056ea:	18e4      	adds	r4, r4, r3
 80056ec:	002a      	movs	r2, r5
 80056ee:	0023      	movs	r3, r4
 80056f0:	9903      	ldr	r1, [sp, #12]
 80056f2:	600a      	str	r2, [r1, #0]
 80056f4:	604b      	str	r3, [r1, #4]
 80056f6:	2007      	movs	r0, #7
 80056f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056fa:	4003      	ands	r3, r0
 80056fc:	0018      	movs	r0, r3
 80056fe:	23a1      	movs	r3, #161	; 0xa1
 8005700:	009b      	lsls	r3, r3, #2
 8005702:	449d      	add	sp, r3
 8005704:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005706:	2500      	movs	r5, #0
 8005708:	002c      	movs	r4, r5
 800570a:	e7e7      	b.n	80056dc <__kernel_rem_pio2+0x570>
 800570c:	00e3      	lsls	r3, r4, #3
 800570e:	aa50      	add	r2, sp, #320	; 0x140
 8005710:	18d3      	adds	r3, r2, r3
 8005712:	0030      	movs	r0, r6
 8005714:	681a      	ldr	r2, [r3, #0]
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	0029      	movs	r1, r5
 800571a:	f7fa fed1 	bl	80004c0 <__aeabi_dadd>
 800571e:	0006      	movs	r6, r0
 8005720:	000d      	movs	r5, r1
 8005722:	3c01      	subs	r4, #1
 8005724:	2c00      	cmp	r4, #0
 8005726:	daf1      	bge.n	800570c <__kernel_rem_pio2+0x5a0>
 8005728:	9b04      	ldr	r3, [sp, #16]
 800572a:	0029      	movs	r1, r5
 800572c:	2b00      	cmp	r3, #0
 800572e:	d002      	beq.n	8005736 <__kernel_rem_pio2+0x5ca>
 8005730:	2380      	movs	r3, #128	; 0x80
 8005732:	061b      	lsls	r3, r3, #24
 8005734:	18e9      	adds	r1, r5, r3
 8005736:	000b      	movs	r3, r1
 8005738:	0032      	movs	r2, r6
 800573a:	9903      	ldr	r1, [sp, #12]
 800573c:	2401      	movs	r4, #1
 800573e:	600a      	str	r2, [r1, #0]
 8005740:	604b      	str	r3, [r1, #4]
 8005742:	9850      	ldr	r0, [sp, #320]	; 0x140
 8005744:	9951      	ldr	r1, [sp, #324]	; 0x144
 8005746:	002b      	movs	r3, r5
 8005748:	f7fb fd50 	bl	80011ec <__aeabi_dsub>
 800574c:	42a7      	cmp	r7, r4
 800574e:	da0f      	bge.n	8005770 <__kernel_rem_pio2+0x604>
 8005750:	9b04      	ldr	r3, [sp, #16]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d002      	beq.n	800575c <__kernel_rem_pio2+0x5f0>
 8005756:	2380      	movs	r3, #128	; 0x80
 8005758:	061b      	lsls	r3, r3, #24
 800575a:	18c9      	adds	r1, r1, r3
 800575c:	000b      	movs	r3, r1
 800575e:	0002      	movs	r2, r0
 8005760:	9903      	ldr	r1, [sp, #12]
 8005762:	608a      	str	r2, [r1, #8]
 8005764:	60cb      	str	r3, [r1, #12]
 8005766:	e7c6      	b.n	80056f6 <__kernel_rem_pio2+0x58a>
 8005768:	2600      	movs	r6, #0
 800576a:	003c      	movs	r4, r7
 800576c:	0035      	movs	r5, r6
 800576e:	e7d9      	b.n	8005724 <__kernel_rem_pio2+0x5b8>
 8005770:	00e3      	lsls	r3, r4, #3
 8005772:	aa50      	add	r2, sp, #320	; 0x140
 8005774:	18d3      	adds	r3, r2, r3
 8005776:	681a      	ldr	r2, [r3, #0]
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	f7fa fea1 	bl	80004c0 <__aeabi_dadd>
 800577e:	3401      	adds	r4, #1
 8005780:	e7e4      	b.n	800574c <__kernel_rem_pio2+0x5e0>
 8005782:	682a      	ldr	r2, [r5, #0]
 8005784:	686b      	ldr	r3, [r5, #4]
 8005786:	9200      	str	r2, [sp, #0]
 8005788:	9301      	str	r3, [sp, #4]
 800578a:	9800      	ldr	r0, [sp, #0]
 800578c:	9901      	ldr	r1, [sp, #4]
 800578e:	68aa      	ldr	r2, [r5, #8]
 8005790:	68eb      	ldr	r3, [r5, #12]
 8005792:	9206      	str	r2, [sp, #24]
 8005794:	9307      	str	r3, [sp, #28]
 8005796:	f7fa fe93 	bl	80004c0 <__aeabi_dadd>
 800579a:	0002      	movs	r2, r0
 800579c:	000b      	movs	r3, r1
 800579e:	9008      	str	r0, [sp, #32]
 80057a0:	9109      	str	r1, [sp, #36]	; 0x24
 80057a2:	9800      	ldr	r0, [sp, #0]
 80057a4:	9901      	ldr	r1, [sp, #4]
 80057a6:	f7fb fd21 	bl	80011ec <__aeabi_dsub>
 80057aa:	9a06      	ldr	r2, [sp, #24]
 80057ac:	9b07      	ldr	r3, [sp, #28]
 80057ae:	f7fa fe87 	bl	80004c0 <__aeabi_dadd>
 80057b2:	9a08      	ldr	r2, [sp, #32]
 80057b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057b6:	3e01      	subs	r6, #1
 80057b8:	60a8      	str	r0, [r5, #8]
 80057ba:	60e9      	str	r1, [r5, #12]
 80057bc:	602a      	str	r2, [r5, #0]
 80057be:	606b      	str	r3, [r5, #4]
 80057c0:	e75b      	b.n	800567a <__kernel_rem_pio2+0x50e>
 80057c2:	9b00      	ldr	r3, [sp, #0]
 80057c4:	3b01      	subs	r3, #1
 80057c6:	9300      	str	r3, [sp, #0]
 80057c8:	6822      	ldr	r2, [r4, #0]
 80057ca:	6863      	ldr	r3, [r4, #4]
 80057cc:	9206      	str	r2, [sp, #24]
 80057ce:	9307      	str	r3, [sp, #28]
 80057d0:	9806      	ldr	r0, [sp, #24]
 80057d2:	9907      	ldr	r1, [sp, #28]
 80057d4:	68a2      	ldr	r2, [r4, #8]
 80057d6:	68e3      	ldr	r3, [r4, #12]
 80057d8:	9208      	str	r2, [sp, #32]
 80057da:	9309      	str	r3, [sp, #36]	; 0x24
 80057dc:	f7fa fe70 	bl	80004c0 <__aeabi_dadd>
 80057e0:	0002      	movs	r2, r0
 80057e2:	000b      	movs	r3, r1
 80057e4:	0005      	movs	r5, r0
 80057e6:	000e      	movs	r6, r1
 80057e8:	9806      	ldr	r0, [sp, #24]
 80057ea:	9907      	ldr	r1, [sp, #28]
 80057ec:	f7fb fcfe 	bl	80011ec <__aeabi_dsub>
 80057f0:	9a08      	ldr	r2, [sp, #32]
 80057f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057f4:	f7fa fe64 	bl	80004c0 <__aeabi_dadd>
 80057f8:	6025      	str	r5, [r4, #0]
 80057fa:	6066      	str	r6, [r4, #4]
 80057fc:	60a0      	str	r0, [r4, #8]
 80057fe:	60e1      	str	r1, [r4, #12]
 8005800:	e740      	b.n	8005684 <__kernel_rem_pio2+0x518>
 8005802:	00fb      	lsls	r3, r7, #3
 8005804:	aa50      	add	r2, sp, #320	; 0x140
 8005806:	18d3      	adds	r3, r2, r3
 8005808:	681a      	ldr	r2, [r3, #0]
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	f7fa fe58 	bl	80004c0 <__aeabi_dadd>
 8005810:	3f01      	subs	r7, #1
 8005812:	e73e      	b.n	8005692 <__kernel_rem_pio2+0x526>
 8005814:	9b03      	ldr	r3, [sp, #12]
 8005816:	9a03      	ldr	r2, [sp, #12]
 8005818:	601f      	str	r7, [r3, #0]
 800581a:	2380      	movs	r3, #128	; 0x80
 800581c:	061b      	lsls	r3, r3, #24
 800581e:	18f6      	adds	r6, r6, r3
 8005820:	18e4      	adds	r4, r4, r3
 8005822:	18c9      	adds	r1, r1, r3
 8005824:	6056      	str	r6, [r2, #4]
 8005826:	6095      	str	r5, [r2, #8]
 8005828:	60d4      	str	r4, [r2, #12]
 800582a:	6110      	str	r0, [r2, #16]
 800582c:	6151      	str	r1, [r2, #20]
 800582e:	e762      	b.n	80056f6 <__kernel_rem_pio2+0x58a>
 8005830:	41700000 	.word	0x41700000
 8005834:	3e700000 	.word	0x3e700000
 8005838:	08005d98 	.word	0x08005d98

0800583c <__kernel_sin>:
 800583c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800583e:	b089      	sub	sp, #36	; 0x24
 8005840:	9202      	str	r2, [sp, #8]
 8005842:	9303      	str	r3, [sp, #12]
 8005844:	4a46      	ldr	r2, [pc, #280]	; (8005960 <__kernel_sin+0x124>)
 8005846:	004b      	lsls	r3, r1, #1
 8005848:	0005      	movs	r5, r0
 800584a:	000c      	movs	r4, r1
 800584c:	085b      	lsrs	r3, r3, #1
 800584e:	4293      	cmp	r3, r2
 8005850:	dc03      	bgt.n	800585a <__kernel_sin+0x1e>
 8005852:	f7fc f813 	bl	800187c <__aeabi_d2iz>
 8005856:	2800      	cmp	r0, #0
 8005858:	d04c      	beq.n	80058f4 <__kernel_sin+0xb8>
 800585a:	002a      	movs	r2, r5
 800585c:	0023      	movs	r3, r4
 800585e:	0028      	movs	r0, r5
 8005860:	0021      	movs	r1, r4
 8005862:	f7fb fa51 	bl	8000d08 <__aeabi_dmul>
 8005866:	0006      	movs	r6, r0
 8005868:	000f      	movs	r7, r1
 800586a:	0002      	movs	r2, r0
 800586c:	000b      	movs	r3, r1
 800586e:	0028      	movs	r0, r5
 8005870:	0021      	movs	r1, r4
 8005872:	f7fb fa49 	bl	8000d08 <__aeabi_dmul>
 8005876:	4a3b      	ldr	r2, [pc, #236]	; (8005964 <__kernel_sin+0x128>)
 8005878:	9000      	str	r0, [sp, #0]
 800587a:	9101      	str	r1, [sp, #4]
 800587c:	4b3a      	ldr	r3, [pc, #232]	; (8005968 <__kernel_sin+0x12c>)
 800587e:	0030      	movs	r0, r6
 8005880:	0039      	movs	r1, r7
 8005882:	f7fb fa41 	bl	8000d08 <__aeabi_dmul>
 8005886:	4a39      	ldr	r2, [pc, #228]	; (800596c <__kernel_sin+0x130>)
 8005888:	4b39      	ldr	r3, [pc, #228]	; (8005970 <__kernel_sin+0x134>)
 800588a:	f7fb fcaf 	bl	80011ec <__aeabi_dsub>
 800588e:	0032      	movs	r2, r6
 8005890:	003b      	movs	r3, r7
 8005892:	f7fb fa39 	bl	8000d08 <__aeabi_dmul>
 8005896:	4a37      	ldr	r2, [pc, #220]	; (8005974 <__kernel_sin+0x138>)
 8005898:	4b37      	ldr	r3, [pc, #220]	; (8005978 <__kernel_sin+0x13c>)
 800589a:	f7fa fe11 	bl	80004c0 <__aeabi_dadd>
 800589e:	0032      	movs	r2, r6
 80058a0:	003b      	movs	r3, r7
 80058a2:	f7fb fa31 	bl	8000d08 <__aeabi_dmul>
 80058a6:	4a35      	ldr	r2, [pc, #212]	; (800597c <__kernel_sin+0x140>)
 80058a8:	4b35      	ldr	r3, [pc, #212]	; (8005980 <__kernel_sin+0x144>)
 80058aa:	f7fb fc9f 	bl	80011ec <__aeabi_dsub>
 80058ae:	0032      	movs	r2, r6
 80058b0:	003b      	movs	r3, r7
 80058b2:	f7fb fa29 	bl	8000d08 <__aeabi_dmul>
 80058b6:	4b33      	ldr	r3, [pc, #204]	; (8005984 <__kernel_sin+0x148>)
 80058b8:	4a33      	ldr	r2, [pc, #204]	; (8005988 <__kernel_sin+0x14c>)
 80058ba:	f7fa fe01 	bl	80004c0 <__aeabi_dadd>
 80058be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80058c0:	9004      	str	r0, [sp, #16]
 80058c2:	9105      	str	r1, [sp, #20]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d119      	bne.n	80058fc <__kernel_sin+0xc0>
 80058c8:	0002      	movs	r2, r0
 80058ca:	000b      	movs	r3, r1
 80058cc:	0030      	movs	r0, r6
 80058ce:	0039      	movs	r1, r7
 80058d0:	f7fb fa1a 	bl	8000d08 <__aeabi_dmul>
 80058d4:	4a2d      	ldr	r2, [pc, #180]	; (800598c <__kernel_sin+0x150>)
 80058d6:	4b2e      	ldr	r3, [pc, #184]	; (8005990 <__kernel_sin+0x154>)
 80058d8:	f7fb fc88 	bl	80011ec <__aeabi_dsub>
 80058dc:	9a00      	ldr	r2, [sp, #0]
 80058de:	9b01      	ldr	r3, [sp, #4]
 80058e0:	f7fb fa12 	bl	8000d08 <__aeabi_dmul>
 80058e4:	0002      	movs	r2, r0
 80058e6:	000b      	movs	r3, r1
 80058e8:	0028      	movs	r0, r5
 80058ea:	0021      	movs	r1, r4
 80058ec:	f7fa fde8 	bl	80004c0 <__aeabi_dadd>
 80058f0:	0005      	movs	r5, r0
 80058f2:	000c      	movs	r4, r1
 80058f4:	0028      	movs	r0, r5
 80058f6:	0021      	movs	r1, r4
 80058f8:	b009      	add	sp, #36	; 0x24
 80058fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80058fc:	2200      	movs	r2, #0
 80058fe:	9802      	ldr	r0, [sp, #8]
 8005900:	9903      	ldr	r1, [sp, #12]
 8005902:	4b24      	ldr	r3, [pc, #144]	; (8005994 <__kernel_sin+0x158>)
 8005904:	f7fb fa00 	bl	8000d08 <__aeabi_dmul>
 8005908:	9a04      	ldr	r2, [sp, #16]
 800590a:	9b05      	ldr	r3, [sp, #20]
 800590c:	9006      	str	r0, [sp, #24]
 800590e:	9107      	str	r1, [sp, #28]
 8005910:	9800      	ldr	r0, [sp, #0]
 8005912:	9901      	ldr	r1, [sp, #4]
 8005914:	f7fb f9f8 	bl	8000d08 <__aeabi_dmul>
 8005918:	0002      	movs	r2, r0
 800591a:	000b      	movs	r3, r1
 800591c:	9806      	ldr	r0, [sp, #24]
 800591e:	9907      	ldr	r1, [sp, #28]
 8005920:	f7fb fc64 	bl	80011ec <__aeabi_dsub>
 8005924:	0032      	movs	r2, r6
 8005926:	003b      	movs	r3, r7
 8005928:	f7fb f9ee 	bl	8000d08 <__aeabi_dmul>
 800592c:	9a02      	ldr	r2, [sp, #8]
 800592e:	9b03      	ldr	r3, [sp, #12]
 8005930:	f7fb fc5c 	bl	80011ec <__aeabi_dsub>
 8005934:	4a15      	ldr	r2, [pc, #84]	; (800598c <__kernel_sin+0x150>)
 8005936:	0006      	movs	r6, r0
 8005938:	000f      	movs	r7, r1
 800593a:	9800      	ldr	r0, [sp, #0]
 800593c:	9901      	ldr	r1, [sp, #4]
 800593e:	4b14      	ldr	r3, [pc, #80]	; (8005990 <__kernel_sin+0x154>)
 8005940:	f7fb f9e2 	bl	8000d08 <__aeabi_dmul>
 8005944:	0002      	movs	r2, r0
 8005946:	000b      	movs	r3, r1
 8005948:	0030      	movs	r0, r6
 800594a:	0039      	movs	r1, r7
 800594c:	f7fa fdb8 	bl	80004c0 <__aeabi_dadd>
 8005950:	0002      	movs	r2, r0
 8005952:	000b      	movs	r3, r1
 8005954:	0028      	movs	r0, r5
 8005956:	0021      	movs	r1, r4
 8005958:	f7fb fc48 	bl	80011ec <__aeabi_dsub>
 800595c:	e7c8      	b.n	80058f0 <__kernel_sin+0xb4>
 800595e:	46c0      	nop			; (mov r8, r8)
 8005960:	3e3fffff 	.word	0x3e3fffff
 8005964:	5acfd57c 	.word	0x5acfd57c
 8005968:	3de5d93a 	.word	0x3de5d93a
 800596c:	8a2b9ceb 	.word	0x8a2b9ceb
 8005970:	3e5ae5e6 	.word	0x3e5ae5e6
 8005974:	57b1fe7d 	.word	0x57b1fe7d
 8005978:	3ec71de3 	.word	0x3ec71de3
 800597c:	19c161d5 	.word	0x19c161d5
 8005980:	3f2a01a0 	.word	0x3f2a01a0
 8005984:	3f811111 	.word	0x3f811111
 8005988:	1110f8a6 	.word	0x1110f8a6
 800598c:	55555549 	.word	0x55555549
 8005990:	3fc55555 	.word	0x3fc55555
 8005994:	3fe00000 	.word	0x3fe00000

08005998 <fabs>:
 8005998:	0049      	lsls	r1, r1, #1
 800599a:	084b      	lsrs	r3, r1, #1
 800599c:	0019      	movs	r1, r3
 800599e:	4770      	bx	lr

080059a0 <floor>:
 80059a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059a2:	004b      	lsls	r3, r1, #1
 80059a4:	4a39      	ldr	r2, [pc, #228]	; (8005a8c <floor+0xec>)
 80059a6:	0d5b      	lsrs	r3, r3, #21
 80059a8:	b085      	sub	sp, #20
 80059aa:	189e      	adds	r6, r3, r2
 80059ac:	000c      	movs	r4, r1
 80059ae:	0005      	movs	r5, r0
 80059b0:	9003      	str	r0, [sp, #12]
 80059b2:	2e13      	cmp	r6, #19
 80059b4:	dc34      	bgt.n	8005a20 <floor+0x80>
 80059b6:	2e00      	cmp	r6, #0
 80059b8:	da15      	bge.n	80059e6 <floor+0x46>
 80059ba:	4a35      	ldr	r2, [pc, #212]	; (8005a90 <floor+0xf0>)
 80059bc:	4b35      	ldr	r3, [pc, #212]	; (8005a94 <floor+0xf4>)
 80059be:	f7fa fd7f 	bl	80004c0 <__aeabi_dadd>
 80059c2:	2200      	movs	r2, #0
 80059c4:	2300      	movs	r3, #0
 80059c6:	f7fa fd49 	bl	800045c <__aeabi_dcmpgt>
 80059ca:	2800      	cmp	r0, #0
 80059cc:	d008      	beq.n	80059e0 <floor+0x40>
 80059ce:	2c00      	cmp	r4, #0
 80059d0:	da59      	bge.n	8005a86 <floor+0xe6>
 80059d2:	0063      	lsls	r3, r4, #1
 80059d4:	085b      	lsrs	r3, r3, #1
 80059d6:	432b      	orrs	r3, r5
 80059d8:	2500      	movs	r5, #0
 80059da:	42ab      	cmp	r3, r5
 80059dc:	d000      	beq.n	80059e0 <floor+0x40>
 80059de:	4c2e      	ldr	r4, [pc, #184]	; (8005a98 <floor+0xf8>)
 80059e0:	0028      	movs	r0, r5
 80059e2:	0021      	movs	r1, r4
 80059e4:	e026      	b.n	8005a34 <floor+0x94>
 80059e6:	4f2d      	ldr	r7, [pc, #180]	; (8005a9c <floor+0xfc>)
 80059e8:	4137      	asrs	r7, r6
 80059ea:	003b      	movs	r3, r7
 80059ec:	400b      	ands	r3, r1
 80059ee:	4303      	orrs	r3, r0
 80059f0:	d020      	beq.n	8005a34 <floor+0x94>
 80059f2:	9000      	str	r0, [sp, #0]
 80059f4:	9101      	str	r1, [sp, #4]
 80059f6:	4a26      	ldr	r2, [pc, #152]	; (8005a90 <floor+0xf0>)
 80059f8:	4b26      	ldr	r3, [pc, #152]	; (8005a94 <floor+0xf4>)
 80059fa:	9800      	ldr	r0, [sp, #0]
 80059fc:	9901      	ldr	r1, [sp, #4]
 80059fe:	f7fa fd5f 	bl	80004c0 <__aeabi_dadd>
 8005a02:	2200      	movs	r2, #0
 8005a04:	2300      	movs	r3, #0
 8005a06:	f7fa fd29 	bl	800045c <__aeabi_dcmpgt>
 8005a0a:	2800      	cmp	r0, #0
 8005a0c:	d0e8      	beq.n	80059e0 <floor+0x40>
 8005a0e:	2c00      	cmp	r4, #0
 8005a10:	da03      	bge.n	8005a1a <floor+0x7a>
 8005a12:	2380      	movs	r3, #128	; 0x80
 8005a14:	035b      	lsls	r3, r3, #13
 8005a16:	4133      	asrs	r3, r6
 8005a18:	18e4      	adds	r4, r4, r3
 8005a1a:	43bc      	bics	r4, r7
 8005a1c:	2500      	movs	r5, #0
 8005a1e:	e7df      	b.n	80059e0 <floor+0x40>
 8005a20:	2e33      	cmp	r6, #51	; 0x33
 8005a22:	dd09      	ble.n	8005a38 <floor+0x98>
 8005a24:	2380      	movs	r3, #128	; 0x80
 8005a26:	00db      	lsls	r3, r3, #3
 8005a28:	429e      	cmp	r6, r3
 8005a2a:	d103      	bne.n	8005a34 <floor+0x94>
 8005a2c:	0002      	movs	r2, r0
 8005a2e:	000b      	movs	r3, r1
 8005a30:	f7fa fd46 	bl	80004c0 <__aeabi_dadd>
 8005a34:	b005      	add	sp, #20
 8005a36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a38:	2701      	movs	r7, #1
 8005a3a:	4a19      	ldr	r2, [pc, #100]	; (8005aa0 <floor+0x100>)
 8005a3c:	427f      	negs	r7, r7
 8005a3e:	189b      	adds	r3, r3, r2
 8005a40:	40df      	lsrs	r7, r3
 8005a42:	4238      	tst	r0, r7
 8005a44:	d0f6      	beq.n	8005a34 <floor+0x94>
 8005a46:	9000      	str	r0, [sp, #0]
 8005a48:	9101      	str	r1, [sp, #4]
 8005a4a:	4a11      	ldr	r2, [pc, #68]	; (8005a90 <floor+0xf0>)
 8005a4c:	4b11      	ldr	r3, [pc, #68]	; (8005a94 <floor+0xf4>)
 8005a4e:	9800      	ldr	r0, [sp, #0]
 8005a50:	9901      	ldr	r1, [sp, #4]
 8005a52:	f7fa fd35 	bl	80004c0 <__aeabi_dadd>
 8005a56:	2200      	movs	r2, #0
 8005a58:	2300      	movs	r3, #0
 8005a5a:	f7fa fcff 	bl	800045c <__aeabi_dcmpgt>
 8005a5e:	2800      	cmp	r0, #0
 8005a60:	d0be      	beq.n	80059e0 <floor+0x40>
 8005a62:	2c00      	cmp	r4, #0
 8005a64:	da02      	bge.n	8005a6c <floor+0xcc>
 8005a66:	2e14      	cmp	r6, #20
 8005a68:	d102      	bne.n	8005a70 <floor+0xd0>
 8005a6a:	3401      	adds	r4, #1
 8005a6c:	43bd      	bics	r5, r7
 8005a6e:	e7b7      	b.n	80059e0 <floor+0x40>
 8005a70:	2334      	movs	r3, #52	; 0x34
 8005a72:	1b9e      	subs	r6, r3, r6
 8005a74:	3b33      	subs	r3, #51	; 0x33
 8005a76:	40b3      	lsls	r3, r6
 8005a78:	18ed      	adds	r5, r5, r3
 8005a7a:	9b03      	ldr	r3, [sp, #12]
 8005a7c:	429d      	cmp	r5, r3
 8005a7e:	419b      	sbcs	r3, r3
 8005a80:	425b      	negs	r3, r3
 8005a82:	18e4      	adds	r4, r4, r3
 8005a84:	e7f2      	b.n	8005a6c <floor+0xcc>
 8005a86:	2500      	movs	r5, #0
 8005a88:	002c      	movs	r4, r5
 8005a8a:	e7a9      	b.n	80059e0 <floor+0x40>
 8005a8c:	fffffc01 	.word	0xfffffc01
 8005a90:	8800759c 	.word	0x8800759c
 8005a94:	7e37e43c 	.word	0x7e37e43c
 8005a98:	bff00000 	.word	0xbff00000
 8005a9c:	000fffff 	.word	0x000fffff
 8005aa0:	fffffbed 	.word	0xfffffbed

08005aa4 <scalbn>:
 8005aa4:	004b      	lsls	r3, r1, #1
 8005aa6:	b570      	push	{r4, r5, r6, lr}
 8005aa8:	0d5b      	lsrs	r3, r3, #21
 8005aaa:	0014      	movs	r4, r2
 8005aac:	000a      	movs	r2, r1
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d10d      	bne.n	8005ace <scalbn+0x2a>
 8005ab2:	004b      	lsls	r3, r1, #1
 8005ab4:	085b      	lsrs	r3, r3, #1
 8005ab6:	4303      	orrs	r3, r0
 8005ab8:	d010      	beq.n	8005adc <scalbn+0x38>
 8005aba:	4b21      	ldr	r3, [pc, #132]	; (8005b40 <scalbn+0x9c>)
 8005abc:	2200      	movs	r2, #0
 8005abe:	f7fb f923 	bl	8000d08 <__aeabi_dmul>
 8005ac2:	4b20      	ldr	r3, [pc, #128]	; (8005b44 <scalbn+0xa0>)
 8005ac4:	429c      	cmp	r4, r3
 8005ac6:	da0a      	bge.n	8005ade <scalbn+0x3a>
 8005ac8:	4a1f      	ldr	r2, [pc, #124]	; (8005b48 <scalbn+0xa4>)
 8005aca:	4b20      	ldr	r3, [pc, #128]	; (8005b4c <scalbn+0xa8>)
 8005acc:	e017      	b.n	8005afe <scalbn+0x5a>
 8005ace:	4d20      	ldr	r5, [pc, #128]	; (8005b50 <scalbn+0xac>)
 8005ad0:	42ab      	cmp	r3, r5
 8005ad2:	d108      	bne.n	8005ae6 <scalbn+0x42>
 8005ad4:	0002      	movs	r2, r0
 8005ad6:	000b      	movs	r3, r1
 8005ad8:	f7fa fcf2 	bl	80004c0 <__aeabi_dadd>
 8005adc:	bd70      	pop	{r4, r5, r6, pc}
 8005ade:	000a      	movs	r2, r1
 8005ae0:	004b      	lsls	r3, r1, #1
 8005ae2:	0d5b      	lsrs	r3, r3, #21
 8005ae4:	3b36      	subs	r3, #54	; 0x36
 8005ae6:	4d1b      	ldr	r5, [pc, #108]	; (8005b54 <scalbn+0xb0>)
 8005ae8:	18e3      	adds	r3, r4, r3
 8005aea:	42ab      	cmp	r3, r5
 8005aec:	dd0a      	ble.n	8005b04 <scalbn+0x60>
 8005aee:	0002      	movs	r2, r0
 8005af0:	000b      	movs	r3, r1
 8005af2:	4819      	ldr	r0, [pc, #100]	; (8005b58 <scalbn+0xb4>)
 8005af4:	4919      	ldr	r1, [pc, #100]	; (8005b5c <scalbn+0xb8>)
 8005af6:	f000 f839 	bl	8005b6c <copysign>
 8005afa:	4a17      	ldr	r2, [pc, #92]	; (8005b58 <scalbn+0xb4>)
 8005afc:	4b17      	ldr	r3, [pc, #92]	; (8005b5c <scalbn+0xb8>)
 8005afe:	f7fb f903 	bl	8000d08 <__aeabi_dmul>
 8005b02:	e7eb      	b.n	8005adc <scalbn+0x38>
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	dd05      	ble.n	8005b14 <scalbn+0x70>
 8005b08:	4c15      	ldr	r4, [pc, #84]	; (8005b60 <scalbn+0xbc>)
 8005b0a:	051b      	lsls	r3, r3, #20
 8005b0c:	4022      	ands	r2, r4
 8005b0e:	431a      	orrs	r2, r3
 8005b10:	0011      	movs	r1, r2
 8005b12:	e7e3      	b.n	8005adc <scalbn+0x38>
 8005b14:	001d      	movs	r5, r3
 8005b16:	3535      	adds	r5, #53	; 0x35
 8005b18:	da09      	bge.n	8005b2e <scalbn+0x8a>
 8005b1a:	4b12      	ldr	r3, [pc, #72]	; (8005b64 <scalbn+0xc0>)
 8005b1c:	0002      	movs	r2, r0
 8005b1e:	429c      	cmp	r4, r3
 8005b20:	dce6      	bgt.n	8005af0 <scalbn+0x4c>
 8005b22:	000b      	movs	r3, r1
 8005b24:	4808      	ldr	r0, [pc, #32]	; (8005b48 <scalbn+0xa4>)
 8005b26:	4909      	ldr	r1, [pc, #36]	; (8005b4c <scalbn+0xa8>)
 8005b28:	f000 f820 	bl	8005b6c <copysign>
 8005b2c:	e7cc      	b.n	8005ac8 <scalbn+0x24>
 8005b2e:	4c0c      	ldr	r4, [pc, #48]	; (8005b60 <scalbn+0xbc>)
 8005b30:	3336      	adds	r3, #54	; 0x36
 8005b32:	4022      	ands	r2, r4
 8005b34:	051b      	lsls	r3, r3, #20
 8005b36:	4313      	orrs	r3, r2
 8005b38:	0019      	movs	r1, r3
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	4b0a      	ldr	r3, [pc, #40]	; (8005b68 <scalbn+0xc4>)
 8005b3e:	e7de      	b.n	8005afe <scalbn+0x5a>
 8005b40:	43500000 	.word	0x43500000
 8005b44:	ffff3cb0 	.word	0xffff3cb0
 8005b48:	c2f8f359 	.word	0xc2f8f359
 8005b4c:	01a56e1f 	.word	0x01a56e1f
 8005b50:	000007ff 	.word	0x000007ff
 8005b54:	000007fe 	.word	0x000007fe
 8005b58:	8800759c 	.word	0x8800759c
 8005b5c:	7e37e43c 	.word	0x7e37e43c
 8005b60:	800fffff 	.word	0x800fffff
 8005b64:	0000c350 	.word	0x0000c350
 8005b68:	3c900000 	.word	0x3c900000

08005b6c <copysign>:
 8005b6c:	b530      	push	{r4, r5, lr}
 8005b6e:	004a      	lsls	r2, r1, #1
 8005b70:	0fdb      	lsrs	r3, r3, #31
 8005b72:	07db      	lsls	r3, r3, #31
 8005b74:	0852      	lsrs	r2, r2, #1
 8005b76:	431a      	orrs	r2, r3
 8005b78:	0011      	movs	r1, r2
 8005b7a:	bd30      	pop	{r4, r5, pc}

08005b7c <_init>:
 8005b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b7e:	46c0      	nop			; (mov r8, r8)
 8005b80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b82:	bc08      	pop	{r3}
 8005b84:	469e      	mov	lr, r3
 8005b86:	4770      	bx	lr

08005b88 <_fini>:
 8005b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b8a:	46c0      	nop			; (mov r8, r8)
 8005b8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b8e:	bc08      	pop	{r3}
 8005b90:	469e      	mov	lr, r3
 8005b92:	4770      	bx	lr
